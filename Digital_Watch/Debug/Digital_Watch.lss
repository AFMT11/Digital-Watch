
Digital_Watch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000027d2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000068  00800060  000027d2  00002866  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000070  008000c8  008000c8  000028ce  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000028ce  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002900  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000240  00000000  00000000  0000293c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003352  00000000  00000000  00002b7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e14  00000000  00000000  00005ece  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001fcf  00000000  00000000  00006ce2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007b0  00000000  00000000  00008cb4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008a4  00000000  00000000  00009464  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000023b7  00000000  00000000  00009d08  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000200  00000000  00000000  0000c0bf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 20 13 	jmp	0x2640	; 0x2640 <__vector_4>
      14:	0c 94 56 12 	jmp	0x24ac	; 0x24ac <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 f3 10 	jmp	0x21e6	; 0x21e6 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 5a 0f 	jmp	0x1eb4	; 0x1eb4 <__vector_9>
      28:	0c 94 fb 0d 	jmp	0x1bf6	; 0x1bf6 <__vector_10>
      2c:	0c 94 9b 0c 	jmp	0x1936	; 0x1936 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 ed       	ldi	r30, 0xD2	; 210
      68:	f7 e2       	ldi	r31, 0x27	; 39
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a8 3c       	cpi	r26, 0xC8	; 200
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	21 e0       	ldi	r18, 0x01	; 1
      78:	a8 ec       	ldi	r26, 0xC8	; 200
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 33       	cpi	r26, 0x38	; 56
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 04 05 	call	0xa08	; 0xa08 <main>
      8a:	0c 94 e7 13 	jmp	0x27ce	; 0x27ce <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <BUTTON0_GetPinVal>:
#include "Button.h"
#define F_CPU 16000000
#include <util/delay.h>

Uint8 BUTTON0_GetPinVal(void)
{
      92:	cf 93       	push	r28
	Uint8 val = 0;
	val = DIO_GetPinVal(BUTTON0_PORT, BUTTON0_PIN);
      94:	60 e0       	ldi	r22, 0x00	; 0
      96:	81 e0       	ldi	r24, 0x01	; 1
      98:	0e 94 1b 02 	call	0x436	; 0x436 <DIO_GetPinVal>
      9c:	c8 2f       	mov	r28, r24
	while(DIO_GetPinVal(BUTTON0_PORT, BUTTON0_PIN));
      9e:	60 e0       	ldi	r22, 0x00	; 0
      a0:	81 e0       	ldi	r24, 0x01	; 1
      a2:	0e 94 1b 02 	call	0x436	; 0x436 <DIO_GetPinVal>
      a6:	81 11       	cpse	r24, r1
      a8:	fa cf       	rjmp	.-12     	; 0x9e <BUTTON0_GetPinVal+0xc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      aa:	2f ef       	ldi	r18, 0xFF	; 255
      ac:	89 ef       	ldi	r24, 0xF9	; 249
      ae:	90 e0       	ldi	r25, 0x00	; 0
      b0:	21 50       	subi	r18, 0x01	; 1
      b2:	80 40       	sbci	r24, 0x00	; 0
      b4:	90 40       	sbci	r25, 0x00	; 0
      b6:	e1 f7       	brne	.-8      	; 0xb0 <BUTTON0_GetPinVal+0x1e>
      b8:	00 c0       	rjmp	.+0      	; 0xba <BUTTON0_GetPinVal+0x28>
      ba:	00 00       	nop
	_delay_ms(20);
	return val;	
}
      bc:	8c 2f       	mov	r24, r28
      be:	cf 91       	pop	r28
      c0:	08 95       	ret

000000c2 <BUZZ_OFF>:
{
	DIO_SetPinVal(Buzz_Port, Buzz_Pin, DIO_PIN_ON);
}
void BUZZ_OFF(void)
{
	DIO_SetPinVal(Buzz_Port, Buzz_Pin, DIO_PIN_OFF);
      c2:	40 e0       	ldi	r20, 0x00	; 0
      c4:	63 e0       	ldi	r22, 0x03	; 3
      c6:	80 e0       	ldi	r24, 0x00	; 0
      c8:	0e 94 6d 01 	call	0x2da	; 0x2da <DIO_SetPinVal>
      cc:	08 95       	ret

000000ce <Buzz_Tone0>:
}

void Buzz_Tone0(void)
{
      ce:	cf 93       	push	r28
      d0:	c4 e0       	ldi	r28, 0x04	; 4
	Uint8 i;
	for (i = 0; i < 4; i++)
	{
		DIO_SetPinVal(Buzz_Port, Buzz_Pin, DIO_PIN_ON);
      d2:	4f ef       	ldi	r20, 0xFF	; 255
      d4:	63 e0       	ldi	r22, 0x03	; 3
      d6:	80 e0       	ldi	r24, 0x00	; 0
      d8:	0e 94 6d 01 	call	0x2da	; 0x2da <DIO_SetPinVal>
      dc:	2f ef       	ldi	r18, 0xFF	; 255
      de:	80 e7       	ldi	r24, 0x70	; 112
      e0:	92 e0       	ldi	r25, 0x02	; 2
      e2:	21 50       	subi	r18, 0x01	; 1
      e4:	80 40       	sbci	r24, 0x00	; 0
      e6:	90 40       	sbci	r25, 0x00	; 0
      e8:	e1 f7       	brne	.-8      	; 0xe2 <Buzz_Tone0+0x14>
      ea:	00 c0       	rjmp	.+0      	; 0xec <Buzz_Tone0+0x1e>
      ec:	00 00       	nop
		_delay_ms(50);
		DIO_SetPinVal(Buzz_Port, Buzz_Pin, DIO_PIN_OFF);
      ee:	40 e0       	ldi	r20, 0x00	; 0
      f0:	63 e0       	ldi	r22, 0x03	; 3
      f2:	80 e0       	ldi	r24, 0x00	; 0
      f4:	0e 94 6d 01 	call	0x2da	; 0x2da <DIO_SetPinVal>
      f8:	2f ef       	ldi	r18, 0xFF	; 255
      fa:	81 ee       	ldi	r24, 0xE1	; 225
      fc:	94 e0       	ldi	r25, 0x04	; 4
      fe:	21 50       	subi	r18, 0x01	; 1
     100:	80 40       	sbci	r24, 0x00	; 0
     102:	90 40       	sbci	r25, 0x00	; 0
     104:	e1 f7       	brne	.-8      	; 0xfe <Buzz_Tone0+0x30>
     106:	00 c0       	rjmp	.+0      	; 0x108 <Buzz_Tone0+0x3a>
     108:	00 00       	nop
     10a:	c1 50       	subi	r28, 0x01	; 1
}

void Buzz_Tone0(void)
{
	Uint8 i;
	for (i = 0; i < 4; i++)
     10c:	11 f7       	brne	.-60     	; 0xd2 <Buzz_Tone0+0x4>
		DIO_SetPinVal(Buzz_Port, Buzz_Pin, DIO_PIN_ON);
		_delay_ms(50);
		DIO_SetPinVal(Buzz_Port, Buzz_Pin, DIO_PIN_OFF);
		_delay_ms(100);
	}
}
     10e:	cf 91       	pop	r28
     110:	08 95       	ret

00000112 <Buzz_Tone1>:
void Buzz_Tone1(void)
{
		DIO_SetPinVal(Buzz_Port, Buzz_Pin, DIO_PIN_ON);
     112:	4f ef       	ldi	r20, 0xFF	; 255
     114:	63 e0       	ldi	r22, 0x03	; 3
     116:	80 e0       	ldi	r24, 0x00	; 0
     118:	0e 94 6d 01 	call	0x2da	; 0x2da <DIO_SetPinVal>
     11c:	8f e1       	ldi	r24, 0x1F	; 31
     11e:	9e e4       	ldi	r25, 0x4E	; 78
     120:	01 97       	sbiw	r24, 0x01	; 1
     122:	f1 f7       	brne	.-4      	; 0x120 <Buzz_Tone1+0xe>
     124:	00 c0       	rjmp	.+0      	; 0x126 <Buzz_Tone1+0x14>
     126:	00 00       	nop
		_delay_ms(5);
		DIO_SetPinVal(Buzz_Port, Buzz_Pin, DIO_PIN_OFF);
     128:	40 e0       	ldi	r20, 0x00	; 0
     12a:	63 e0       	ldi	r22, 0x03	; 3
     12c:	80 e0       	ldi	r24, 0x00	; 0
     12e:	0e 94 6d 01 	call	0x2da	; 0x2da <DIO_SetPinVal>
     132:	08 95       	ret

00000134 <Buzz_Tone2>:
void Buzz_Tone2(void)
{
	Uint8 i;
	for (i = 0; i < 2; i++)
	{
		DIO_SetPinVal(Buzz_Port, Buzz_Pin, DIO_PIN_ON);
     134:	4f ef       	ldi	r20, 0xFF	; 255
     136:	63 e0       	ldi	r22, 0x03	; 3
     138:	80 e0       	ldi	r24, 0x00	; 0
     13a:	0e 94 6d 01 	call	0x2da	; 0x2da <DIO_SetPinVal>
     13e:	2f ef       	ldi	r18, 0xFF	; 255
     140:	81 ee       	ldi	r24, 0xE1	; 225
     142:	94 e0       	ldi	r25, 0x04	; 4
     144:	21 50       	subi	r18, 0x01	; 1
     146:	80 40       	sbci	r24, 0x00	; 0
     148:	90 40       	sbci	r25, 0x00	; 0
     14a:	e1 f7       	brne	.-8      	; 0x144 <Buzz_Tone2+0x10>
     14c:	00 c0       	rjmp	.+0      	; 0x14e <Buzz_Tone2+0x1a>
     14e:	00 00       	nop
		_delay_ms(100);
		DIO_SetPinVal(Buzz_Port, Buzz_Pin, DIO_PIN_OFF);
     150:	40 e0       	ldi	r20, 0x00	; 0
     152:	63 e0       	ldi	r22, 0x03	; 3
     154:	80 e0       	ldi	r24, 0x00	; 0
     156:	0e 94 6d 01 	call	0x2da	; 0x2da <DIO_SetPinVal>
     15a:	2f ef       	ldi	r18, 0xFF	; 255
     15c:	80 e7       	ldi	r24, 0x70	; 112
     15e:	92 e0       	ldi	r25, 0x02	; 2
     160:	21 50       	subi	r18, 0x01	; 1
     162:	80 40       	sbci	r24, 0x00	; 0
     164:	90 40       	sbci	r25, 0x00	; 0
     166:	e1 f7       	brne	.-8      	; 0x160 <Buzz_Tone2+0x2c>
     168:	00 c0       	rjmp	.+0      	; 0x16a <Buzz_Tone2+0x36>
     16a:	00 00       	nop
void Buzz_Tone2(void)
{
	Uint8 i;
	for (i = 0; i < 2; i++)
	{
		DIO_SetPinVal(Buzz_Port, Buzz_Pin, DIO_PIN_ON);
     16c:	4f ef       	ldi	r20, 0xFF	; 255
     16e:	63 e0       	ldi	r22, 0x03	; 3
     170:	80 e0       	ldi	r24, 0x00	; 0
     172:	0e 94 6d 01 	call	0x2da	; 0x2da <DIO_SetPinVal>
     176:	2f ef       	ldi	r18, 0xFF	; 255
     178:	81 ee       	ldi	r24, 0xE1	; 225
     17a:	94 e0       	ldi	r25, 0x04	; 4
     17c:	21 50       	subi	r18, 0x01	; 1
     17e:	80 40       	sbci	r24, 0x00	; 0
     180:	90 40       	sbci	r25, 0x00	; 0
     182:	e1 f7       	brne	.-8      	; 0x17c <Buzz_Tone2+0x48>
     184:	00 c0       	rjmp	.+0      	; 0x186 <Buzz_Tone2+0x52>
     186:	00 00       	nop
		_delay_ms(100);
		DIO_SetPinVal(Buzz_Port, Buzz_Pin, DIO_PIN_OFF);
     188:	40 e0       	ldi	r20, 0x00	; 0
     18a:	63 e0       	ldi	r22, 0x03	; 3
     18c:	80 e0       	ldi	r24, 0x00	; 0
     18e:	0e 94 6d 01 	call	0x2da	; 0x2da <DIO_SetPinVal>
     192:	2f ef       	ldi	r18, 0xFF	; 255
     194:	80 e7       	ldi	r24, 0x70	; 112
     196:	92 e0       	ldi	r25, 0x02	; 2
     198:	21 50       	subi	r18, 0x01	; 1
     19a:	80 40       	sbci	r24, 0x00	; 0
     19c:	90 40       	sbci	r25, 0x00	; 0
     19e:	e1 f7       	brne	.-8      	; 0x198 <Buzz_Tone2+0x64>
     1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <Buzz_Tone2+0x6e>
     1a2:	00 00       	nop
     1a4:	08 95       	ret

000001a6 <DIO_SetPinDir>:
			break;		
			default:   //MISRA C rules
			break;										
		}	
	}
}
     1a6:	44 23       	and	r20, r20
     1a8:	21 f0       	breq	.+8      	; 0x1b2 <DIO_SetPinDir+0xc>
     1aa:	4f 3f       	cpi	r20, 0xFF	; 255
     1ac:	09 f4       	brne	.+2      	; 0x1b0 <DIO_SetPinDir+0xa>
     1ae:	4b c0       	rjmp	.+150    	; 0x246 <DIO_SetPinDir+0xa0>
     1b0:	08 95       	ret
     1b2:	68 30       	cpi	r22, 0x08	; 8
     1b4:	c0 f5       	brcc	.+112    	; 0x226 <DIO_SetPinDir+0x80>
     1b6:	81 30       	cpi	r24, 0x01	; 1
     1b8:	91 f0       	breq	.+36     	; 0x1de <DIO_SetPinDir+0x38>
     1ba:	28 f0       	brcs	.+10     	; 0x1c6 <DIO_SetPinDir+0x20>
     1bc:	82 30       	cpi	r24, 0x02	; 2
     1be:	d9 f0       	breq	.+54     	; 0x1f6 <DIO_SetPinDir+0x50>
     1c0:	83 30       	cpi	r24, 0x03	; 3
     1c2:	29 f1       	breq	.+74     	; 0x20e <DIO_SetPinDir+0x68>
     1c4:	08 95       	ret
     1c6:	2a b3       	in	r18, 0x1a	; 26
     1c8:	81 e0       	ldi	r24, 0x01	; 1
     1ca:	90 e0       	ldi	r25, 0x00	; 0
     1cc:	02 c0       	rjmp	.+4      	; 0x1d2 <DIO_SetPinDir+0x2c>
     1ce:	88 0f       	add	r24, r24
     1d0:	99 1f       	adc	r25, r25
     1d2:	6a 95       	dec	r22
     1d4:	e2 f7       	brpl	.-8      	; 0x1ce <DIO_SetPinDir+0x28>
     1d6:	80 95       	com	r24
     1d8:	82 23       	and	r24, r18
     1da:	8a bb       	out	0x1a, r24	; 26
     1dc:	08 95       	ret
     1de:	27 b3       	in	r18, 0x17	; 23
     1e0:	81 e0       	ldi	r24, 0x01	; 1
     1e2:	90 e0       	ldi	r25, 0x00	; 0
     1e4:	02 c0       	rjmp	.+4      	; 0x1ea <DIO_SetPinDir+0x44>
     1e6:	88 0f       	add	r24, r24
     1e8:	99 1f       	adc	r25, r25
     1ea:	6a 95       	dec	r22
     1ec:	e2 f7       	brpl	.-8      	; 0x1e6 <DIO_SetPinDir+0x40>
     1ee:	80 95       	com	r24
     1f0:	82 23       	and	r24, r18
     1f2:	87 bb       	out	0x17, r24	; 23
     1f4:	08 95       	ret
     1f6:	24 b3       	in	r18, 0x14	; 20
     1f8:	81 e0       	ldi	r24, 0x01	; 1
     1fa:	90 e0       	ldi	r25, 0x00	; 0
     1fc:	02 c0       	rjmp	.+4      	; 0x202 <DIO_SetPinDir+0x5c>
     1fe:	88 0f       	add	r24, r24
     200:	99 1f       	adc	r25, r25
     202:	6a 95       	dec	r22
     204:	e2 f7       	brpl	.-8      	; 0x1fe <DIO_SetPinDir+0x58>
     206:	80 95       	com	r24
     208:	82 23       	and	r24, r18
     20a:	84 bb       	out	0x14, r24	; 20
     20c:	08 95       	ret
     20e:	21 b3       	in	r18, 0x11	; 17
     210:	81 e0       	ldi	r24, 0x01	; 1
     212:	90 e0       	ldi	r25, 0x00	; 0
     214:	02 c0       	rjmp	.+4      	; 0x21a <DIO_SetPinDir+0x74>
     216:	88 0f       	add	r24, r24
     218:	99 1f       	adc	r25, r25
     21a:	6a 95       	dec	r22
     21c:	e2 f7       	brpl	.-8      	; 0x216 <DIO_SetPinDir+0x70>
     21e:	80 95       	com	r24
     220:	82 23       	and	r24, r18
     222:	81 bb       	out	0x11, r24	; 17
     224:	08 95       	ret
     226:	81 30       	cpi	r24, 0x01	; 1
     228:	41 f0       	breq	.+16     	; 0x23a <DIO_SetPinDir+0x94>
     22a:	28 f0       	brcs	.+10     	; 0x236 <DIO_SetPinDir+0x90>
     22c:	82 30       	cpi	r24, 0x02	; 2
     22e:	39 f0       	breq	.+14     	; 0x23e <DIO_SetPinDir+0x98>
     230:	83 30       	cpi	r24, 0x03	; 3
     232:	39 f0       	breq	.+14     	; 0x242 <DIO_SetPinDir+0x9c>
     234:	08 95       	ret
     236:	1a ba       	out	0x1a, r1	; 26
     238:	08 95       	ret
     23a:	17 ba       	out	0x17, r1	; 23
     23c:	08 95       	ret
     23e:	14 ba       	out	0x14, r1	; 20
     240:	08 95       	ret
     242:	11 ba       	out	0x11, r1	; 17
     244:	08 95       	ret
     246:	68 30       	cpi	r22, 0x08	; 8
     248:	a0 f5       	brcc	.+104    	; 0x2b2 <DIO_SetPinDir+0x10c>
     24a:	81 30       	cpi	r24, 0x01	; 1
     24c:	89 f0       	breq	.+34     	; 0x270 <DIO_SetPinDir+0xca>
     24e:	28 f0       	brcs	.+10     	; 0x25a <DIO_SetPinDir+0xb4>
     250:	82 30       	cpi	r24, 0x02	; 2
     252:	c9 f0       	breq	.+50     	; 0x286 <DIO_SetPinDir+0xe0>
     254:	83 30       	cpi	r24, 0x03	; 3
     256:	11 f1       	breq	.+68     	; 0x29c <DIO_SetPinDir+0xf6>
     258:	08 95       	ret
     25a:	2a b3       	in	r18, 0x1a	; 26
     25c:	81 e0       	ldi	r24, 0x01	; 1
     25e:	90 e0       	ldi	r25, 0x00	; 0
     260:	02 c0       	rjmp	.+4      	; 0x266 <DIO_SetPinDir+0xc0>
     262:	88 0f       	add	r24, r24
     264:	99 1f       	adc	r25, r25
     266:	6a 95       	dec	r22
     268:	e2 f7       	brpl	.-8      	; 0x262 <DIO_SetPinDir+0xbc>
     26a:	82 2b       	or	r24, r18
     26c:	8a bb       	out	0x1a, r24	; 26
     26e:	08 95       	ret
     270:	27 b3       	in	r18, 0x17	; 23
     272:	81 e0       	ldi	r24, 0x01	; 1
     274:	90 e0       	ldi	r25, 0x00	; 0
     276:	02 c0       	rjmp	.+4      	; 0x27c <DIO_SetPinDir+0xd6>
     278:	88 0f       	add	r24, r24
     27a:	99 1f       	adc	r25, r25
     27c:	6a 95       	dec	r22
     27e:	e2 f7       	brpl	.-8      	; 0x278 <DIO_SetPinDir+0xd2>
     280:	82 2b       	or	r24, r18
     282:	87 bb       	out	0x17, r24	; 23
     284:	08 95       	ret
     286:	24 b3       	in	r18, 0x14	; 20
     288:	81 e0       	ldi	r24, 0x01	; 1
     28a:	90 e0       	ldi	r25, 0x00	; 0
     28c:	02 c0       	rjmp	.+4      	; 0x292 <DIO_SetPinDir+0xec>
     28e:	88 0f       	add	r24, r24
     290:	99 1f       	adc	r25, r25
     292:	6a 95       	dec	r22
     294:	e2 f7       	brpl	.-8      	; 0x28e <DIO_SetPinDir+0xe8>
     296:	82 2b       	or	r24, r18
     298:	84 bb       	out	0x14, r24	; 20
     29a:	08 95       	ret
     29c:	21 b3       	in	r18, 0x11	; 17
     29e:	81 e0       	ldi	r24, 0x01	; 1
     2a0:	90 e0       	ldi	r25, 0x00	; 0
     2a2:	02 c0       	rjmp	.+4      	; 0x2a8 <DIO_SetPinDir+0x102>
     2a4:	88 0f       	add	r24, r24
     2a6:	99 1f       	adc	r25, r25
     2a8:	6a 95       	dec	r22
     2aa:	e2 f7       	brpl	.-8      	; 0x2a4 <DIO_SetPinDir+0xfe>
     2ac:	82 2b       	or	r24, r18
     2ae:	81 bb       	out	0x11, r24	; 17
     2b0:	08 95       	ret
     2b2:	81 30       	cpi	r24, 0x01	; 1
     2b4:	49 f0       	breq	.+18     	; 0x2c8 <DIO_SetPinDir+0x122>
     2b6:	28 f0       	brcs	.+10     	; 0x2c2 <DIO_SetPinDir+0x11c>
     2b8:	82 30       	cpi	r24, 0x02	; 2
     2ba:	49 f0       	breq	.+18     	; 0x2ce <DIO_SetPinDir+0x128>
     2bc:	83 30       	cpi	r24, 0x03	; 3
     2be:	51 f0       	breq	.+20     	; 0x2d4 <DIO_SetPinDir+0x12e>
     2c0:	08 95       	ret
     2c2:	8f ef       	ldi	r24, 0xFF	; 255
     2c4:	8a bb       	out	0x1a, r24	; 26
     2c6:	08 95       	ret
     2c8:	8f ef       	ldi	r24, 0xFF	; 255
     2ca:	87 bb       	out	0x17, r24	; 23
     2cc:	08 95       	ret
     2ce:	8f ef       	ldi	r24, 0xFF	; 255
     2d0:	84 bb       	out	0x14, r24	; 20
     2d2:	08 95       	ret
     2d4:	8f ef       	ldi	r24, 0xFF	; 255
     2d6:	81 bb       	out	0x11, r24	; 17
     2d8:	08 95       	ret

000002da <DIO_SetPinVal>:
     2da:	cf 93       	push	r28
     2dc:	df 93       	push	r29
     2de:	c8 2f       	mov	r28, r24
     2e0:	d6 2f       	mov	r29, r22
     2e2:	44 23       	and	r20, r20
     2e4:	21 f0       	breq	.+8      	; 0x2ee <DIO_SetPinVal+0x14>
     2e6:	4f 3f       	cpi	r20, 0xFF	; 255
     2e8:	09 f4       	brne	.+2      	; 0x2ec <DIO_SetPinVal+0x12>
     2ea:	52 c0       	rjmp	.+164    	; 0x390 <DIO_SetPinVal+0xb6>
     2ec:	a1 c0       	rjmp	.+322    	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
     2ee:	68 30       	cpi	r22, 0x08	; 8
     2f0:	d8 f5       	brcc	.+118    	; 0x368 <DIO_SetPinVal+0x8e>
     2f2:	4f ef       	ldi	r20, 0xFF	; 255
     2f4:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <DIO_SetPinDir>
     2f8:	c1 30       	cpi	r28, 0x01	; 1
     2fa:	91 f0       	breq	.+36     	; 0x320 <DIO_SetPinVal+0x46>
     2fc:	28 f0       	brcs	.+10     	; 0x308 <DIO_SetPinVal+0x2e>
     2fe:	c2 30       	cpi	r28, 0x02	; 2
     300:	d9 f0       	breq	.+54     	; 0x338 <DIO_SetPinVal+0x5e>
     302:	c3 30       	cpi	r28, 0x03	; 3
     304:	29 f1       	breq	.+74     	; 0x350 <DIO_SetPinVal+0x76>
     306:	94 c0       	rjmp	.+296    	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
     308:	2b b3       	in	r18, 0x1b	; 27
     30a:	81 e0       	ldi	r24, 0x01	; 1
     30c:	90 e0       	ldi	r25, 0x00	; 0
     30e:	02 c0       	rjmp	.+4      	; 0x314 <DIO_SetPinVal+0x3a>
     310:	88 0f       	add	r24, r24
     312:	99 1f       	adc	r25, r25
     314:	da 95       	dec	r29
     316:	e2 f7       	brpl	.-8      	; 0x310 <DIO_SetPinVal+0x36>
     318:	80 95       	com	r24
     31a:	82 23       	and	r24, r18
     31c:	8b bb       	out	0x1b, r24	; 27
     31e:	88 c0       	rjmp	.+272    	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
     320:	28 b3       	in	r18, 0x18	; 24
     322:	81 e0       	ldi	r24, 0x01	; 1
     324:	90 e0       	ldi	r25, 0x00	; 0
     326:	02 c0       	rjmp	.+4      	; 0x32c <DIO_SetPinVal+0x52>
     328:	88 0f       	add	r24, r24
     32a:	99 1f       	adc	r25, r25
     32c:	da 95       	dec	r29
     32e:	e2 f7       	brpl	.-8      	; 0x328 <DIO_SetPinVal+0x4e>
     330:	80 95       	com	r24
     332:	82 23       	and	r24, r18
     334:	88 bb       	out	0x18, r24	; 24
     336:	7c c0       	rjmp	.+248    	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
     338:	25 b3       	in	r18, 0x15	; 21
     33a:	81 e0       	ldi	r24, 0x01	; 1
     33c:	90 e0       	ldi	r25, 0x00	; 0
     33e:	02 c0       	rjmp	.+4      	; 0x344 <DIO_SetPinVal+0x6a>
     340:	88 0f       	add	r24, r24
     342:	99 1f       	adc	r25, r25
     344:	da 95       	dec	r29
     346:	e2 f7       	brpl	.-8      	; 0x340 <DIO_SetPinVal+0x66>
     348:	80 95       	com	r24
     34a:	82 23       	and	r24, r18
     34c:	85 bb       	out	0x15, r24	; 21
     34e:	70 c0       	rjmp	.+224    	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
     350:	22 b3       	in	r18, 0x12	; 18
     352:	81 e0       	ldi	r24, 0x01	; 1
     354:	90 e0       	ldi	r25, 0x00	; 0
     356:	02 c0       	rjmp	.+4      	; 0x35c <DIO_SetPinVal+0x82>
     358:	88 0f       	add	r24, r24
     35a:	99 1f       	adc	r25, r25
     35c:	da 95       	dec	r29
     35e:	e2 f7       	brpl	.-8      	; 0x358 <DIO_SetPinVal+0x7e>
     360:	80 95       	com	r24
     362:	82 23       	and	r24, r18
     364:	82 bb       	out	0x12, r24	; 18
     366:	64 c0       	rjmp	.+200    	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
     368:	4f ef       	ldi	r20, 0xFF	; 255
     36a:	68 e0       	ldi	r22, 0x08	; 8
     36c:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <DIO_SetPinDir>
     370:	c1 30       	cpi	r28, 0x01	; 1
     372:	41 f0       	breq	.+16     	; 0x384 <DIO_SetPinVal+0xaa>
     374:	28 f0       	brcs	.+10     	; 0x380 <DIO_SetPinVal+0xa6>
     376:	c2 30       	cpi	r28, 0x02	; 2
     378:	39 f0       	breq	.+14     	; 0x388 <DIO_SetPinVal+0xae>
     37a:	c3 30       	cpi	r28, 0x03	; 3
     37c:	39 f0       	breq	.+14     	; 0x38c <DIO_SetPinVal+0xb2>
     37e:	58 c0       	rjmp	.+176    	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
     380:	1b ba       	out	0x1b, r1	; 27
     382:	56 c0       	rjmp	.+172    	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
     384:	18 ba       	out	0x18, r1	; 24
     386:	54 c0       	rjmp	.+168    	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
     388:	15 ba       	out	0x15, r1	; 21
     38a:	52 c0       	rjmp	.+164    	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
     38c:	12 ba       	out	0x12, r1	; 18
     38e:	50 c0       	rjmp	.+160    	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
     390:	68 30       	cpi	r22, 0x08	; 8
     392:	b8 f5       	brcc	.+110    	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
     394:	4f ef       	ldi	r20, 0xFF	; 255
     396:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <DIO_SetPinDir>
     39a:	c1 30       	cpi	r28, 0x01	; 1
     39c:	89 f0       	breq	.+34     	; 0x3c0 <DIO_SetPinVal+0xe6>
     39e:	28 f0       	brcs	.+10     	; 0x3aa <DIO_SetPinVal+0xd0>
     3a0:	c2 30       	cpi	r28, 0x02	; 2
     3a2:	c9 f0       	breq	.+50     	; 0x3d6 <DIO_SetPinVal+0xfc>
     3a4:	c3 30       	cpi	r28, 0x03	; 3
     3a6:	11 f1       	breq	.+68     	; 0x3ec <DIO_SetPinVal+0x112>
     3a8:	43 c0       	rjmp	.+134    	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
     3aa:	2b b3       	in	r18, 0x1b	; 27
     3ac:	81 e0       	ldi	r24, 0x01	; 1
     3ae:	90 e0       	ldi	r25, 0x00	; 0
     3b0:	02 c0       	rjmp	.+4      	; 0x3b6 <DIO_SetPinVal+0xdc>
     3b2:	88 0f       	add	r24, r24
     3b4:	99 1f       	adc	r25, r25
     3b6:	da 95       	dec	r29
     3b8:	e2 f7       	brpl	.-8      	; 0x3b2 <DIO_SetPinVal+0xd8>
     3ba:	82 2b       	or	r24, r18
     3bc:	8b bb       	out	0x1b, r24	; 27
     3be:	38 c0       	rjmp	.+112    	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
     3c0:	28 b3       	in	r18, 0x18	; 24
     3c2:	81 e0       	ldi	r24, 0x01	; 1
     3c4:	90 e0       	ldi	r25, 0x00	; 0
     3c6:	02 c0       	rjmp	.+4      	; 0x3cc <DIO_SetPinVal+0xf2>
     3c8:	88 0f       	add	r24, r24
     3ca:	99 1f       	adc	r25, r25
     3cc:	da 95       	dec	r29
     3ce:	e2 f7       	brpl	.-8      	; 0x3c8 <DIO_SetPinVal+0xee>
     3d0:	82 2b       	or	r24, r18
     3d2:	88 bb       	out	0x18, r24	; 24
     3d4:	2d c0       	rjmp	.+90     	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
     3d6:	25 b3       	in	r18, 0x15	; 21
     3d8:	81 e0       	ldi	r24, 0x01	; 1
     3da:	90 e0       	ldi	r25, 0x00	; 0
     3dc:	02 c0       	rjmp	.+4      	; 0x3e2 <DIO_SetPinVal+0x108>
     3de:	88 0f       	add	r24, r24
     3e0:	99 1f       	adc	r25, r25
     3e2:	da 95       	dec	r29
     3e4:	e2 f7       	brpl	.-8      	; 0x3de <DIO_SetPinVal+0x104>
     3e6:	82 2b       	or	r24, r18
     3e8:	85 bb       	out	0x15, r24	; 21
     3ea:	22 c0       	rjmp	.+68     	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
     3ec:	22 b3       	in	r18, 0x12	; 18
     3ee:	81 e0       	ldi	r24, 0x01	; 1
     3f0:	90 e0       	ldi	r25, 0x00	; 0
     3f2:	02 c0       	rjmp	.+4      	; 0x3f8 <DIO_SetPinVal+0x11e>
     3f4:	88 0f       	add	r24, r24
     3f6:	99 1f       	adc	r25, r25
     3f8:	da 95       	dec	r29
     3fa:	e2 f7       	brpl	.-8      	; 0x3f4 <DIO_SetPinVal+0x11a>
     3fc:	82 2b       	or	r24, r18
     3fe:	82 bb       	out	0x12, r24	; 18
     400:	17 c0       	rjmp	.+46     	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
     402:	4f ef       	ldi	r20, 0xFF	; 255
     404:	68 e0       	ldi	r22, 0x08	; 8
     406:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <DIO_SetPinDir>
     40a:	c1 30       	cpi	r28, 0x01	; 1
     40c:	49 f0       	breq	.+18     	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
     40e:	28 f0       	brcs	.+10     	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
     410:	c2 30       	cpi	r28, 0x02	; 2
     412:	49 f0       	breq	.+18     	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
     414:	c3 30       	cpi	r28, 0x03	; 3
     416:	51 f0       	breq	.+20     	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
     418:	0b c0       	rjmp	.+22     	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
     41a:	8f ef       	ldi	r24, 0xFF	; 255
     41c:	8b bb       	out	0x1b, r24	; 27
     41e:	08 c0       	rjmp	.+16     	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
     420:	8f ef       	ldi	r24, 0xFF	; 255
     422:	88 bb       	out	0x18, r24	; 24
     424:	05 c0       	rjmp	.+10     	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
     426:	8f ef       	ldi	r24, 0xFF	; 255
     428:	85 bb       	out	0x15, r24	; 21
     42a:	02 c0       	rjmp	.+4      	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
     42c:	8f ef       	ldi	r24, 0xFF	; 255
     42e:	82 bb       	out	0x12, r24	; 18
     430:	df 91       	pop	r29
     432:	cf 91       	pop	r28
     434:	08 95       	ret

00000436 <DIO_GetPinVal>:
Uint8 DIO_GetPinVal(Uint8 port, Uint8 pin)
{
     436:	cf 93       	push	r28
     438:	df 93       	push	r29
     43a:	c8 2f       	mov	r28, r24
     43c:	d6 2f       	mov	r29, r22
	Uint8 val = 0;
		if (pin >=0 && pin <=7)
     43e:	68 30       	cpi	r22, 0x08	; 8
     440:	78 f5       	brcc	.+94     	; 0x4a0 <DIO_GetPinVal+0x6a>
		{
			DIO_SetPinDir(port, pin, DIO_PIN_IN);
     442:	40 e0       	ldi	r20, 0x00	; 0
     444:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <DIO_SetPinDir>
			switch (port)
     448:	c1 30       	cpi	r28, 0x01	; 1
     44a:	79 f0       	breq	.+30     	; 0x46a <DIO_GetPinVal+0x34>
     44c:	28 f0       	brcs	.+10     	; 0x458 <DIO_GetPinVal+0x22>
     44e:	c2 30       	cpi	r28, 0x02	; 2
     450:	a9 f0       	breq	.+42     	; 0x47c <DIO_GetPinVal+0x46>
     452:	c3 30       	cpi	r28, 0x03	; 3
     454:	e1 f0       	breq	.+56     	; 0x48e <DIO_GetPinVal+0x58>
     456:	38 c0       	rjmp	.+112    	; 0x4c8 <DIO_GetPinVal+0x92>
			{
				case DIO_PORTA:
				val = Get_Bit(PINA, pin);
     458:	89 b3       	in	r24, 0x19	; 25
     45a:	90 e0       	ldi	r25, 0x00	; 0
     45c:	02 c0       	rjmp	.+4      	; 0x462 <DIO_GetPinVal+0x2c>
     45e:	95 95       	asr	r25
     460:	87 95       	ror	r24
     462:	da 95       	dec	r29
     464:	e2 f7       	brpl	.-8      	; 0x45e <DIO_GetPinVal+0x28>
     466:	81 70       	andi	r24, 0x01	; 1
				break;
     468:	32 c0       	rjmp	.+100    	; 0x4ce <DIO_GetPinVal+0x98>
				case DIO_PORTB:
				val = Get_Bit(PINB, pin);
     46a:	86 b3       	in	r24, 0x16	; 22
     46c:	90 e0       	ldi	r25, 0x00	; 0
     46e:	02 c0       	rjmp	.+4      	; 0x474 <DIO_GetPinVal+0x3e>
     470:	95 95       	asr	r25
     472:	87 95       	ror	r24
     474:	da 95       	dec	r29
     476:	e2 f7       	brpl	.-8      	; 0x470 <DIO_GetPinVal+0x3a>
     478:	81 70       	andi	r24, 0x01	; 1
				break;
     47a:	29 c0       	rjmp	.+82     	; 0x4ce <DIO_GetPinVal+0x98>
				case DIO_PORTC:
				val = Get_Bit(PINC, pin);
     47c:	83 b3       	in	r24, 0x13	; 19
     47e:	90 e0       	ldi	r25, 0x00	; 0
     480:	02 c0       	rjmp	.+4      	; 0x486 <DIO_GetPinVal+0x50>
     482:	95 95       	asr	r25
     484:	87 95       	ror	r24
     486:	da 95       	dec	r29
     488:	e2 f7       	brpl	.-8      	; 0x482 <DIO_GetPinVal+0x4c>
     48a:	81 70       	andi	r24, 0x01	; 1
				break;
     48c:	20 c0       	rjmp	.+64     	; 0x4ce <DIO_GetPinVal+0x98>
				case DIO_PORTD:
				val = Get_Bit(PIND, pin);
     48e:	80 b3       	in	r24, 0x10	; 16
     490:	90 e0       	ldi	r25, 0x00	; 0
     492:	02 c0       	rjmp	.+4      	; 0x498 <DIO_GetPinVal+0x62>
     494:	95 95       	asr	r25
     496:	87 95       	ror	r24
     498:	da 95       	dec	r29
     49a:	e2 f7       	brpl	.-8      	; 0x494 <DIO_GetPinVal+0x5e>
     49c:	81 70       	andi	r24, 0x01	; 1
				break;
     49e:	17 c0       	rjmp	.+46     	; 0x4ce <DIO_GetPinVal+0x98>
				break;				
			}
		}
		else
		{
			DIO_SetPinDir(port, DIO_ALL_PINs, DIO_PIN_IN);
     4a0:	40 e0       	ldi	r20, 0x00	; 0
     4a2:	68 e0       	ldi	r22, 0x08	; 8
     4a4:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <DIO_SetPinDir>
			switch (port)
     4a8:	c1 30       	cpi	r28, 0x01	; 1
     4aa:	41 f0       	breq	.+16     	; 0x4bc <DIO_GetPinVal+0x86>
     4ac:	28 f0       	brcs	.+10     	; 0x4b8 <DIO_GetPinVal+0x82>
     4ae:	c2 30       	cpi	r28, 0x02	; 2
     4b0:	39 f0       	breq	.+14     	; 0x4c0 <DIO_GetPinVal+0x8a>
     4b2:	c3 30       	cpi	r28, 0x03	; 3
     4b4:	39 f0       	breq	.+14     	; 0x4c4 <DIO_GetPinVal+0x8e>
     4b6:	0a c0       	rjmp	.+20     	; 0x4cc <DIO_GetPinVal+0x96>
			{
				case DIO_PORTA:
				val = PINA;
     4b8:	89 b3       	in	r24, 0x19	; 25
				break;
     4ba:	09 c0       	rjmp	.+18     	; 0x4ce <DIO_GetPinVal+0x98>
				case DIO_PORTB:
				val = PINB;
     4bc:	86 b3       	in	r24, 0x16	; 22
				break;
     4be:	07 c0       	rjmp	.+14     	; 0x4ce <DIO_GetPinVal+0x98>
				case DIO_PORTC:
				val = PINC;
     4c0:	83 b3       	in	r24, 0x13	; 19
				break;
     4c2:	05 c0       	rjmp	.+10     	; 0x4ce <DIO_GetPinVal+0x98>
				case DIO_PORTD:
				val = PIND;
     4c4:	80 b3       	in	r24, 0x10	; 16
				break;
     4c6:	03 c0       	rjmp	.+6      	; 0x4ce <DIO_GetPinVal+0x98>
		}	
	}
}
Uint8 DIO_GetPinVal(Uint8 port, Uint8 pin)
{
	Uint8 val = 0;
     4c8:	80 e0       	ldi	r24, 0x00	; 0
     4ca:	01 c0       	rjmp	.+2      	; 0x4ce <DIO_GetPinVal+0x98>
     4cc:	80 e0       	ldi	r24, 0x00	; 0
				default:   //MISRA C rules
				break;				
			}
		}
	return val;
}
     4ce:	df 91       	pop	r29
     4d0:	cf 91       	pop	r28
     4d2:	08 95       	ret

000004d4 <DIO_SetPullup>:
void DIO_SetPullup(Uint8 port, Uint8 pin)
{
     4d4:	cf 93       	push	r28
     4d6:	df 93       	push	r29
     4d8:	c8 2f       	mov	r28, r24
     4da:	d6 2f       	mov	r29, r22
		if (pin >=0 && pin <=7)
     4dc:	68 30       	cpi	r22, 0x08	; 8
     4de:	b8 f5       	brcc	.+110    	; 0x54e <DIO_SetPullup+0x7a>
		{
			DIO_SetPinDir(port, pin, DIO_PIN_IN);
     4e0:	40 e0       	ldi	r20, 0x00	; 0
     4e2:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <DIO_SetPinDir>
			switch (port)
     4e6:	c1 30       	cpi	r28, 0x01	; 1
     4e8:	89 f0       	breq	.+34     	; 0x50c <DIO_SetPullup+0x38>
     4ea:	28 f0       	brcs	.+10     	; 0x4f6 <DIO_SetPullup+0x22>
     4ec:	c2 30       	cpi	r28, 0x02	; 2
     4ee:	c9 f0       	breq	.+50     	; 0x522 <DIO_SetPullup+0x4e>
     4f0:	c3 30       	cpi	r28, 0x03	; 3
     4f2:	11 f1       	breq	.+68     	; 0x538 <DIO_SetPullup+0x64>
     4f4:	43 c0       	rjmp	.+134    	; 0x57c <DIO_SetPullup+0xa8>
			{
				case DIO_PORTA:
				Set_Bit(PORTA, pin);
     4f6:	2b b3       	in	r18, 0x1b	; 27
     4f8:	81 e0       	ldi	r24, 0x01	; 1
     4fa:	90 e0       	ldi	r25, 0x00	; 0
     4fc:	02 c0       	rjmp	.+4      	; 0x502 <DIO_SetPullup+0x2e>
     4fe:	88 0f       	add	r24, r24
     500:	99 1f       	adc	r25, r25
     502:	da 95       	dec	r29
     504:	e2 f7       	brpl	.-8      	; 0x4fe <DIO_SetPullup+0x2a>
     506:	82 2b       	or	r24, r18
     508:	8b bb       	out	0x1b, r24	; 27
				break;
     50a:	38 c0       	rjmp	.+112    	; 0x57c <DIO_SetPullup+0xa8>
				case DIO_PORTB:
				Set_Bit(PORTB, pin);
     50c:	28 b3       	in	r18, 0x18	; 24
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	02 c0       	rjmp	.+4      	; 0x518 <DIO_SetPullup+0x44>
     514:	88 0f       	add	r24, r24
     516:	99 1f       	adc	r25, r25
     518:	da 95       	dec	r29
     51a:	e2 f7       	brpl	.-8      	; 0x514 <DIO_SetPullup+0x40>
     51c:	82 2b       	or	r24, r18
     51e:	88 bb       	out	0x18, r24	; 24
				break;
     520:	2d c0       	rjmp	.+90     	; 0x57c <DIO_SetPullup+0xa8>
				case DIO_PORTC:
				Set_Bit(PORTC, pin);
     522:	25 b3       	in	r18, 0x15	; 21
     524:	81 e0       	ldi	r24, 0x01	; 1
     526:	90 e0       	ldi	r25, 0x00	; 0
     528:	02 c0       	rjmp	.+4      	; 0x52e <DIO_SetPullup+0x5a>
     52a:	88 0f       	add	r24, r24
     52c:	99 1f       	adc	r25, r25
     52e:	da 95       	dec	r29
     530:	e2 f7       	brpl	.-8      	; 0x52a <DIO_SetPullup+0x56>
     532:	82 2b       	or	r24, r18
     534:	85 bb       	out	0x15, r24	; 21
				break;
     536:	22 c0       	rjmp	.+68     	; 0x57c <DIO_SetPullup+0xa8>
				case DIO_PORTD:
				Set_Bit(PORTD, pin);
     538:	22 b3       	in	r18, 0x12	; 18
     53a:	81 e0       	ldi	r24, 0x01	; 1
     53c:	90 e0       	ldi	r25, 0x00	; 0
     53e:	02 c0       	rjmp	.+4      	; 0x544 <DIO_SetPullup+0x70>
     540:	88 0f       	add	r24, r24
     542:	99 1f       	adc	r25, r25
     544:	da 95       	dec	r29
     546:	e2 f7       	brpl	.-8      	; 0x540 <DIO_SetPullup+0x6c>
     548:	82 2b       	or	r24, r18
     54a:	82 bb       	out	0x12, r24	; 18
				break;
     54c:	17 c0       	rjmp	.+46     	; 0x57c <DIO_SetPullup+0xa8>
				break;
			}
		}
		else
		{
			DIO_SetPinDir(port, DIO_ALL_PINs, DIO_PIN_IN);
     54e:	40 e0       	ldi	r20, 0x00	; 0
     550:	68 e0       	ldi	r22, 0x08	; 8
     552:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <DIO_SetPinDir>
			switch (port)
     556:	c1 30       	cpi	r28, 0x01	; 1
     558:	49 f0       	breq	.+18     	; 0x56c <DIO_SetPullup+0x98>
     55a:	28 f0       	brcs	.+10     	; 0x566 <DIO_SetPullup+0x92>
     55c:	c2 30       	cpi	r28, 0x02	; 2
     55e:	49 f0       	breq	.+18     	; 0x572 <DIO_SetPullup+0x9e>
     560:	c3 30       	cpi	r28, 0x03	; 3
     562:	51 f0       	breq	.+20     	; 0x578 <DIO_SetPullup+0xa4>
     564:	0b c0       	rjmp	.+22     	; 0x57c <DIO_SetPullup+0xa8>
			{
				case DIO_PORTA:
				PORTA = 0xff;
     566:	8f ef       	ldi	r24, 0xFF	; 255
     568:	8b bb       	out	0x1b, r24	; 27
				break;
     56a:	08 c0       	rjmp	.+16     	; 0x57c <DIO_SetPullup+0xa8>
				case DIO_PORTB:
				PORTB = 0xff;
     56c:	8f ef       	ldi	r24, 0xFF	; 255
     56e:	88 bb       	out	0x18, r24	; 24
				break;
     570:	05 c0       	rjmp	.+10     	; 0x57c <DIO_SetPullup+0xa8>
				case DIO_PORTC:
				PORTC = 0xff;
     572:	8f ef       	ldi	r24, 0xFF	; 255
     574:	85 bb       	out	0x15, r24	; 21
				break;
     576:	02 c0       	rjmp	.+4      	; 0x57c <DIO_SetPullup+0xa8>
				case DIO_PORTD:
				PORTD = 0xff;
     578:	8f ef       	ldi	r24, 0xFF	; 255
     57a:	82 bb       	out	0x12, r24	; 18
				break;
				default:   //MISRA C rules
				break;				
			}
		}	
}
     57c:	df 91       	pop	r29
     57e:	cf 91       	pop	r28
     580:	08 95       	ret

00000582 <Keypad_INIT>:
				};

void Keypad_INIT(void)
{
	/*column pins direction*/
	DIO_SetPinDir(Keypad_Col_Port, Keypad_Col_0, DIO_PIN_OUT);
     582:	4f ef       	ldi	r20, 0xFF	; 255
     584:	60 e0       	ldi	r22, 0x00	; 0
     586:	82 e0       	ldi	r24, 0x02	; 2
     588:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <DIO_SetPinDir>
	DIO_SetPinDir(Keypad_Col_Port, Keypad_Col_1, DIO_PIN_OUT);
     58c:	4f ef       	ldi	r20, 0xFF	; 255
     58e:	61 e0       	ldi	r22, 0x01	; 1
     590:	82 e0       	ldi	r24, 0x02	; 2
     592:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <DIO_SetPinDir>
	DIO_SetPinDir(Keypad_Col_Port, Keypad_Col_2, DIO_PIN_OUT);
     596:	4f ef       	ldi	r20, 0xFF	; 255
     598:	62 e0       	ldi	r22, 0x02	; 2
     59a:	82 e0       	ldi	r24, 0x02	; 2
     59c:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <DIO_SetPinDir>
	DIO_SetPinDir(Keypad_Col_Port, Keypad_Col_3, DIO_PIN_OUT);
     5a0:	4f ef       	ldi	r20, 0xFF	; 255
     5a2:	63 e0       	ldi	r22, 0x03	; 3
     5a4:	82 e0       	ldi	r24, 0x02	; 2
     5a6:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <DIO_SetPinDir>
	
	/*row pins direction*/
	DIO_SetPinDir(Keypad_Row_Port, Keypad_Row_0, DIO_PIN_IN);
     5aa:	40 e0       	ldi	r20, 0x00	; 0
     5ac:	64 e0       	ldi	r22, 0x04	; 4
     5ae:	82 e0       	ldi	r24, 0x02	; 2
     5b0:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <DIO_SetPinDir>
	DIO_SetPinDir(Keypad_Row_Port, Keypad_Row_1, DIO_PIN_IN);
     5b4:	40 e0       	ldi	r20, 0x00	; 0
     5b6:	65 e0       	ldi	r22, 0x05	; 5
     5b8:	82 e0       	ldi	r24, 0x02	; 2
     5ba:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <DIO_SetPinDir>
	DIO_SetPinDir(Keypad_Row_Port, Keypad_Row_2, DIO_PIN_IN);
     5be:	40 e0       	ldi	r20, 0x00	; 0
     5c0:	66 e0       	ldi	r22, 0x06	; 6
     5c2:	82 e0       	ldi	r24, 0x02	; 2
     5c4:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <DIO_SetPinDir>
	DIO_SetPinDir(Keypad_Row_Port, Keypad_Row_3, DIO_PIN_IN);
     5c8:	40 e0       	ldi	r20, 0x00	; 0
     5ca:	67 e0       	ldi	r22, 0x07	; 7
     5cc:	82 e0       	ldi	r24, 0x02	; 2
     5ce:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <DIO_SetPinDir>
	
	/*column pins value*/
	DIO_SetPinVal(Keypad_Col_Port, Keypad_Col_0, DIO_PIN_ON);
     5d2:	4f ef       	ldi	r20, 0xFF	; 255
     5d4:	60 e0       	ldi	r22, 0x00	; 0
     5d6:	82 e0       	ldi	r24, 0x02	; 2
     5d8:	0e 94 6d 01 	call	0x2da	; 0x2da <DIO_SetPinVal>
	DIO_SetPinVal(Keypad_Col_Port, Keypad_Col_1, DIO_PIN_ON);
     5dc:	4f ef       	ldi	r20, 0xFF	; 255
     5de:	61 e0       	ldi	r22, 0x01	; 1
     5e0:	82 e0       	ldi	r24, 0x02	; 2
     5e2:	0e 94 6d 01 	call	0x2da	; 0x2da <DIO_SetPinVal>
	DIO_SetPinVal(Keypad_Col_Port, Keypad_Col_2, DIO_PIN_ON);
     5e6:	4f ef       	ldi	r20, 0xFF	; 255
     5e8:	62 e0       	ldi	r22, 0x02	; 2
     5ea:	82 e0       	ldi	r24, 0x02	; 2
     5ec:	0e 94 6d 01 	call	0x2da	; 0x2da <DIO_SetPinVal>
	DIO_SetPinVal(Keypad_Col_Port, Keypad_Col_3, DIO_PIN_ON);
     5f0:	4f ef       	ldi	r20, 0xFF	; 255
     5f2:	63 e0       	ldi	r22, 0x03	; 3
     5f4:	82 e0       	ldi	r24, 0x02	; 2
     5f6:	0e 94 6d 01 	call	0x2da	; 0x2da <DIO_SetPinVal>
	
	/*row pins pull-up setup*/
	DIO_SetPullup(Keypad_Row_Port, Keypad_Row_0);
     5fa:	64 e0       	ldi	r22, 0x04	; 4
     5fc:	82 e0       	ldi	r24, 0x02	; 2
     5fe:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <DIO_SetPullup>
	DIO_SetPullup(Keypad_Row_Port, Keypad_Row_1);
     602:	65 e0       	ldi	r22, 0x05	; 5
     604:	82 e0       	ldi	r24, 0x02	; 2
     606:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <DIO_SetPullup>
	DIO_SetPullup(Keypad_Row_Port, Keypad_Row_2);
     60a:	66 e0       	ldi	r22, 0x06	; 6
     60c:	82 e0       	ldi	r24, 0x02	; 2
     60e:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <DIO_SetPullup>
	DIO_SetPullup(Keypad_Row_Port, Keypad_Row_3);
     612:	67 e0       	ldi	r22, 0x07	; 7
     614:	82 e0       	ldi	r24, 0x02	; 2
     616:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <DIO_SetPullup>
     61a:	08 95       	ret

0000061c <Keypad_GetVal>:
}

Uint8 Keypad_GetVal(void)
{
     61c:	df 92       	push	r13
     61e:	ef 92       	push	r14
     620:	ff 92       	push	r15
     622:	0f 93       	push	r16
     624:	1f 93       	push	r17
     626:	cf 93       	push	r28
     628:	df 93       	push	r29
     62a:	0f 2e       	mov	r0, r31
     62c:	f0 e6       	ldi	r31, 0x60	; 96
     62e:	ef 2e       	mov	r14, r31
     630:	f0 e0       	ldi	r31, 0x00	; 0
     632:	ff 2e       	mov	r15, r31
     634:	f0 2d       	mov	r31, r0
	Uint8 i,j, val = 0;
     636:	d1 2c       	mov	r13, r1
	
	for (i = Keypad_Col_start; i <= Keypad_Col_end; i++)
     638:	d0 e0       	ldi	r29, 0x00	; 0
	{
		DIO_SetPinVal(Keypad_Col_Port, i, DIO_PIN_OFF);
     63a:	40 e0       	ldi	r20, 0x00	; 0
     63c:	6d 2f       	mov	r22, r29
     63e:	82 e0       	ldi	r24, 0x02	; 2
     640:	0e 94 6d 01 	call	0x2da	; 0x2da <DIO_SetPinVal>
     644:	87 01       	movw	r16, r14
		for (j = Keypad_Row_start; j <= Keypad_Row_end; j++)
     646:	c4 e0       	ldi	r28, 0x04	; 4
		{
			if (DIO_GetPinVal(Keypad_Row_Port, j) == 0)
     648:	6c 2f       	mov	r22, r28
     64a:	82 e0       	ldi	r24, 0x02	; 2
     64c:	0e 94 1b 02 	call	0x436	; 0x436 <DIO_GetPinVal>
     650:	81 11       	cpse	r24, r1
     652:	08 c0       	rjmp	.+16     	; 0x664 <Keypad_GetVal+0x48>
			{
				while(DIO_GetPinVal(Keypad_Row_Port, j) == 0);
     654:	6c 2f       	mov	r22, r28
     656:	82 e0       	ldi	r24, 0x02	; 2
     658:	0e 94 1b 02 	call	0x436	; 0x436 <DIO_GetPinVal>
     65c:	88 23       	and	r24, r24
     65e:	d1 f3       	breq	.-12     	; 0x654 <Keypad_GetVal+0x38>
				val = arr[j - Keypad_Row_start][i - Keypad_Col_start];
     660:	f8 01       	movw	r30, r16
     662:	d0 80       	ld	r13, Z
	Uint8 i,j, val = 0;
	
	for (i = Keypad_Col_start; i <= Keypad_Col_end; i++)
	{
		DIO_SetPinVal(Keypad_Col_Port, i, DIO_PIN_OFF);
		for (j = Keypad_Row_start; j <= Keypad_Row_end; j++)
     664:	cf 5f       	subi	r28, 0xFF	; 255
     666:	0c 5f       	subi	r16, 0xFC	; 252
     668:	1f 4f       	sbci	r17, 0xFF	; 255
     66a:	c8 30       	cpi	r28, 0x08	; 8
     66c:	69 f7       	brne	.-38     	; 0x648 <Keypad_GetVal+0x2c>
			{
				while(DIO_GetPinVal(Keypad_Row_Port, j) == 0);
				val = arr[j - Keypad_Row_start][i - Keypad_Col_start];
			}
		}
		DIO_SetPinVal(Keypad_Col_Port, i, DIO_PIN_ON);
     66e:	4f ef       	ldi	r20, 0xFF	; 255
     670:	6d 2f       	mov	r22, r29
     672:	82 e0       	ldi	r24, 0x02	; 2
     674:	0e 94 6d 01 	call	0x2da	; 0x2da <DIO_SetPinVal>

Uint8 Keypad_GetVal(void)
{
	Uint8 i,j, val = 0;
	
	for (i = Keypad_Col_start; i <= Keypad_Col_end; i++)
     678:	df 5f       	subi	r29, 0xFF	; 255
     67a:	ff ef       	ldi	r31, 0xFF	; 255
     67c:	ef 1a       	sub	r14, r31
     67e:	ff 0a       	sbc	r15, r31
     680:	d4 30       	cpi	r29, 0x04	; 4
     682:	d9 f6       	brne	.-74     	; 0x63a <Keypad_GetVal+0x1e>
			}
		}
		DIO_SetPinVal(Keypad_Col_Port, i, DIO_PIN_ON);
	}
	return val;
}
     684:	8d 2d       	mov	r24, r13
     686:	df 91       	pop	r29
     688:	cf 91       	pop	r28
     68a:	1f 91       	pop	r17
     68c:	0f 91       	pop	r16
     68e:	ff 90       	pop	r15
     690:	ef 90       	pop	r14
     692:	df 90       	pop	r13
     694:	08 95       	ret

00000696 <LCD_WriteCMD>:
	   decimal *=10;
	   val = (int)decimal;
	   LCD_WriteINTEGER(val);
	   decimal -=val;
   }	
}
     696:	cf 93       	push	r28
     698:	c8 2f       	mov	r28, r24
     69a:	40 e0       	ldi	r20, 0x00	; 0
     69c:	61 e0       	ldi	r22, 0x01	; 1
     69e:	81 e0       	ldi	r24, 0x01	; 1
     6a0:	0e 94 6d 01 	call	0x2da	; 0x2da <DIO_SetPinVal>
     6a4:	40 e0       	ldi	r20, 0x00	; 0
     6a6:	62 e0       	ldi	r22, 0x02	; 2
     6a8:	81 e0       	ldi	r24, 0x01	; 1
     6aa:	0e 94 6d 01 	call	0x2da	; 0x2da <DIO_SetPinVal>
     6ae:	40 e0       	ldi	r20, 0x00	; 0
     6b0:	63 e0       	ldi	r22, 0x03	; 3
     6b2:	81 e0       	ldi	r24, 0x01	; 1
     6b4:	0e 94 6d 01 	call	0x2da	; 0x2da <DIO_SetPinVal>
     6b8:	8b b3       	in	r24, 0x1b	; 27
     6ba:	9c 2f       	mov	r25, r28
     6bc:	90 7f       	andi	r25, 0xF0	; 240
     6be:	8f 70       	andi	r24, 0x0F	; 15
     6c0:	89 2b       	or	r24, r25
     6c2:	8b bb       	out	0x1b, r24	; 27
     6c4:	4f ef       	ldi	r20, 0xFF	; 255
     6c6:	63 e0       	ldi	r22, 0x03	; 3
     6c8:	81 e0       	ldi	r24, 0x01	; 1
     6ca:	0e 94 6d 01 	call	0x2da	; 0x2da <DIO_SetPinVal>
     6ce:	8f e9       	ldi	r24, 0x9F	; 159
     6d0:	9f e0       	ldi	r25, 0x0F	; 15
     6d2:	01 97       	sbiw	r24, 0x01	; 1
     6d4:	f1 f7       	brne	.-4      	; 0x6d2 <LCD_WriteCMD+0x3c>
     6d6:	00 c0       	rjmp	.+0      	; 0x6d8 <LCD_WriteCMD+0x42>
     6d8:	00 00       	nop
     6da:	40 e0       	ldi	r20, 0x00	; 0
     6dc:	63 e0       	ldi	r22, 0x03	; 3
     6de:	81 e0       	ldi	r24, 0x01	; 1
     6e0:	0e 94 6d 01 	call	0x2da	; 0x2da <DIO_SetPinVal>
     6e4:	2b b3       	in	r18, 0x1b	; 27
     6e6:	30 e1       	ldi	r19, 0x10	; 16
     6e8:	c3 9f       	mul	r28, r19
     6ea:	c0 01       	movw	r24, r0
     6ec:	11 24       	eor	r1, r1
     6ee:	92 2f       	mov	r25, r18
     6f0:	9f 70       	andi	r25, 0x0F	; 15
     6f2:	89 2b       	or	r24, r25
     6f4:	8b bb       	out	0x1b, r24	; 27
     6f6:	4f ef       	ldi	r20, 0xFF	; 255
     6f8:	63 e0       	ldi	r22, 0x03	; 3
     6fa:	81 e0       	ldi	r24, 0x01	; 1
     6fc:	0e 94 6d 01 	call	0x2da	; 0x2da <DIO_SetPinVal>
     700:	8f e9       	ldi	r24, 0x9F	; 159
     702:	9f e0       	ldi	r25, 0x0F	; 15
     704:	01 97       	sbiw	r24, 0x01	; 1
     706:	f1 f7       	brne	.-4      	; 0x704 <LCD_WriteCMD+0x6e>
     708:	00 c0       	rjmp	.+0      	; 0x70a <LCD_WriteCMD+0x74>
     70a:	00 00       	nop
     70c:	40 e0       	ldi	r20, 0x00	; 0
     70e:	63 e0       	ldi	r22, 0x03	; 3
     710:	81 e0       	ldi	r24, 0x01	; 1
     712:	0e 94 6d 01 	call	0x2da	; 0x2da <DIO_SetPinVal>
     716:	8f e1       	ldi	r24, 0x1F	; 31
     718:	9e e4       	ldi	r25, 0x4E	; 78
     71a:	01 97       	sbiw	r24, 0x01	; 1
     71c:	f1 f7       	brne	.-4      	; 0x71a <LCD_WriteCMD+0x84>
     71e:	00 c0       	rjmp	.+0      	; 0x720 <LCD_WriteCMD+0x8a>
     720:	00 00       	nop
     722:	cf 91       	pop	r28
     724:	08 95       	ret

00000726 <LCD_INIT>:
     726:	4f ef       	ldi	r20, 0xFF	; 255
     728:	61 e0       	ldi	r22, 0x01	; 1
     72a:	81 e0       	ldi	r24, 0x01	; 1
     72c:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <DIO_SetPinDir>
     730:	4f ef       	ldi	r20, 0xFF	; 255
     732:	62 e0       	ldi	r22, 0x02	; 2
     734:	81 e0       	ldi	r24, 0x01	; 1
     736:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <DIO_SetPinDir>
     73a:	4f ef       	ldi	r20, 0xFF	; 255
     73c:	63 e0       	ldi	r22, 0x03	; 3
     73e:	81 e0       	ldi	r24, 0x01	; 1
     740:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <DIO_SetPinDir>
     744:	4f ef       	ldi	r20, 0xFF	; 255
     746:	64 e0       	ldi	r22, 0x04	; 4
     748:	80 e0       	ldi	r24, 0x00	; 0
     74a:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <DIO_SetPinDir>
     74e:	4f ef       	ldi	r20, 0xFF	; 255
     750:	65 e0       	ldi	r22, 0x05	; 5
     752:	80 e0       	ldi	r24, 0x00	; 0
     754:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <DIO_SetPinDir>
     758:	4f ef       	ldi	r20, 0xFF	; 255
     75a:	66 e0       	ldi	r22, 0x06	; 6
     75c:	80 e0       	ldi	r24, 0x00	; 0
     75e:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <DIO_SetPinDir>
     762:	4f ef       	ldi	r20, 0xFF	; 255
     764:	67 e0       	ldi	r22, 0x07	; 7
     766:	80 e0       	ldi	r24, 0x00	; 0
     768:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <DIO_SetPinDir>
     76c:	2f ef       	ldi	r18, 0xFF	; 255
     76e:	81 ee       	ldi	r24, 0xE1	; 225
     770:	94 e0       	ldi	r25, 0x04	; 4
     772:	21 50       	subi	r18, 0x01	; 1
     774:	80 40       	sbci	r24, 0x00	; 0
     776:	90 40       	sbci	r25, 0x00	; 0
     778:	e1 f7       	brne	.-8      	; 0x772 <LCD_INIT+0x4c>
     77a:	00 c0       	rjmp	.+0      	; 0x77c <LCD_INIT+0x56>
     77c:	00 00       	nop
     77e:	83 e3       	ldi	r24, 0x33	; 51
     780:	0e 94 4b 03 	call	0x696	; 0x696 <LCD_WriteCMD>
     784:	82 e3       	ldi	r24, 0x32	; 50
     786:	0e 94 4b 03 	call	0x696	; 0x696 <LCD_WriteCMD>
     78a:	88 e2       	ldi	r24, 0x28	; 40
     78c:	0e 94 4b 03 	call	0x696	; 0x696 <LCD_WriteCMD>
     790:	81 e0       	ldi	r24, 0x01	; 1
     792:	0e 94 4b 03 	call	0x696	; 0x696 <LCD_WriteCMD>
     796:	82 e0       	ldi	r24, 0x02	; 2
     798:	0e 94 4b 03 	call	0x696	; 0x696 <LCD_WriteCMD>
     79c:	86 e0       	ldi	r24, 0x06	; 6
     79e:	0e 94 4b 03 	call	0x696	; 0x696 <LCD_WriteCMD>
     7a2:	8c e0       	ldi	r24, 0x0C	; 12
     7a4:	0e 94 4b 03 	call	0x696	; 0x696 <LCD_WriteCMD>
     7a8:	08 95       	ret

000007aa <LCD_WriteCHAR>:
     7aa:	cf 93       	push	r28
     7ac:	c8 2f       	mov	r28, r24
     7ae:	4f ef       	ldi	r20, 0xFF	; 255
     7b0:	61 e0       	ldi	r22, 0x01	; 1
     7b2:	81 e0       	ldi	r24, 0x01	; 1
     7b4:	0e 94 6d 01 	call	0x2da	; 0x2da <DIO_SetPinVal>
     7b8:	40 e0       	ldi	r20, 0x00	; 0
     7ba:	62 e0       	ldi	r22, 0x02	; 2
     7bc:	81 e0       	ldi	r24, 0x01	; 1
     7be:	0e 94 6d 01 	call	0x2da	; 0x2da <DIO_SetPinVal>
     7c2:	40 e0       	ldi	r20, 0x00	; 0
     7c4:	63 e0       	ldi	r22, 0x03	; 3
     7c6:	81 e0       	ldi	r24, 0x01	; 1
     7c8:	0e 94 6d 01 	call	0x2da	; 0x2da <DIO_SetPinVal>
     7cc:	8b b3       	in	r24, 0x1b	; 27
     7ce:	9c 2f       	mov	r25, r28
     7d0:	90 7f       	andi	r25, 0xF0	; 240
     7d2:	8f 70       	andi	r24, 0x0F	; 15
     7d4:	89 2b       	or	r24, r25
     7d6:	8b bb       	out	0x1b, r24	; 27
     7d8:	4f ef       	ldi	r20, 0xFF	; 255
     7da:	63 e0       	ldi	r22, 0x03	; 3
     7dc:	81 e0       	ldi	r24, 0x01	; 1
     7de:	0e 94 6d 01 	call	0x2da	; 0x2da <DIO_SetPinVal>
     7e2:	8f e9       	ldi	r24, 0x9F	; 159
     7e4:	9f e0       	ldi	r25, 0x0F	; 15
     7e6:	01 97       	sbiw	r24, 0x01	; 1
     7e8:	f1 f7       	brne	.-4      	; 0x7e6 <LCD_WriteCHAR+0x3c>
     7ea:	00 c0       	rjmp	.+0      	; 0x7ec <LCD_WriteCHAR+0x42>
     7ec:	00 00       	nop
     7ee:	40 e0       	ldi	r20, 0x00	; 0
     7f0:	63 e0       	ldi	r22, 0x03	; 3
     7f2:	81 e0       	ldi	r24, 0x01	; 1
     7f4:	0e 94 6d 01 	call	0x2da	; 0x2da <DIO_SetPinVal>
     7f8:	2b b3       	in	r18, 0x1b	; 27
     7fa:	30 e1       	ldi	r19, 0x10	; 16
     7fc:	c3 9f       	mul	r28, r19
     7fe:	c0 01       	movw	r24, r0
     800:	11 24       	eor	r1, r1
     802:	92 2f       	mov	r25, r18
     804:	9f 70       	andi	r25, 0x0F	; 15
     806:	89 2b       	or	r24, r25
     808:	8b bb       	out	0x1b, r24	; 27
     80a:	4f ef       	ldi	r20, 0xFF	; 255
     80c:	63 e0       	ldi	r22, 0x03	; 3
     80e:	81 e0       	ldi	r24, 0x01	; 1
     810:	0e 94 6d 01 	call	0x2da	; 0x2da <DIO_SetPinVal>
     814:	8f e9       	ldi	r24, 0x9F	; 159
     816:	9f e0       	ldi	r25, 0x0F	; 15
     818:	01 97       	sbiw	r24, 0x01	; 1
     81a:	f1 f7       	brne	.-4      	; 0x818 <__DATA_REGION_LENGTH__+0x18>
     81c:	00 c0       	rjmp	.+0      	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
     81e:	00 00       	nop
     820:	40 e0       	ldi	r20, 0x00	; 0
     822:	63 e0       	ldi	r22, 0x03	; 3
     824:	81 e0       	ldi	r24, 0x01	; 1
     826:	0e 94 6d 01 	call	0x2da	; 0x2da <DIO_SetPinVal>
     82a:	cf 91       	pop	r28
     82c:	08 95       	ret

0000082e <LCD_WriteSTRING>:
     82e:	0f 93       	push	r16
     830:	1f 93       	push	r17
     832:	cf 93       	push	r28
     834:	fc 01       	movw	r30, r24
     836:	80 81       	ld	r24, Z
     838:	88 23       	and	r24, r24
     83a:	59 f0       	breq	.+22     	; 0x852 <LCD_WriteSTRING+0x24>
     83c:	8f 01       	movw	r16, r30
     83e:	c0 e0       	ldi	r28, 0x00	; 0
     840:	0e 94 d5 03 	call	0x7aa	; 0x7aa <LCD_WriteCHAR>
     844:	cf 5f       	subi	r28, 0xFF	; 255
     846:	f8 01       	movw	r30, r16
     848:	ec 0f       	add	r30, r28
     84a:	f1 1d       	adc	r31, r1
     84c:	80 81       	ld	r24, Z
     84e:	81 11       	cpse	r24, r1
     850:	f7 cf       	rjmp	.-18     	; 0x840 <LCD_WriteSTRING+0x12>
     852:	cf 91       	pop	r28
     854:	1f 91       	pop	r17
     856:	0f 91       	pop	r16
     858:	08 95       	ret

0000085a <LCD_WriteINTEGER>:
     85a:	2f 92       	push	r2
     85c:	3f 92       	push	r3
     85e:	4f 92       	push	r4
     860:	5f 92       	push	r5
     862:	6f 92       	push	r6
     864:	7f 92       	push	r7
     866:	8f 92       	push	r8
     868:	9f 92       	push	r9
     86a:	af 92       	push	r10
     86c:	bf 92       	push	r11
     86e:	cf 92       	push	r12
     870:	df 92       	push	r13
     872:	ef 92       	push	r14
     874:	ff 92       	push	r15
     876:	0f 93       	push	r16
     878:	1f 93       	push	r17
     87a:	cf 93       	push	r28
     87c:	df 93       	push	r29
     87e:	00 d0       	rcall	.+0      	; 0x880 <__stack+0x21>
     880:	00 d0       	rcall	.+0      	; 0x882 <__stack+0x23>
     882:	1f 92       	push	r1
     884:	cd b7       	in	r28, 0x3d	; 61
     886:	de b7       	in	r29, 0x3e	; 62
     888:	2b 01       	movw	r4, r22
     88a:	3c 01       	movw	r6, r24
     88c:	67 2b       	or	r22, r23
     88e:	68 2b       	or	r22, r24
     890:	69 2b       	or	r22, r25
     892:	21 f4       	brne	.+8      	; 0x89c <__stack+0x3d>
     894:	80 e3       	ldi	r24, 0x30	; 48
     896:	0e 94 d5 03 	call	0x7aa	; 0x7aa <LCD_WriteCHAR>
     89a:	85 c0       	rjmp	.+266    	; 0x9a6 <__stack+0x147>
     89c:	81 2c       	mov	r8, r1
     89e:	91 2c       	mov	r9, r1
     8a0:	54 01       	movw	r10, r8
     8a2:	83 94       	inc	r8
     8a4:	c1 2c       	mov	r12, r1
     8a6:	d1 2c       	mov	r13, r1
     8a8:	76 01       	movw	r14, r12
     8aa:	cc 0c       	add	r12, r12
     8ac:	dd 1c       	adc	r13, r13
     8ae:	ee 1c       	adc	r14, r14
     8b0:	ff 1c       	adc	r15, r15
     8b2:	d7 01       	movw	r26, r14
     8b4:	c6 01       	movw	r24, r12
     8b6:	88 0f       	add	r24, r24
     8b8:	99 1f       	adc	r25, r25
     8ba:	aa 1f       	adc	r26, r26
     8bc:	bb 1f       	adc	r27, r27
     8be:	88 0f       	add	r24, r24
     8c0:	99 1f       	adc	r25, r25
     8c2:	aa 1f       	adc	r26, r26
     8c4:	bb 1f       	adc	r27, r27
     8c6:	c8 0e       	add	r12, r24
     8c8:	d9 1e       	adc	r13, r25
     8ca:	ea 1e       	adc	r14, r26
     8cc:	fb 1e       	adc	r15, r27
     8ce:	c3 01       	movw	r24, r6
     8d0:	b2 01       	movw	r22, r4
     8d2:	2a e0       	ldi	r18, 0x0A	; 10
     8d4:	30 e0       	ldi	r19, 0x00	; 0
     8d6:	40 e0       	ldi	r20, 0x00	; 0
     8d8:	50 e0       	ldi	r21, 0x00	; 0
     8da:	0e 94 97 13 	call	0x272e	; 0x272e <__udivmodsi4>
     8de:	c6 0e       	add	r12, r22
     8e0:	d7 1e       	adc	r13, r23
     8e2:	e8 1e       	adc	r14, r24
     8e4:	f9 1e       	adc	r15, r25
     8e6:	c1 14       	cp	r12, r1
     8e8:	d1 04       	cpc	r13, r1
     8ea:	e1 04       	cpc	r14, r1
     8ec:	f1 04       	cpc	r15, r1
     8ee:	91 f4       	brne	.+36     	; 0x914 <__stack+0xb5>
     8f0:	88 0c       	add	r8, r8
     8f2:	99 1c       	adc	r9, r9
     8f4:	aa 1c       	adc	r10, r10
     8f6:	bb 1c       	adc	r11, r11
     8f8:	d5 01       	movw	r26, r10
     8fa:	c4 01       	movw	r24, r8
     8fc:	88 0f       	add	r24, r24
     8fe:	99 1f       	adc	r25, r25
     900:	aa 1f       	adc	r26, r26
     902:	bb 1f       	adc	r27, r27
     904:	88 0f       	add	r24, r24
     906:	99 1f       	adc	r25, r25
     908:	aa 1f       	adc	r26, r26
     90a:	bb 1f       	adc	r27, r27
     90c:	88 0e       	add	r8, r24
     90e:	99 1e       	adc	r9, r25
     910:	aa 1e       	adc	r10, r26
     912:	bb 1e       	adc	r11, r27
     914:	c3 01       	movw	r24, r6
     916:	b2 01       	movw	r22, r4
     918:	2a e0       	ldi	r18, 0x0A	; 10
     91a:	30 e0       	ldi	r19, 0x00	; 0
     91c:	40 e0       	ldi	r20, 0x00	; 0
     91e:	50 e0       	ldi	r21, 0x00	; 0
     920:	0e 94 97 13 	call	0x272e	; 0x272e <__udivmodsi4>
     924:	29 01       	movw	r4, r18
     926:	3a 01       	movw	r6, r20
     928:	23 2b       	or	r18, r19
     92a:	24 2b       	or	r18, r20
     92c:	25 2b       	or	r18, r21
     92e:	09 f0       	breq	.+2      	; 0x932 <__stack+0xd3>
     930:	bc cf       	rjmp	.-136    	; 0x8aa <__stack+0x4b>
     932:	c1 14       	cp	r12, r1
     934:	d1 04       	cpc	r13, r1
     936:	e1 04       	cpc	r14, r1
     938:	f1 04       	cpc	r15, r1
     93a:	a9 f1       	breq	.+106    	; 0x9a6 <__stack+0x147>
     93c:	41 2c       	mov	r4, r1
     93e:	51 2c       	mov	r5, r1
     940:	32 01       	movw	r6, r4
     942:	28 2c       	mov	r2, r8
     944:	99 82       	std	Y+1, r9	; 0x01
     946:	aa 82       	std	Y+2, r10	; 0x02
     948:	bb 82       	std	Y+3, r11	; 0x03
     94a:	31 2c       	mov	r3, r1
     94c:	c7 01       	movw	r24, r14
     94e:	b6 01       	movw	r22, r12
     950:	2a e0       	ldi	r18, 0x0A	; 10
     952:	30 e0       	ldi	r19, 0x00	; 0
     954:	40 e0       	ldi	r20, 0x00	; 0
     956:	50 e0       	ldi	r21, 0x00	; 0
     958:	0e 94 97 13 	call	0x272e	; 0x272e <__udivmodsi4>
     95c:	02 2f       	mov	r16, r18
     95e:	13 2f       	mov	r17, r19
     960:	4d 83       	std	Y+5, r20	; 0x05
     962:	5c 83       	std	Y+4, r21	; 0x04
     964:	80 e3       	ldi	r24, 0x30	; 48
     966:	86 0f       	add	r24, r22
     968:	0e 94 d5 03 	call	0x7aa	; 0x7aa <LCD_WriteCHAR>
     96c:	c0 2e       	mov	r12, r16
     96e:	d1 2e       	mov	r13, r17
     970:	ed 80       	ldd	r14, Y+5	; 0x05
     972:	fc 80       	ldd	r15, Y+4	; 0x04
     974:	c1 14       	cp	r12, r1
     976:	d1 04       	cpc	r13, r1
     978:	e1 04       	cpc	r14, r1
     97a:	f1 04       	cpc	r15, r1
     97c:	79 f4       	brne	.+30     	; 0x99c <__stack+0x13d>
     97e:	8a e0       	ldi	r24, 0x0A	; 10
     980:	88 16       	cp	r8, r24
     982:	91 04       	cpc	r9, r1
     984:	a1 04       	cpc	r10, r1
     986:	b1 04       	cpc	r11, r1
     988:	48 f0       	brcs	.+18     	; 0x99c <__stack+0x13d>
     98a:	c2 2c       	mov	r12, r2
     98c:	d9 80       	ldd	r13, Y+1	; 0x01
     98e:	ea 80       	ldd	r14, Y+2	; 0x02
     990:	fb 80       	ldd	r15, Y+3	; 0x03
     992:	44 24       	eor	r4, r4
     994:	43 94       	inc	r4
     996:	51 2c       	mov	r5, r1
     998:	61 2c       	mov	r6, r1
     99a:	73 2c       	mov	r7, r3
     99c:	4c 14       	cp	r4, r12
     99e:	5d 04       	cpc	r5, r13
     9a0:	6e 04       	cpc	r6, r14
     9a2:	7f 04       	cpc	r7, r15
     9a4:	99 f6       	brne	.-90     	; 0x94c <__stack+0xed>
     9a6:	0f 90       	pop	r0
     9a8:	0f 90       	pop	r0
     9aa:	0f 90       	pop	r0
     9ac:	0f 90       	pop	r0
     9ae:	0f 90       	pop	r0
     9b0:	df 91       	pop	r29
     9b2:	cf 91       	pop	r28
     9b4:	1f 91       	pop	r17
     9b6:	0f 91       	pop	r16
     9b8:	ff 90       	pop	r15
     9ba:	ef 90       	pop	r14
     9bc:	df 90       	pop	r13
     9be:	cf 90       	pop	r12
     9c0:	bf 90       	pop	r11
     9c2:	af 90       	pop	r10
     9c4:	9f 90       	pop	r9
     9c6:	8f 90       	pop	r8
     9c8:	7f 90       	pop	r7
     9ca:	6f 90       	pop	r6
     9cc:	5f 90       	pop	r5
     9ce:	4f 90       	pop	r4
     9d0:	3f 90       	pop	r3
     9d2:	2f 90       	pop	r2
     9d4:	08 95       	ret

000009d6 <LCD_GoTo>:
void LCD_GoTo(Uint8 row, Uint8 col)
{
     9d6:	cf 93       	push	r28
     9d8:	df 93       	push	r29
     9da:	00 d0       	rcall	.+0      	; 0x9dc <LCD_GoTo+0x6>
     9dc:	cd b7       	in	r28, 0x3d	; 61
     9de:	de b7       	in	r29, 0x3e	; 62
	Uint8 arr[2] = {Cursor_Begin_1st_Line, Cursor_Begin_2st_Line};
     9e0:	90 e8       	ldi	r25, 0x80	; 128
     9e2:	99 83       	std	Y+1, r25	; 0x01
     9e4:	90 ec       	ldi	r25, 0xC0	; 192
     9e6:	9a 83       	std	Y+2, r25	; 0x02
	LCD_WriteCMD(arr[row] + col);
     9e8:	fe 01       	movw	r30, r28
     9ea:	e8 0f       	add	r30, r24
     9ec:	f1 1d       	adc	r31, r1
     9ee:	81 81       	ldd	r24, Z+1	; 0x01
     9f0:	86 0f       	add	r24, r22
     9f2:	0e 94 4b 03 	call	0x696	; 0x696 <LCD_WriteCMD>
}
     9f6:	0f 90       	pop	r0
     9f8:	0f 90       	pop	r0
     9fa:	df 91       	pop	r29
     9fc:	cf 91       	pop	r28
     9fe:	08 95       	ret

00000a00 <LCD_Clear>:
void LCD_Clear(void)
{
	LCD_WriteCMD(Clear_Display_Screen);
     a00:	81 e0       	ldi	r24, 0x01	; 1
     a02:	0e 94 4b 03 	call	0x696	; 0x696 <LCD_WriteCMD>
     a06:	08 95       	ret

00000a08 <main>:


int modeA = 0, modeB = 0, modeC = 0, modeD = 0;
int hours, minutes, seconds;
int main(void)
{
     a08:	cf 93       	push	r28
     a0a:	df 93       	push	r29
     a0c:	cd b7       	in	r28, 0x3d	; 61
     a0e:	de b7       	in	r29, 0x3e	; 62
     a10:	e4 97       	sbiw	r28, 0x34	; 52
     a12:	0f b6       	in	r0, 0x3f	; 63
     a14:	f8 94       	cli
     a16:	de bf       	out	0x3e, r29	; 62
     a18:	0f be       	out	0x3f, r0	; 63
     a1a:	cd bf       	out	0x3d, r28	; 61
	int Tone2_Buff = 0;
	int Tone_counter = 1;
	int Tone_switch = 0;
	int i;
	/**/
	Keypad_INIT();
     a1c:	0e 94 c1 02 	call	0x582	; 0x582 <Keypad_INIT>
	LCD_INIT();
     a20:	0e 94 93 03 	call	0x726	; 0x726 <LCD_INIT>
	
	Uint8 Background_message[] = "Digital Watch";
     a24:	8e e0       	ldi	r24, 0x0E	; 14
     a26:	ea e9       	ldi	r30, 0x9A	; 154
     a28:	f0 e0       	ldi	r31, 0x00	; 0
     a2a:	de 01       	movw	r26, r28
     a2c:	11 96       	adiw	r26, 0x01	; 1
     a2e:	01 90       	ld	r0, Z+
     a30:	0d 92       	st	X+, r0
     a32:	8a 95       	dec	r24
     a34:	e1 f7       	brne	.-8      	; 0xa2e <main+0x26>
	
	/*Timer 1 Alarm mode*/
	Uint8 A_str[] = "Alarm:";
     a36:	87 e0       	ldi	r24, 0x07	; 7
     a38:	e8 ea       	ldi	r30, 0xA8	; 168
     a3a:	f0 e0       	ldi	r31, 0x00	; 0
     a3c:	de 01       	movw	r26, r28
     a3e:	1f 96       	adiw	r26, 0x0f	; 15
     a40:	01 90       	ld	r0, Z+
     a42:	0d 92       	st	X+, r0
     a44:	8a 95       	dec	r24
     a46:	e1 f7       	brne	.-8      	; 0xa40 <main+0x38>
	
	/*Timer 0 Timer*/
	Uint8 T_str[] = "Timer:";
     a48:	87 e0       	ldi	r24, 0x07	; 7
     a4a:	ef ea       	ldi	r30, 0xAF	; 175
     a4c:	f0 e0       	ldi	r31, 0x00	; 0
     a4e:	de 01       	movw	r26, r28
     a50:	56 96       	adiw	r26, 0x16	; 22
     a52:	01 90       	ld	r0, Z+
     a54:	0d 92       	st	X+, r0
     a56:	8a 95       	dec	r24
     a58:	e1 f7       	brne	.-8      	; 0xa52 <main+0x4a>
	TIMER0_INIT();
     a5a:	0e 94 a4 0b 	call	0x1748	; 0x1748 <TIMER0_INIT>
	TIMER0_SetDelay(Timer_delay);
     a5e:	68 ee       	ldi	r22, 0xE8	; 232
     a60:	73 e0       	ldi	r23, 0x03	; 3
     a62:	80 e0       	ldi	r24, 0x00	; 0
     a64:	90 e0       	ldi	r25, 0x00	; 0
     a66:	0e 94 b0 0b 	call	0x1760	; 0x1760 <TIMER0_SetDelay>
	Inv_Stack_INIT(&T0_stack);
     a6a:	86 e2       	ldi	r24, 0x26	; 38
     a6c:	91 e0       	ldi	r25, 0x01	; 1
     a6e:	0e 94 3d 0b 	call	0x167a	; 0x167a <Inv_Stack_INIT>
	
	/*Timer 1 Clock: Setup functions*/
	Uint8 C_str[] = "Clock:";
     a72:	87 e0       	ldi	r24, 0x07	; 7
     a74:	e6 eb       	ldi	r30, 0xB6	; 182
     a76:	f0 e0       	ldi	r31, 0x00	; 0
     a78:	de 01       	movw	r26, r28
     a7a:	5d 96       	adiw	r26, 0x1d	; 29
     a7c:	01 90       	ld	r0, Z+
     a7e:	0d 92       	st	X+, r0
     a80:	8a 95       	dec	r24
     a82:	e1 f7       	brne	.-8      	; 0xa7c <main+0x74>
	TIMER1_INIT();
     a84:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <TIMER1_INIT>
	TIMER1_SetDelay(Timer_delay);
     a88:	68 ee       	ldi	r22, 0xE8	; 232
     a8a:	73 e0       	ldi	r23, 0x03	; 3
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <TIMER1_SetDelay>
	TIMER1_Start();	
     a94:	0e 94 65 0e 	call	0x1cca	; 0x1cca <TIMER1_Start>
	Stack_INIT(&T1_stack);	
     a98:	80 e0       	ldi	r24, 0x00	; 0
     a9a:	91 e0       	ldi	r25, 0x01	; 1
     a9c:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <Stack_INIT>
	
	/*Timer 2 Stop Watch: Setup functions*/
	Uint8 S_str[] = "Stopwatch:";
     aa0:	8b e0       	ldi	r24, 0x0B	; 11
     aa2:	ed eb       	ldi	r30, 0xBD	; 189
     aa4:	f0 e0       	ldi	r31, 0x00	; 0
     aa6:	de 01       	movw	r26, r28
     aa8:	94 96       	adiw	r26, 0x24	; 36
     aaa:	01 90       	ld	r0, Z+
     aac:	0d 92       	st	X+, r0
     aae:	8a 95       	dec	r24
     ab0:	e1 f7       	brne	.-8      	; 0xaaa <main+0xa2>
	TIMER2_INIT();
     ab2:	0e 94 5f 11 	call	0x22be	; 0x22be <TIMER2_INIT>
	TIMER2_SetDelay(Timer_delay);
     ab6:	68 ee       	ldi	r22, 0xE8	; 232
     ab8:	73 e0       	ldi	r23, 0x03	; 3
     aba:	80 e0       	ldi	r24, 0x00	; 0
     abc:	90 e0       	ldi	r25, 0x00	; 0
     abe:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <TIMER2_SetDelay>
	
	/*Background Message*/
	LCD_GoTo(0,0);
     ac2:	60 e0       	ldi	r22, 0x00	; 0
     ac4:	80 e0       	ldi	r24, 0x00	; 0
     ac6:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <LCD_GoTo>
	LCD_WriteSTRING(Background_message);
     aca:	ce 01       	movw	r24, r28
     acc:	01 96       	adiw	r24, 0x01	; 1
     ace:	0e 94 17 04 	call	0x82e	; 0x82e <LCD_WriteSTRING>
	int T2_SS_Count = 1;
	int T2_pause = 2;

	int Tone2_Buff = 0;
	int Tone_counter = 1;
	int Tone_switch = 0;
     ad2:	21 2c       	mov	r2, r1
     ad4:	31 2c       	mov	r3, r1
	int T1_SS_Count = 0;
	int T2_SS_Count = 1;
	int T2_pause = 2;

	int Tone2_Buff = 0;
	int Tone_counter = 1;
     ad6:	21 e0       	ldi	r18, 0x01	; 1
     ad8:	30 e0       	ldi	r19, 0x00	; 0
     ada:	3c ab       	std	Y+52, r19	; 0x34
     adc:	2b ab       	std	Y+51, r18	; 0x33
	int T0_SS_Count = 1;
	int T1_SS_Count = 0;
	int T2_SS_Count = 1;
	int T2_pause = 2;

	int Tone2_Buff = 0;
     ade:	18 aa       	std	Y+48, r1	; 0x30
     ae0:	1f a6       	std	Y+47, r1	; 0x2f
						//Is not in range of 65 & 68
	
	int T0_SS_Count = 1;
	int T1_SS_Count = 0;
	int T2_SS_Count = 1;
	int T2_pause = 2;
     ae2:	68 94       	set
     ae4:	44 24       	eor	r4, r4
     ae6:	41 f8       	bld	r4, 1
     ae8:	51 2c       	mov	r5, r1
	                    //If the value of the pressed button anything that 
						//Is not in range of 65 & 68
	
	int T0_SS_Count = 1;
	int T1_SS_Count = 0;
	int T2_SS_Count = 1;
     aea:	88 24       	eor	r8, r8
     aec:	83 94       	inc	r8
     aee:	91 2c       	mov	r9, r1
	int selector1 = 0;      //Variable that store the received value from keypad,
	                    //If the value of the pressed button anything that 
						//Is not in range of 65 & 68
	
	int T0_SS_Count = 1;
	int T1_SS_Count = 0;
     af0:	1a aa       	std	Y+50, r1	; 0x32
     af2:	19 aa       	std	Y+49, r1	; 0x31
	                    //If the value of the pressed button between 65 & 68
	int selector1 = 0;      //Variable that store the received value from keypad,
	                    //If the value of the pressed button anything that 
						//Is not in range of 65 & 68
	
	int T0_SS_Count = 1;
     af4:	66 24       	eor	r6, r6
     af6:	63 94       	inc	r6
     af8:	71 2c       	mov	r7, r1
	int Timer_delay = 1000; //Time in ms to be generated in all timers
	
	int Keypad_val = 0; //Variable that receives the value of keypad
	int selector0 = 0;      //Variable that store the received value from keypad,
	                    //If the value of the pressed button between 65 & 68
	int selector1 = 0;      //Variable that store the received value from keypad,
     afa:	a1 2c       	mov	r10, r1
     afc:	b1 2c       	mov	r11, r1
	
	/*General variables*/
	int Timer_delay = 1000; //Time in ms to be generated in all timers
	
	int Keypad_val = 0; //Variable that receives the value of keypad
	int selector0 = 0;      //Variable that store the received value from keypad,
     afe:	00 e0       	ldi	r16, 0x00	; 0
     b00:	10 e0       	ldi	r17, 0x00	; 0
				LCD_WriteCHAR('m');
				LCD_GoTo(1,15);
				LCD_WriteCHAR('s');
				
				LCD_GoTo(1,7);
				LCD_WriteINTEGER(T0_stack.arr[0]);
     b02:	0f 2e       	mov	r0, r31
     b04:	f6 e2       	ldi	r31, 0x26	; 38
     b06:	cf 2e       	mov	r12, r31
     b08:	f1 e0       	ldi	r31, 0x01	; 1
     b0a:	df 2e       	mov	r13, r31
     b0c:	f0 2d       	mov	r31, r0
				LCD_GoTo(1,0);
				LCD_WriteCHAR('M');				
			}
				
			LCD_GoTo(0,8);
			LCD_WriteINTEGER(T1_stack.arr[0]);
     b0e:	0f 2e       	mov	r0, r31
     b10:	f0 e0       	ldi	r31, 0x00	; 0
     b12:	ef 2e       	mov	r14, r31
     b14:	f1 e0       	ldi	r31, 0x01	; 1
     b16:	ff 2e       	mov	r15, r31
     b18:	f0 2d       	mov	r31, r0
	LCD_WriteSTRING(Background_message);
	
	
    while (1) 
    {
		Keypad_val = Keypad_GetVal();
     b1a:	0e 94 0e 03 	call	0x61c	; 0x61c <Keypad_GetVal>
     b1e:	90 e0       	ldi	r25, 0x00	; 0
		if (Keypad_val >= 65 && Keypad_val <= 68)
     b20:	9c 01       	movw	r18, r24
     b22:	21 54       	subi	r18, 0x41	; 65
     b24:	31 09       	sbc	r19, r1
     b26:	24 30       	cpi	r18, 0x04	; 4
     b28:	31 05       	cpc	r19, r1
     b2a:	10 f0       	brcs	.+4      	; 0xb30 <main+0x128>
		selector0 = Keypad_val;
		else
		selector1 = Keypad_val;
     b2c:	5c 01       	movw	r10, r24
     b2e:	01 c0       	rjmp	.+2      	; 0xb32 <main+0x12a>
	
    while (1) 
    {
		Keypad_val = Keypad_GetVal();
		if (Keypad_val >= 65 && Keypad_val <= 68)
		selector0 = Keypad_val;
     b30:	8c 01       	movw	r16, r24
		else
		selector1 = Keypad_val;
	
		//LCD_GoTo(1,0);
		switch(selector0)
     b32:	02 34       	cpi	r16, 0x42	; 66
     b34:	11 05       	cpc	r17, r1
     b36:	91 f1       	breq	.+100    	; 0xb9c <main+0x194>
     b38:	24 f4       	brge	.+8      	; 0xb42 <main+0x13a>
     b3a:	01 34       	cpi	r16, 0x41	; 65
     b3c:	11 05       	cpc	r17, r1
     b3e:	51 f0       	breq	.+20     	; 0xb54 <main+0x14c>
     b40:	ec cf       	rjmp	.-40     	; 0xb1a <main+0x112>
     b42:	03 34       	cpi	r16, 0x43	; 67
     b44:	11 05       	cpc	r17, r1
     b46:	09 f4       	brne	.+2      	; 0xb4a <main+0x142>
     b48:	8d c2       	rjmp	.+1306   	; 0x1064 <main+0x65c>
     b4a:	04 34       	cpi	r16, 0x44	; 68
     b4c:	11 05       	cpc	r17, r1
     b4e:	09 f4       	brne	.+2      	; 0xb52 <main+0x14a>
     b50:	3b c4       	rjmp	.+2166   	; 0x13c8 <main+0x9c0>
     b52:	e3 cf       	rjmp	.-58     	; 0xb1a <main+0x112>
		{
			/*Alarm mode (Based on Timer 1) (In Development)*/
			case 'A':
			if (modeA == 0)
     b54:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <modeA>
     b58:	90 91 cf 00 	lds	r25, 0x00CF	; 0x8000cf <modeA+0x1>
     b5c:	89 2b       	or	r24, r25
     b5e:	e9 f6       	brne	.-70     	; 0xb1a <main+0x112>
			{
				Buzz_Tone1();
     b60:	0e 94 89 00 	call	0x112	; 0x112 <Buzz_Tone1>
				modeA = 1;
     b64:	31 e0       	ldi	r19, 0x01	; 1
     b66:	30 93 ce 00 	sts	0x00CE, r19	; 0x8000ce <modeA>
     b6a:	10 92 cf 00 	sts	0x00CF, r1	; 0x8000cf <modeA+0x1>
				modeB = 0;
     b6e:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <modeB+0x1>
     b72:	10 92 cc 00 	sts	0x00CC, r1	; 0x8000cc <modeB>
				modeC = 0;
     b76:	10 92 cb 00 	sts	0x00CB, r1	; 0x8000cb <modeC+0x1>
     b7a:	10 92 ca 00 	sts	0x00CA, r1	; 0x8000ca <modeC>
				modeD = 0;
     b7e:	10 92 c9 00 	sts	0x00C9, r1	; 0x8000c9 <__data_end+0x1>
     b82:	10 92 c8 00 	sts	0x00C8, r1	; 0x8000c8 <__data_end>
				LCD_Clear();
     b86:	0e 94 00 05 	call	0xa00	; 0xa00 <LCD_Clear>
				LCD_GoTo(0,0);
     b8a:	60 e0       	ldi	r22, 0x00	; 0
     b8c:	80 e0       	ldi	r24, 0x00	; 0
     b8e:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <LCD_GoTo>
				LCD_WriteSTRING(A_str);				
     b92:	ce 01       	movw	r24, r28
     b94:	0f 96       	adiw	r24, 0x0f	; 15
     b96:	0e 94 17 04 	call	0x82e	; 0x82e <LCD_WriteSTRING>
     b9a:	bf cf       	rjmp	.-130    	; 0xb1a <main+0x112>
			
			break;
			
			/*Timer mode (Timer 0)*/
			case 'B':
			if (modeC == 0)
     b9c:	80 91 ca 00 	lds	r24, 0x00CA	; 0x8000ca <modeC>
     ba0:	90 91 cb 00 	lds	r25, 0x00CB	; 0x8000cb <modeC+0x1>
     ba4:	89 2b       	or	r24, r25
     ba6:	e9 f4       	brne	.+58     	; 0xbe2 <main+0x1da>
			{
				Buzz_Tone1();
     ba8:	0e 94 89 00 	call	0x112	; 0x112 <Buzz_Tone1>
				modeA = 0;
     bac:	10 92 cf 00 	sts	0x00CF, r1	; 0x8000cf <modeA+0x1>
     bb0:	10 92 ce 00 	sts	0x00CE, r1	; 0x8000ce <modeA>
				modeB = 0;
     bb4:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <modeB+0x1>
     bb8:	10 92 cc 00 	sts	0x00CC, r1	; 0x8000cc <modeB>
				modeC = 1;
     bbc:	81 e0       	ldi	r24, 0x01	; 1
     bbe:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <modeC>
     bc2:	10 92 cb 00 	sts	0x00CB, r1	; 0x8000cb <modeC+0x1>
				modeD = 0;
     bc6:	10 92 c9 00 	sts	0x00C9, r1	; 0x8000c9 <__data_end+0x1>
     bca:	10 92 c8 00 	sts	0x00C8, r1	; 0x8000c8 <__data_end>
				LCD_Clear();
     bce:	0e 94 00 05 	call	0xa00	; 0xa00 <LCD_Clear>
				
				LCD_GoTo(0,0);
     bd2:	60 e0       	ldi	r22, 0x00	; 0
     bd4:	80 e0       	ldi	r24, 0x00	; 0
     bd6:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <LCD_GoTo>
				LCD_WriteSTRING(T_str);					
     bda:	ce 01       	movw	r24, r28
     bdc:	46 96       	adiw	r24, 0x16	; 22
     bde:	0e 94 17 04 	call	0x82e	; 0x82e <LCD_WriteSTRING>
			}
			
			T2_SS_Count = 1;
			TIMER2_Stop();
     be2:	0e 94 69 11 	call	0x22d2	; 0x22d2 <TIMER2_Stop>
									
			if ((T0_guard == 0) && (T0_pause == 2))
     be6:	80 91 d2 00 	lds	r24, 0x00D2	; 0x8000d2 <T0_guard>
     bea:	90 91 d3 00 	lds	r25, 0x00D3	; 0x8000d3 <T0_guard+0x1>
     bee:	89 2b       	or	r24, r25
     bf0:	91 f4       	brne	.+36     	; 0xc16 <main+0x20e>
     bf2:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <T0_pause>
     bf6:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <T0_pause+0x1>
     bfa:	02 97       	sbiw	r24, 0x02	; 2
     bfc:	61 f4       	brne	.+24     	; 0xc16 <main+0x20e>
			{
				if (selector1 >= 48 && selector1 <= 57)
     bfe:	c5 01       	movw	r24, r10
     c00:	c0 97       	sbiw	r24, 0x30	; 48
     c02:	0a 97       	sbiw	r24, 0x0a	; 10
     c04:	40 f4       	brcc	.+16     	; 0xc16 <main+0x20e>
				{
					Buzz_Tone1();
     c06:	0e 94 89 00 	call	0x112	; 0x112 <Buzz_Tone1>
					Inv_Stack_PUSH(&T0_stack, selector1-48);
     c0a:	b5 01       	movw	r22, r10
     c0c:	60 53       	subi	r22, 0x30	; 48
     c0e:	71 09       	sbc	r23, r1
     c10:	c6 01       	movw	r24, r12
     c12:	0e 94 43 0b 	call	0x1686	; 0x1686 <Inv_Stack_PUSH>
				}
			
			}
			if (selector1 == '#')
     c16:	93 e2       	ldi	r25, 0x23	; 35
     c18:	a9 16       	cp	r10, r25
     c1a:	b1 04       	cpc	r11, r1
     c1c:	09 f0       	breq	.+2      	; 0xc20 <main+0x218>
     c1e:	cc c0       	rjmp	.+408    	; 0xdb8 <main+0x3b0>
			{
				Buzz_Tone1();
     c20:	0e 94 89 00 	call	0x112	; 0x112 <Buzz_Tone1>
     c24:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <T0_clock_starter>
     c28:	90 91 d1 00 	lds	r25, 0x00D1	; 0x8000d1 <T0_clock_starter+0x1>
     c2c:	e6 e2       	ldi	r30, 0x26	; 38
     c2e:	f1 e0       	ldi	r31, 0x01	; 1
				T0_SS_Count++;
				for (i = 0;i < 6; i++)
				{
					if (T0_stack.arr[i] > 0)
     c30:	21 91       	ld	r18, Z+
     c32:	31 91       	ld	r19, Z+
     c34:	12 16       	cp	r1, r18
     c36:	13 06       	cpc	r1, r19
     c38:	14 f4       	brge	.+4      	; 0xc3e <main+0x236>
					{
						T0_clock_starter = 1;
     c3a:	81 e0       	ldi	r24, 0x01	; 1
     c3c:	90 e0       	ldi	r25, 0x00	; 0
			}
			if (selector1 == '#')
			{
				Buzz_Tone1();
				T0_SS_Count++;
				for (i = 0;i < 6; i++)
     c3e:	a1 e0       	ldi	r26, 0x01	; 1
     c40:	e2 33       	cpi	r30, 0x32	; 50
     c42:	fa 07       	cpc	r31, r26
     c44:	a9 f7       	brne	.-22     	; 0xc30 <main+0x228>
     c46:	90 93 d1 00 	sts	0x00D1, r25	; 0x8000d1 <T0_clock_starter+0x1>
     c4a:	80 93 d0 00 	sts	0x00D0, r24	; 0x8000d0 <T0_clock_starter>
					if (T0_stack.arr[i] > 0)
					{
						T0_clock_starter = 1;
					}
				}
				if (T0_clock_starter)
     c4e:	89 2b       	or	r24, r25
     c50:	09 f4       	brne	.+2      	; 0xc54 <main+0x24c>
     c52:	a9 c0       	rjmp	.+338    	; 0xda6 <main+0x39e>
			
			}
			if (selector1 == '#')
			{
				Buzz_Tone1();
				T0_SS_Count++;
     c54:	bf ef       	ldi	r27, 0xFF	; 255
     c56:	6b 1a       	sub	r6, r27
     c58:	7b 0a       	sbc	r7, r27
						T0_clock_starter = 1;
					}
				}
				if (T0_clock_starter)
				{
					if (T0_SS_Count % 2 == 0)
     c5a:	60 fc       	sbrc	r6, 0
     c5c:	9d c0       	rjmp	.+314    	; 0xd98 <main+0x390>
					{
						hours   = (T0_stack.arr[0]*10) + T0_stack.arr[1];
     c5e:	f6 01       	movw	r30, r12
     c60:	80 81       	ld	r24, Z
     c62:	91 81       	ldd	r25, Z+1	; 0x01
     c64:	fc 01       	movw	r30, r24
     c66:	ee 0f       	add	r30, r30
     c68:	ff 1f       	adc	r31, r31
     c6a:	88 0f       	add	r24, r24
     c6c:	99 1f       	adc	r25, r25
     c6e:	88 0f       	add	r24, r24
     c70:	99 1f       	adc	r25, r25
     c72:	88 0f       	add	r24, r24
     c74:	99 1f       	adc	r25, r25
     c76:	8e 0f       	add	r24, r30
     c78:	9f 1f       	adc	r25, r31
     c7a:	d6 01       	movw	r26, r12
     c7c:	12 96       	adiw	r26, 0x02	; 2
     c7e:	ed 91       	ld	r30, X+
     c80:	fc 91       	ld	r31, X
     c82:	13 97       	sbiw	r26, 0x03	; 3
     c84:	e8 0f       	add	r30, r24
     c86:	f9 1f       	adc	r31, r25
						minutes = (T0_stack.arr[2]*10) + T0_stack.arr[3];
						seconds = (T0_stack.arr[4]*10) + T0_stack.arr[5];
     c88:	18 96       	adiw	r26, 0x08	; 8
     c8a:	2d 91       	ld	r18, X+
     c8c:	3c 91       	ld	r19, X
     c8e:	19 97       	sbiw	r26, 0x09	; 9
     c90:	c9 01       	movw	r24, r18
     c92:	88 0f       	add	r24, r24
     c94:	99 1f       	adc	r25, r25
     c96:	22 0f       	add	r18, r18
     c98:	33 1f       	adc	r19, r19
     c9a:	22 0f       	add	r18, r18
     c9c:	33 1f       	adc	r19, r19
     c9e:	22 0f       	add	r18, r18
     ca0:	33 1f       	adc	r19, r19
     ca2:	28 0f       	add	r18, r24
     ca4:	39 1f       	adc	r19, r25
     ca6:	1a 96       	adiw	r26, 0x0a	; 10
     ca8:	8d 91       	ld	r24, X+
     caa:	9c 91       	ld	r25, X
     cac:	1b 97       	sbiw	r26, 0x0b	; 11
     cae:	82 0f       	add	r24, r18
     cb0:	93 1f       	adc	r25, r19
						
						
						minutes += (seconds / 60);
     cb2:	14 96       	adiw	r26, 0x04	; 4
     cb4:	2d 91       	ld	r18, X+
     cb6:	3c 91       	ld	r19, X
     cb8:	15 97       	sbiw	r26, 0x05	; 5
     cba:	a9 01       	movw	r20, r18
     cbc:	44 0f       	add	r20, r20
     cbe:	55 1f       	adc	r21, r21
     cc0:	22 0f       	add	r18, r18
     cc2:	33 1f       	adc	r19, r19
     cc4:	22 0f       	add	r18, r18
     cc6:	33 1f       	adc	r19, r19
     cc8:	22 0f       	add	r18, r18
     cca:	33 1f       	adc	r19, r19
     ccc:	24 0f       	add	r18, r20
     cce:	35 1f       	adc	r19, r21
     cd0:	16 96       	adiw	r26, 0x06	; 6
     cd2:	6d 91       	ld	r22, X+
     cd4:	7c 91       	ld	r23, X
     cd6:	17 97       	sbiw	r26, 0x07	; 7
     cd8:	26 0f       	add	r18, r22
     cda:	37 1f       	adc	r19, r23
     cdc:	6c e3       	ldi	r22, 0x3C	; 60
     cde:	70 e0       	ldi	r23, 0x00	; 0
     ce0:	0e 94 83 13 	call	0x2706	; 0x2706 <__divmodhi4>
     ce4:	26 0f       	add	r18, r22
     ce6:	37 1f       	adc	r19, r23
						seconds %= 60;
     ce8:	98 2e       	mov	r9, r24
     cea:	49 2f       	mov	r20, r25
     cec:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <seconds>
     cf0:	90 93 f3 00 	sts	0x00F3, r25	; 0x8000f3 <seconds+0x1>
						hours += (minutes / 60);
     cf4:	c9 01       	movw	r24, r18
     cf6:	6c e3       	ldi	r22, 0x3C	; 60
     cf8:	70 e0       	ldi	r23, 0x00	; 0
     cfa:	0e 94 83 13 	call	0x2706	; 0x2706 <__divmodhi4>
     cfe:	e6 0f       	add	r30, r22
     d00:	f7 1f       	adc	r31, r23
						if (hours > 99)
     d02:	e4 36       	cpi	r30, 0x64	; 100
     d04:	f1 05       	cpc	r31, r1
     d06:	2c f4       	brge	.+10     	; 0xd12 <main+0x30a>
						seconds = (T0_stack.arr[4]*10) + T0_stack.arr[5];
						
						
						minutes += (seconds / 60);
						seconds %= 60;
						hours += (minutes / 60);
     d08:	f0 93 f7 00 	sts	0x00F7, r31	; 0x8000f7 <hours+0x1>
     d0c:	e0 93 f6 00 	sts	0x00F6, r30	; 0x8000f6 <hours>
     d10:	06 c0       	rjmp	.+12     	; 0xd1e <main+0x316>
						if (hours > 99)
						{
							hours = 99;
     d12:	e3 e6       	ldi	r30, 0x63	; 99
     d14:	f0 e0       	ldi	r31, 0x00	; 0
     d16:	f0 93 f7 00 	sts	0x00F7, r31	; 0x8000f7 <hours+0x1>
     d1a:	e0 93 f6 00 	sts	0x00F6, r30	; 0x8000f6 <hours>
						}
						minutes %= 60;
     d1e:	c9 01       	movw	r24, r18
     d20:	6c e3       	ldi	r22, 0x3C	; 60
     d22:	70 e0       	ldi	r23, 0x00	; 0
     d24:	0e 94 83 13 	call	0x2706	; 0x2706 <__divmodhi4>
     d28:	90 93 f5 00 	sts	0x00F5, r25	; 0x8000f5 <minutes+0x1>
     d2c:	80 93 f4 00 	sts	0x00F4, r24	; 0x8000f4 <minutes>
						if (minutes > 99)
						{
							minutes = 99;
						}
						
						T0_stack.arr[0] = hours / 10;
     d30:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <hours>
     d34:	90 91 f7 00 	lds	r25, 0x00F7	; 0x8000f7 <hours+0x1>
     d38:	6a e0       	ldi	r22, 0x0A	; 10
     d3a:	70 e0       	ldi	r23, 0x00	; 0
     d3c:	0e 94 83 13 	call	0x2706	; 0x2706 <__divmodhi4>
     d40:	d6 01       	movw	r26, r12
     d42:	11 96       	adiw	r26, 0x01	; 1
     d44:	7c 93       	st	X, r23
     d46:	6e 93       	st	-X, r22
						T0_stack.arr[1] = hours % 10;
     d48:	13 96       	adiw	r26, 0x03	; 3
     d4a:	9c 93       	st	X, r25
     d4c:	8e 93       	st	-X, r24
     d4e:	12 97       	sbiw	r26, 0x02	; 2
						
						T0_stack.arr[2] = minutes / 10;
     d50:	80 91 f4 00 	lds	r24, 0x00F4	; 0x8000f4 <minutes>
     d54:	90 91 f5 00 	lds	r25, 0x00F5	; 0x8000f5 <minutes+0x1>
     d58:	6a e0       	ldi	r22, 0x0A	; 10
     d5a:	70 e0       	ldi	r23, 0x00	; 0
     d5c:	0e 94 83 13 	call	0x2706	; 0x2706 <__divmodhi4>
     d60:	f6 01       	movw	r30, r12
     d62:	75 83       	std	Z+5, r23	; 0x05
     d64:	64 83       	std	Z+4, r22	; 0x04
						T0_stack.arr[3] = minutes % 10;
     d66:	97 83       	std	Z+7, r25	; 0x07
     d68:	86 83       	std	Z+6, r24	; 0x06
						
						T0_stack.arr[4] = seconds / 10;
     d6a:	89 2d       	mov	r24, r9
     d6c:	94 2f       	mov	r25, r20
     d6e:	6a e0       	ldi	r22, 0x0A	; 10
     d70:	70 e0       	ldi	r23, 0x00	; 0
     d72:	0e 94 83 13 	call	0x2706	; 0x2706 <__divmodhi4>
     d76:	71 87       	std	Z+9, r23	; 0x09
     d78:	60 87       	std	Z+8, r22	; 0x08
						T0_stack.arr[5] = seconds % 10;
     d7a:	93 87       	std	Z+11, r25	; 0x0b
     d7c:	82 87       	std	Z+10, r24	; 0x0a
						
						TIMER0_Start();
     d7e:	0e 94 ab 0b 	call	0x1756	; 0x1756 <TIMER0_Start>
						T0_guard = 1;
     d82:	f1 e0       	ldi	r31, 0x01	; 1
     d84:	f0 93 d2 00 	sts	0x00D2, r31	; 0x8000d2 <T0_guard>
     d88:	10 92 d3 00 	sts	0x00D3, r1	; 0x8000d3 <T0_guard+0x1>
						T0_pause = 2;
     d8c:	22 e0       	ldi	r18, 0x02	; 2
     d8e:	20 93 72 00 	sts	0x0072, r18	; 0x800072 <T0_pause>
     d92:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <T0_pause+0x1>
     d96:	f3 c0       	rjmp	.+486    	; 0xf7e <main+0x576>
					}
					else
					{
						TIMER0_Stop();
     d98:	0e 94 ae 0b 	call	0x175c	; 0x175c <TIMER0_Stop>
						T0_pause = 0;
     d9c:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <T0_pause+0x1>
     da0:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <T0_pause>
     da4:	4c c0       	rjmp	.+152    	; 0xe3e <main+0x436>
					}				
				}
				else
				{
					T0_SS_Count = 1;
					T0_pause = 2;
     da6:	32 e0       	ldi	r19, 0x02	; 2
     da8:	30 93 72 00 	sts	0x0072, r19	; 0x800072 <T0_pause>
     dac:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <T0_pause+0x1>
						T0_pause = 0;
					}				
				}
				else
				{
					T0_SS_Count = 1;
     db0:	66 24       	eor	r6, r6
     db2:	63 94       	inc	r6
     db4:	71 2c       	mov	r7, r1
     db6:	e3 c0       	rjmp	.+454    	; 0xf7e <main+0x576>
					T0_pause = 2;
				}

			}
			else if (selector1 == '*')
     db8:	8a e2       	ldi	r24, 0x2A	; 42
     dba:	a8 16       	cp	r10, r24
     dbc:	b1 04       	cpc	r11, r1
     dbe:	61 f4       	brne	.+24     	; 0xdd8 <main+0x3d0>
			{
				Buzz_Tone1();
     dc0:	0e 94 89 00 	call	0x112	; 0x112 <Buzz_Tone1>
				if (T0_guard == 0)
     dc4:	80 91 d2 00 	lds	r24, 0x00D2	; 0x8000d2 <T0_guard>
     dc8:	90 91 d3 00 	lds	r25, 0x00D3	; 0x8000d3 <T0_guard+0x1>
     dcc:	89 2b       	or	r24, r25
     dce:	89 f5       	brne	.+98     	; 0xe32 <main+0x42a>
				{
					Inv_Stack_Remove(&T0_stack);
     dd0:	c6 01       	movw	r24, r12
     dd2:	0e 94 5f 0b 	call	0x16be	; 0x16be <Inv_Stack_Remove>
     dd6:	2d c0       	rjmp	.+90     	; 0xe32 <main+0x42a>
				}
			}	
			else if(BUTTON0_GetPinVal())
     dd8:	0e 94 49 00 	call	0x92	; 0x92 <BUTTON0_GetPinVal>
     ddc:	88 23       	and	r24, r24
     dde:	49 f1       	breq	.+82     	; 0xe32 <main+0x42a>
			{
				Buzz_Tone1();
     de0:	0e 94 89 00 	call	0x112	; 0x112 <Buzz_Tone1>
				T0_SS_Count = 1;
				T0_stack.top = 6;
     de4:	e6 e0       	ldi	r30, 0x06	; 6
     de6:	f0 e0       	ldi	r31, 0x00	; 0
     de8:	d6 01       	movw	r26, r12
     dea:	1d 96       	adiw	r26, 0x0d	; 13
     dec:	fc 93       	st	X, r31
     dee:	ee 93       	st	-X, r30
     df0:	1c 97       	sbiw	r26, 0x0c	; 12
				T0_guard = 0;
     df2:	10 92 d3 00 	sts	0x00D3, r1	; 0x8000d3 <T0_guard+0x1>
     df6:	10 92 d2 00 	sts	0x00D2, r1	; 0x8000d2 <T0_guard>
				T0_stack.arr[0] = 0;
     dfa:	11 96       	adiw	r26, 0x01	; 1
     dfc:	1c 92       	st	X, r1
     dfe:	1e 92       	st	-X, r1
				T0_stack.arr[1] = 0;
     e00:	13 96       	adiw	r26, 0x03	; 3
     e02:	1c 92       	st	X, r1
     e04:	1e 92       	st	-X, r1
     e06:	12 97       	sbiw	r26, 0x02	; 2
				T0_stack.arr[2] = 0;
     e08:	15 96       	adiw	r26, 0x05	; 5
     e0a:	1c 92       	st	X, r1
     e0c:	1e 92       	st	-X, r1
     e0e:	14 97       	sbiw	r26, 0x04	; 4
				T0_stack.arr[3] = 0;
     e10:	17 96       	adiw	r26, 0x07	; 7
     e12:	1c 92       	st	X, r1
     e14:	1e 92       	st	-X, r1
     e16:	16 97       	sbiw	r26, 0x06	; 6
				T0_stack.arr[4] = 0;
     e18:	19 96       	adiw	r26, 0x09	; 9
     e1a:	1c 92       	st	X, r1
     e1c:	1e 92       	st	-X, r1
     e1e:	18 97       	sbiw	r26, 0x08	; 8
				T0_stack.arr[5] = 0;
     e20:	1b 96       	adiw	r26, 0x0b	; 11
     e22:	1c 92       	st	X, r1
     e24:	1e 92       	st	-X, r1
     e26:	1a 97       	sbiw	r26, 0x0a	; 10
				TIMER0_Stop();
     e28:	0e 94 ae 0b 	call	0x175c	; 0x175c <TIMER0_Stop>
				}
			}	
			else if(BUTTON0_GetPinVal())
			{
				Buzz_Tone1();
				T0_SS_Count = 1;
     e2c:	66 24       	eor	r6, r6
     e2e:	63 94       	inc	r6
     e30:	71 2c       	mov	r7, r1
				T0_stack.arr[3] = 0;
				T0_stack.arr[4] = 0;
				T0_stack.arr[5] = 0;
				TIMER0_Stop();
			}	
			if (T0_pause == 0)
     e32:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <T0_pause>
     e36:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <T0_pause+0x1>
     e3a:	00 97       	sbiw	r24, 0x00	; 0
     e3c:	c9 f4       	brne	.+50     	; 0xe70 <main+0x468>
			{
				LCD_Clear();
     e3e:	0e 94 00 05 	call	0xa00	; 0xa00 <LCD_Clear>
				if (T0_clock_starter == 0)
     e42:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <T0_clock_starter>
     e46:	90 91 d1 00 	lds	r25, 0x00D1	; 0x8000d1 <T0_clock_starter+0x1>
     e4a:	89 2b       	or	r24, r25
     e4c:	11 f4       	brne	.+4      	; 0xe52 <main+0x44a>
				{
					BUZZ_OFF();
     e4e:	0e 94 61 00 	call	0xc2	; 0xc2 <BUZZ_OFF>
     e52:	ff ef       	ldi	r31, 0xFF	; 255
     e54:	21 ee       	ldi	r18, 0xE1	; 225
     e56:	34 e0       	ldi	r19, 0x04	; 4
     e58:	f1 50       	subi	r31, 0x01	; 1
     e5a:	20 40       	sbci	r18, 0x00	; 0
     e5c:	30 40       	sbci	r19, 0x00	; 0
     e5e:	e1 f7       	brne	.-8      	; 0xe58 <main+0x450>
     e60:	00 c0       	rjmp	.+0      	; 0xe62 <main+0x45a>
     e62:	00 00       	nop
				}
				_delay_ms(100);
				T0_pause = 1;
     e64:	81 e0       	ldi	r24, 0x01	; 1
     e66:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <T0_pause>
     e6a:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <T0_pause+0x1>
     e6e:	87 c0       	rjmp	.+270    	; 0xf7e <main+0x576>
			}
			else if (T0_pause == 1)
     e70:	01 97       	sbiw	r24, 0x01	; 1
     e72:	09 f0       	breq	.+2      	; 0xe76 <main+0x46e>
     e74:	84 c0       	rjmp	.+264    	; 0xf7e <main+0x576>
			{
				LCD_GoTo(0,0);
     e76:	60 e0       	ldi	r22, 0x00	; 0
     e78:	80 e0       	ldi	r24, 0x00	; 0
     e7a:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <LCD_GoTo>
				LCD_WriteSTRING(T_str);				
     e7e:	ce 01       	movw	r24, r28
     e80:	46 96       	adiw	r24, 0x16	; 22
     e82:	0e 94 17 04 	call	0x82e	; 0x82e <LCD_WriteSTRING>
				LCD_GoTo(1,9);
     e86:	69 e0       	ldi	r22, 0x09	; 9
     e88:	81 e0       	ldi	r24, 0x01	; 1
     e8a:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <LCD_GoTo>
				LCD_WriteCHAR('h');
     e8e:	88 e6       	ldi	r24, 0x68	; 104
     e90:	0e 94 d5 03 	call	0x7aa	; 0x7aa <LCD_WriteCHAR>
				LCD_GoTo(1,12);
     e94:	6c e0       	ldi	r22, 0x0C	; 12
     e96:	81 e0       	ldi	r24, 0x01	; 1
     e98:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <LCD_GoTo>
				LCD_WriteCHAR('m');
     e9c:	8d e6       	ldi	r24, 0x6D	; 109
     e9e:	0e 94 d5 03 	call	0x7aa	; 0x7aa <LCD_WriteCHAR>
				LCD_GoTo(1,15);
     ea2:	6f e0       	ldi	r22, 0x0F	; 15
     ea4:	81 e0       	ldi	r24, 0x01	; 1
     ea6:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <LCD_GoTo>
				LCD_WriteCHAR('s');				
     eaa:	83 e7       	ldi	r24, 0x73	; 115
     eac:	0e 94 d5 03 	call	0x7aa	; 0x7aa <LCD_WriteCHAR>
				
				LCD_GoTo(1,7);
     eb0:	67 e0       	ldi	r22, 0x07	; 7
     eb2:	81 e0       	ldi	r24, 0x01	; 1
     eb4:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <LCD_GoTo>
				LCD_WriteINTEGER(T0_stack.arr[0]);
     eb8:	d6 01       	movw	r26, r12
     eba:	6d 91       	ld	r22, X+
     ebc:	7c 91       	ld	r23, X
     ebe:	07 2e       	mov	r0, r23
     ec0:	00 0c       	add	r0, r0
     ec2:	88 0b       	sbc	r24, r24
     ec4:	99 0b       	sbc	r25, r25
     ec6:	0e 94 2d 04 	call	0x85a	; 0x85a <LCD_WriteINTEGER>
				LCD_GoTo(1,8);
     eca:	68 e0       	ldi	r22, 0x08	; 8
     ecc:	81 e0       	ldi	r24, 0x01	; 1
     ece:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <LCD_GoTo>
				LCD_WriteINTEGER(T0_stack.arr[1]);
     ed2:	f6 01       	movw	r30, r12
     ed4:	62 81       	ldd	r22, Z+2	; 0x02
     ed6:	73 81       	ldd	r23, Z+3	; 0x03
     ed8:	07 2e       	mov	r0, r23
     eda:	00 0c       	add	r0, r0
     edc:	88 0b       	sbc	r24, r24
     ede:	99 0b       	sbc	r25, r25
     ee0:	0e 94 2d 04 	call	0x85a	; 0x85a <LCD_WriteINTEGER>
				LCD_GoTo(1,10);
     ee4:	6a e0       	ldi	r22, 0x0A	; 10
     ee6:	81 e0       	ldi	r24, 0x01	; 1
     ee8:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <LCD_GoTo>
				LCD_WriteINTEGER(T0_stack.arr[2]);
     eec:	d6 01       	movw	r26, r12
     eee:	14 96       	adiw	r26, 0x04	; 4
     ef0:	6d 91       	ld	r22, X+
     ef2:	7c 91       	ld	r23, X
     ef4:	15 97       	sbiw	r26, 0x05	; 5
     ef6:	07 2e       	mov	r0, r23
     ef8:	00 0c       	add	r0, r0
     efa:	88 0b       	sbc	r24, r24
     efc:	99 0b       	sbc	r25, r25
     efe:	0e 94 2d 04 	call	0x85a	; 0x85a <LCD_WriteINTEGER>
				LCD_GoTo(1,11);
     f02:	6b e0       	ldi	r22, 0x0B	; 11
     f04:	81 e0       	ldi	r24, 0x01	; 1
     f06:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <LCD_GoTo>
				LCD_WriteINTEGER(T0_stack.arr[3]);
     f0a:	f6 01       	movw	r30, r12
     f0c:	66 81       	ldd	r22, Z+6	; 0x06
     f0e:	77 81       	ldd	r23, Z+7	; 0x07
     f10:	07 2e       	mov	r0, r23
     f12:	00 0c       	add	r0, r0
     f14:	88 0b       	sbc	r24, r24
     f16:	99 0b       	sbc	r25, r25
     f18:	0e 94 2d 04 	call	0x85a	; 0x85a <LCD_WriteINTEGER>
				LCD_GoTo(1,13);
     f1c:	6d e0       	ldi	r22, 0x0D	; 13
     f1e:	81 e0       	ldi	r24, 0x01	; 1
     f20:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <LCD_GoTo>
				LCD_WriteINTEGER(T0_stack.arr[4]);
     f24:	d6 01       	movw	r26, r12
     f26:	18 96       	adiw	r26, 0x08	; 8
     f28:	6d 91       	ld	r22, X+
     f2a:	7c 91       	ld	r23, X
     f2c:	19 97       	sbiw	r26, 0x09	; 9
     f2e:	07 2e       	mov	r0, r23
     f30:	00 0c       	add	r0, r0
     f32:	88 0b       	sbc	r24, r24
     f34:	99 0b       	sbc	r25, r25
     f36:	0e 94 2d 04 	call	0x85a	; 0x85a <LCD_WriteINTEGER>
				LCD_GoTo(1,14);
     f3a:	6e e0       	ldi	r22, 0x0E	; 14
     f3c:	81 e0       	ldi	r24, 0x01	; 1
     f3e:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <LCD_GoTo>
				LCD_WriteINTEGER(T0_stack.arr[5]);
     f42:	f6 01       	movw	r30, r12
     f44:	62 85       	ldd	r22, Z+10	; 0x0a
     f46:	73 85       	ldd	r23, Z+11	; 0x0b
     f48:	07 2e       	mov	r0, r23
     f4a:	00 0c       	add	r0, r0
     f4c:	88 0b       	sbc	r24, r24
     f4e:	99 0b       	sbc	r25, r25
     f50:	0e 94 2d 04 	call	0x85a	; 0x85a <LCD_WriteINTEGER>
				
				if (T0_clock_starter == 0)
     f54:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <T0_clock_starter>
     f58:	90 91 d1 00 	lds	r25, 0x00D1	; 0x8000d1 <T0_clock_starter+0x1>
     f5c:	89 2b       	or	r24, r25
     f5e:	11 f4       	brne	.+4      	; 0xf64 <main+0x55c>
				{
					Buzz_Tone0();
     f60:	0e 94 67 00 	call	0xce	; 0xce <Buzz_Tone0>
     f64:	ff ef       	ldi	r31, 0xFF	; 255
     f66:	21 ee       	ldi	r18, 0xE1	; 225
     f68:	34 e0       	ldi	r19, 0x04	; 4
     f6a:	f1 50       	subi	r31, 0x01	; 1
     f6c:	20 40       	sbci	r18, 0x00	; 0
     f6e:	30 40       	sbci	r19, 0x00	; 0
     f70:	e1 f7       	brne	.-8      	; 0xf6a <main+0x562>
     f72:	00 c0       	rjmp	.+0      	; 0xf74 <main+0x56c>
     f74:	00 00       	nop
				}				
				_delay_ms(100);
				T0_pause = 0;
     f76:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <T0_pause+0x1>
     f7a:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <T0_pause>
			}
								
			    LCD_GoTo(0,0);
     f7e:	60 e0       	ldi	r22, 0x00	; 0
     f80:	80 e0       	ldi	r24, 0x00	; 0
     f82:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <LCD_GoTo>
			    LCD_WriteSTRING(T_str);				
     f86:	ce 01       	movw	r24, r28
     f88:	46 96       	adiw	r24, 0x16	; 22
     f8a:	0e 94 17 04 	call	0x82e	; 0x82e <LCD_WriteSTRING>
				LCD_GoTo(1,9);
     f8e:	69 e0       	ldi	r22, 0x09	; 9
     f90:	81 e0       	ldi	r24, 0x01	; 1
     f92:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <LCD_GoTo>
				LCD_WriteCHAR('h');
     f96:	88 e6       	ldi	r24, 0x68	; 104
     f98:	0e 94 d5 03 	call	0x7aa	; 0x7aa <LCD_WriteCHAR>
				LCD_GoTo(1,12);
     f9c:	6c e0       	ldi	r22, 0x0C	; 12
     f9e:	81 e0       	ldi	r24, 0x01	; 1
     fa0:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <LCD_GoTo>
				LCD_WriteCHAR('m');
     fa4:	8d e6       	ldi	r24, 0x6D	; 109
     fa6:	0e 94 d5 03 	call	0x7aa	; 0x7aa <LCD_WriteCHAR>
				LCD_GoTo(1,15);
     faa:	6f e0       	ldi	r22, 0x0F	; 15
     fac:	81 e0       	ldi	r24, 0x01	; 1
     fae:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <LCD_GoTo>
				LCD_WriteCHAR('s');
     fb2:	83 e7       	ldi	r24, 0x73	; 115
     fb4:	0e 94 d5 03 	call	0x7aa	; 0x7aa <LCD_WriteCHAR>
				
				LCD_GoTo(1,7);
     fb8:	67 e0       	ldi	r22, 0x07	; 7
     fba:	81 e0       	ldi	r24, 0x01	; 1
     fbc:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <LCD_GoTo>
				LCD_WriteINTEGER(T0_stack.arr[0]);
     fc0:	d6 01       	movw	r26, r12
     fc2:	6d 91       	ld	r22, X+
     fc4:	7c 91       	ld	r23, X
     fc6:	07 2e       	mov	r0, r23
     fc8:	00 0c       	add	r0, r0
     fca:	88 0b       	sbc	r24, r24
     fcc:	99 0b       	sbc	r25, r25
     fce:	0e 94 2d 04 	call	0x85a	; 0x85a <LCD_WriteINTEGER>
				LCD_GoTo(1,8);
     fd2:	68 e0       	ldi	r22, 0x08	; 8
     fd4:	81 e0       	ldi	r24, 0x01	; 1
     fd6:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <LCD_GoTo>
				LCD_WriteINTEGER(T0_stack.arr[1]);
     fda:	f6 01       	movw	r30, r12
     fdc:	62 81       	ldd	r22, Z+2	; 0x02
     fde:	73 81       	ldd	r23, Z+3	; 0x03
     fe0:	07 2e       	mov	r0, r23
     fe2:	00 0c       	add	r0, r0
     fe4:	88 0b       	sbc	r24, r24
     fe6:	99 0b       	sbc	r25, r25
     fe8:	0e 94 2d 04 	call	0x85a	; 0x85a <LCD_WriteINTEGER>
				LCD_GoTo(1,10);
     fec:	6a e0       	ldi	r22, 0x0A	; 10
     fee:	81 e0       	ldi	r24, 0x01	; 1
     ff0:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <LCD_GoTo>
				LCD_WriteINTEGER(T0_stack.arr[2]);
     ff4:	d6 01       	movw	r26, r12
     ff6:	14 96       	adiw	r26, 0x04	; 4
     ff8:	6d 91       	ld	r22, X+
     ffa:	7c 91       	ld	r23, X
     ffc:	15 97       	sbiw	r26, 0x05	; 5
     ffe:	07 2e       	mov	r0, r23
    1000:	00 0c       	add	r0, r0
    1002:	88 0b       	sbc	r24, r24
    1004:	99 0b       	sbc	r25, r25
    1006:	0e 94 2d 04 	call	0x85a	; 0x85a <LCD_WriteINTEGER>
				LCD_GoTo(1,11);
    100a:	6b e0       	ldi	r22, 0x0B	; 11
    100c:	81 e0       	ldi	r24, 0x01	; 1
    100e:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <LCD_GoTo>
				LCD_WriteINTEGER(T0_stack.arr[3]);
    1012:	f6 01       	movw	r30, r12
    1014:	66 81       	ldd	r22, Z+6	; 0x06
    1016:	77 81       	ldd	r23, Z+7	; 0x07
    1018:	07 2e       	mov	r0, r23
    101a:	00 0c       	add	r0, r0
    101c:	88 0b       	sbc	r24, r24
    101e:	99 0b       	sbc	r25, r25
    1020:	0e 94 2d 04 	call	0x85a	; 0x85a <LCD_WriteINTEGER>
				LCD_GoTo(1,13);
    1024:	6d e0       	ldi	r22, 0x0D	; 13
    1026:	81 e0       	ldi	r24, 0x01	; 1
    1028:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <LCD_GoTo>
				LCD_WriteINTEGER(T0_stack.arr[4]);
    102c:	d6 01       	movw	r26, r12
    102e:	18 96       	adiw	r26, 0x08	; 8
    1030:	6d 91       	ld	r22, X+
    1032:	7c 91       	ld	r23, X
    1034:	19 97       	sbiw	r26, 0x09	; 9
    1036:	07 2e       	mov	r0, r23
    1038:	00 0c       	add	r0, r0
    103a:	88 0b       	sbc	r24, r24
    103c:	99 0b       	sbc	r25, r25
    103e:	0e 94 2d 04 	call	0x85a	; 0x85a <LCD_WriteINTEGER>
				LCD_GoTo(1,14);
    1042:	6e e0       	ldi	r22, 0x0E	; 14
    1044:	81 e0       	ldi	r24, 0x01	; 1
    1046:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <LCD_GoTo>
				LCD_WriteINTEGER(T0_stack.arr[5]);
    104a:	f6 01       	movw	r30, r12
    104c:	62 85       	ldd	r22, Z+10	; 0x0a
    104e:	73 85       	ldd	r23, Z+11	; 0x0b
    1050:	07 2e       	mov	r0, r23
    1052:	00 0c       	add	r0, r0
    1054:	88 0b       	sbc	r24, r24
    1056:	99 0b       	sbc	r25, r25
    1058:	0e 94 2d 04 	call	0x85a	; 0x85a <LCD_WriteINTEGER>
				
				LCD_GoTo(0,0);
				LCD_WriteSTRING(T_str);					
			}
			
			T2_SS_Count = 1;
    105c:	88 24       	eor	r8, r8
    105e:	83 94       	inc	r8
    1060:	91 2c       	mov	r9, r1
				LCD_GoTo(1,13);
				LCD_WriteINTEGER(T0_stack.arr[4]);
				LCD_GoTo(1,14);
				LCD_WriteINTEGER(T0_stack.arr[5]);
						
			break;
    1062:	5b cd       	rjmp	.-1354   	; 0xb1a <main+0x112>
			
			/*Clock mode (Timer 1)*/
			case 'C':
			if (modeB == 0)
    1064:	80 91 cc 00 	lds	r24, 0x00CC	; 0x8000cc <modeB>
    1068:	90 91 cd 00 	lds	r25, 0x00CD	; 0x8000cd <modeB+0x1>
    106c:	89 2b       	or	r24, r25
    106e:	c9 f5       	brne	.+114    	; 0x10e2 <main+0x6da>
			{
				Buzz_Tone1();
    1070:	0e 94 89 00 	call	0x112	; 0x112 <Buzz_Tone1>
				modeA = 0;
    1074:	10 92 cf 00 	sts	0x00CF, r1	; 0x8000cf <modeA+0x1>
    1078:	10 92 ce 00 	sts	0x00CE, r1	; 0x8000ce <modeA>
				modeB = 1;
    107c:	f1 e0       	ldi	r31, 0x01	; 1
    107e:	f0 93 cc 00 	sts	0x00CC, r31	; 0x8000cc <modeB>
    1082:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <modeB+0x1>
				modeC = 0;
    1086:	10 92 cb 00 	sts	0x00CB, r1	; 0x8000cb <modeC+0x1>
    108a:	10 92 ca 00 	sts	0x00CA, r1	; 0x8000ca <modeC>
				modeD = 0;
    108e:	10 92 c9 00 	sts	0x00C9, r1	; 0x8000c9 <__data_end+0x1>
    1092:	10 92 c8 00 	sts	0x00C8, r1	; 0x8000c8 <__data_end>
				LCD_Clear();
    1096:	0e 94 00 05 	call	0xa00	; 0xa00 <LCD_Clear>
				
				LCD_GoTo(0,0);
    109a:	60 e0       	ldi	r22, 0x00	; 0
    109c:	80 e0       	ldi	r24, 0x00	; 0
    109e:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <LCD_GoTo>
				LCD_WriteSTRING(C_str);
    10a2:	ce 01       	movw	r24, r28
    10a4:	4d 96       	adiw	r24, 0x1d	; 29
    10a6:	0e 94 17 04 	call	0x82e	; 0x82e <LCD_WriteSTRING>
				/*clock separators*/
				LCD_GoTo(1,10);
    10aa:	6a e0       	ldi	r22, 0x0A	; 10
    10ac:	81 e0       	ldi	r24, 0x01	; 1
    10ae:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <LCD_GoTo>
				LCD_WriteCHAR(':');
    10b2:	8a e3       	ldi	r24, 0x3A	; 58
    10b4:	0e 94 d5 03 	call	0x7aa	; 0x7aa <LCD_WriteCHAR>
				LCD_GoTo(1,13);
    10b8:	6d e0       	ldi	r22, 0x0D	; 13
    10ba:	81 e0       	ldi	r24, 0x01	; 1
    10bc:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <LCD_GoTo>
				LCD_WriteCHAR(':');
    10c0:	8a e3       	ldi	r24, 0x3A	; 58
    10c2:	0e 94 d5 03 	call	0x7aa	; 0x7aa <LCD_WriteCHAR>
				/*date separators*/
				LCD_GoTo(0,10);
    10c6:	6a e0       	ldi	r22, 0x0A	; 10
    10c8:	80 e0       	ldi	r24, 0x00	; 0
    10ca:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <LCD_GoTo>
				LCD_WriteCHAR('/');
    10ce:	8f e2       	ldi	r24, 0x2F	; 47
    10d0:	0e 94 d5 03 	call	0x7aa	; 0x7aa <LCD_WriteCHAR>
				LCD_GoTo(0,13);
    10d4:	6d e0       	ldi	r22, 0x0D	; 13
    10d6:	80 e0       	ldi	r24, 0x00	; 0
    10d8:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <LCD_GoTo>
				LCD_WriteCHAR('/');
    10dc:	8f e2       	ldi	r24, 0x2F	; 47
    10de:	0e 94 d5 03 	call	0x7aa	; 0x7aa <LCD_WriteCHAR>
			}
			
			T0_SS_Count = 1;
			TIMER0_Stop();
    10e2:	0e 94 ae 0b 	call	0x175c	; 0x175c <TIMER0_Stop>
			T2_SS_Count = 1;
			TIMER2_Stop();
    10e6:	0e 94 69 11 	call	0x22d2	; 0x22d2 <TIMER2_Stop>
			
			if (T1_guard == 0)
    10ea:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <T1_guard>
    10ee:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <T1_guard+0x1>
    10f2:	89 2b       	or	r24, r25
    10f4:	61 f4       	brne	.+24     	; 0x110e <main+0x706>
			{
				if (selector1 >= 48 && selector1 <= 57)
    10f6:	c5 01       	movw	r24, r10
    10f8:	c0 97       	sbiw	r24, 0x30	; 48
    10fa:	0a 97       	sbiw	r24, 0x0a	; 10
    10fc:	40 f4       	brcc	.+16     	; 0x110e <main+0x706>
				{
					Buzz_Tone1();
    10fe:	0e 94 89 00 	call	0x112	; 0x112 <Buzz_Tone1>
					Stack_PUSH(&T1_stack, selector1-48);
    1102:	b5 01       	movw	r22, r10
    1104:	60 53       	subi	r22, 0x30	; 48
    1106:	71 09       	sbc	r23, r1
    1108:	c7 01       	movw	r24, r14
    110a:	0e 94 81 0b 	call	0x1702	; 0x1702 <Stack_PUSH>
				}
			}
						
			if (selector1 == '#')
    110e:	23 e2       	ldi	r18, 0x23	; 35
    1110:	a2 16       	cp	r10, r18
    1112:	b1 04       	cpc	r11, r1
    1114:	f9 f4       	brne	.+62     	; 0x1154 <main+0x74c>
			{
				Buzz_Tone1();
    1116:	0e 94 89 00 	call	0x112	; 0x112 <Buzz_Tone1>
				T1_SS_Count++;
    111a:	89 a9       	ldd	r24, Y+49	; 0x31
    111c:	9a a9       	ldd	r25, Y+50	; 0x32
    111e:	01 96       	adiw	r24, 0x01	; 1
    1120:	9a ab       	std	Y+50, r25	; 0x32
    1122:	89 ab       	std	Y+49, r24	; 0x31
				if (T1_SS_Count % 2 == 0)
    1124:	80 fd       	sbrc	r24, 0
    1126:	0f c0       	rjmp	.+30     	; 0x1146 <main+0x73e>
				{
					T1_guard = 1;
    1128:	91 e0       	ldi	r25, 0x01	; 1
    112a:	90 93 70 00 	sts	0x0070, r25	; 0x800070 <T1_guard>
    112e:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <T1_guard+0x1>
					T1_stack.top = 11;
    1132:	8b e0       	ldi	r24, 0x0B	; 11
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	d7 01       	movw	r26, r14
    1138:	59 96       	adiw	r26, 0x19	; 25
    113a:	9c 93       	st	X, r25
    113c:	8e 93       	st	-X, r24
    113e:	58 97       	sbiw	r26, 0x18	; 24
					TIMER1_Start();
    1140:	0e 94 65 0e 	call	0x1cca	; 0x1cca <TIMER1_Start>
    1144:	6a c0       	rjmp	.+212    	; 0x121a <main+0x812>
				}
				else
				{
					T1_guard = 0;
    1146:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <T1_guard+0x1>
    114a:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <T1_guard>
					TIMER1_Stop();
    114e:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <TIMER1_Stop>
    1152:	63 c0       	rjmp	.+198    	; 0x121a <main+0x812>
				}
				
			}
			else if (selector1 == '*')
    1154:	ba e2       	ldi	r27, 0x2A	; 42
    1156:	ab 16       	cp	r10, r27
    1158:	b1 04       	cpc	r11, r1
    115a:	c1 f4       	brne	.+48     	; 0x118c <main+0x784>
			{
				Buzz_Tone1();
    115c:	0e 94 89 00 	call	0x112	; 0x112 <Buzz_Tone1>
				if (T1_guard == 0)
    1160:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <T1_guard>
    1164:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <T1_guard+0x1>
    1168:	89 2b       	or	r24, r25
    116a:	21 f4       	brne	.+8      	; 0x1174 <main+0x76c>
				{
					Stack_Remove(&T1_stack);
    116c:	c7 01       	movw	r24, r14
    116e:	0e 94 92 0b 	call	0x1724	; 0x1724 <Stack_Remove>
    1172:	53 c0       	rjmp	.+166    	; 0x121a <main+0x812>
				}
				else
				{
					Tone_counter++;
    1174:	eb a9       	ldd	r30, Y+51	; 0x33
    1176:	fc a9       	ldd	r31, Y+52	; 0x34
    1178:	31 96       	adiw	r30, 0x01	; 1
    117a:	fc ab       	std	Y+52, r31	; 0x34
    117c:	eb ab       	std	Y+51, r30	; 0x33
					if (Tone_counter % 2 == 0)
					{
						Tone_switch = 1;	
    117e:	1f 01       	movw	r2, r30
    1180:	f1 e0       	ldi	r31, 0x01	; 1
    1182:	2f 26       	eor	r2, r31
    1184:	21 e0       	ldi	r18, 0x01	; 1
    1186:	22 22       	and	r2, r18
    1188:	33 24       	eor	r3, r3
    118a:	47 c0       	rjmp	.+142    	; 0x121a <main+0x812>
					{
						Tone_switch = 0;
					}
				}
			}
			else if(BUTTON0_GetPinVal())
    118c:	0e 94 49 00 	call	0x92	; 0x92 <BUTTON0_GetPinVal>
    1190:	88 23       	and	r24, r24
    1192:	09 f4       	brne	.+2      	; 0x1196 <main+0x78e>
    1194:	42 c0       	rjmp	.+132    	; 0x121a <main+0x812>
			{
				Buzz_Tone1();
    1196:	0e 94 89 00 	call	0x112	; 0x112 <Buzz_Tone1>
				T1_SS_Count = 1;
				T1_stack.top = -1;
    119a:	8f ef       	ldi	r24, 0xFF	; 255
    119c:	9f ef       	ldi	r25, 0xFF	; 255
    119e:	d7 01       	movw	r26, r14
    11a0:	59 96       	adiw	r26, 0x19	; 25
    11a2:	9c 93       	st	X, r25
    11a4:	8e 93       	st	-X, r24
    11a6:	58 97       	sbiw	r26, 0x18	; 24
				T1_guard = 0;
    11a8:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <T1_guard+0x1>
    11ac:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <T1_guard>
				T1_stack.arr[0] = 0;
    11b0:	11 96       	adiw	r26, 0x01	; 1
    11b2:	1c 92       	st	X, r1
    11b4:	1e 92       	st	-X, r1
				T1_stack.arr[1] = 0;
    11b6:	13 96       	adiw	r26, 0x03	; 3
    11b8:	1c 92       	st	X, r1
    11ba:	1e 92       	st	-X, r1
    11bc:	12 97       	sbiw	r26, 0x02	; 2
				T1_stack.arr[2] = 0;
    11be:	15 96       	adiw	r26, 0x05	; 5
    11c0:	1c 92       	st	X, r1
    11c2:	1e 92       	st	-X, r1
    11c4:	14 97       	sbiw	r26, 0x04	; 4
				T1_stack.arr[3] = 0;
    11c6:	17 96       	adiw	r26, 0x07	; 7
    11c8:	1c 92       	st	X, r1
    11ca:	1e 92       	st	-X, r1
    11cc:	16 97       	sbiw	r26, 0x06	; 6
				T1_stack.arr[4] = 0;
    11ce:	19 96       	adiw	r26, 0x09	; 9
    11d0:	1c 92       	st	X, r1
    11d2:	1e 92       	st	-X, r1
    11d4:	18 97       	sbiw	r26, 0x08	; 8
				T1_stack.arr[5] = 0;
    11d6:	1b 96       	adiw	r26, 0x0b	; 11
    11d8:	1c 92       	st	X, r1
    11da:	1e 92       	st	-X, r1
    11dc:	1a 97       	sbiw	r26, 0x0a	; 10
				T1_stack.arr[6] = 0;
    11de:	1d 96       	adiw	r26, 0x0d	; 13
    11e0:	1c 92       	st	X, r1
    11e2:	1e 92       	st	-X, r1
    11e4:	1c 97       	sbiw	r26, 0x0c	; 12
				T1_stack.arr[7] = 0;
    11e6:	1f 96       	adiw	r26, 0x0f	; 15
    11e8:	1c 92       	st	X, r1
    11ea:	1e 92       	st	-X, r1
    11ec:	1e 97       	sbiw	r26, 0x0e	; 14
				T1_stack.arr[8] = 0;
    11ee:	51 96       	adiw	r26, 0x11	; 17
    11f0:	1c 92       	st	X, r1
    11f2:	1e 92       	st	-X, r1
    11f4:	50 97       	sbiw	r26, 0x10	; 16
				T1_stack.arr[9] = 0;
    11f6:	53 96       	adiw	r26, 0x13	; 19
    11f8:	1c 92       	st	X, r1
    11fa:	1e 92       	st	-X, r1
    11fc:	52 97       	sbiw	r26, 0x12	; 18
				T1_stack.arr[10] = 0;
    11fe:	55 96       	adiw	r26, 0x15	; 21
    1200:	1c 92       	st	X, r1
    1202:	1e 92       	st	-X, r1
    1204:	54 97       	sbiw	r26, 0x14	; 20
				T1_stack.arr[11] = 0;				
    1206:	57 96       	adiw	r26, 0x17	; 23
    1208:	1c 92       	st	X, r1
    120a:	1e 92       	st	-X, r1
    120c:	56 97       	sbiw	r26, 0x16	; 22
				TIMER1_Stop();
    120e:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <TIMER1_Stop>
				}
			}
			else if(BUTTON0_GetPinVal())
			{
				Buzz_Tone1();
				T1_SS_Count = 1;
    1212:	e1 e0       	ldi	r30, 0x01	; 1
    1214:	f0 e0       	ldi	r31, 0x00	; 0
    1216:	fa ab       	std	Y+50, r31	; 0x32
    1218:	e9 ab       	std	Y+49, r30	; 0x31
				T1_stack.arr[10] = 0;
				T1_stack.arr[11] = 0;				
				TIMER1_Stop();
			}	
			
			if (Tone_switch)
    121a:	21 14       	cp	r2, r1
    121c:	31 04       	cpc	r3, r1
    121e:	d9 f0       	breq	.+54     	; 0x1256 <main+0x84e>
			{	
				LCD_GoTo(1,0);
    1220:	60 e0       	ldi	r22, 0x00	; 0
    1222:	81 e0       	ldi	r24, 0x01	; 1
    1224:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <LCD_GoTo>
				LCD_WriteCHAR(32);				
    1228:	80 e2       	ldi	r24, 0x20	; 32
    122a:	0e 94 d5 03 	call	0x7aa	; 0x7aa <LCD_WriteCHAR>
				if (Tone2_Buff != T1_stack.arr[7])
    122e:	d7 01       	movw	r26, r14
    1230:	1e 96       	adiw	r26, 0x0e	; 14
    1232:	8d 91       	ld	r24, X+
    1234:	9c 91       	ld	r25, X
    1236:	1f 97       	sbiw	r26, 0x0f	; 15
    1238:	ef a5       	ldd	r30, Y+47	; 0x2f
    123a:	f8 a9       	ldd	r31, Y+48	; 0x30
    123c:	e8 17       	cp	r30, r24
    123e:	f9 07       	cpc	r31, r25
    1240:	91 f0       	breq	.+36     	; 0x1266 <main+0x85e>
				{
					Buzz_Tone2();
    1242:	0e 94 9a 00 	call	0x134	; 0x134 <Buzz_Tone2>
					Tone2_Buff = T1_stack.arr[7];
    1246:	d7 01       	movw	r26, r14
    1248:	1e 96       	adiw	r26, 0x0e	; 14
    124a:	0d 90       	ld	r0, X+
    124c:	bc 91       	ld	r27, X
    124e:	a0 2d       	mov	r26, r0
    1250:	b8 ab       	std	Y+48, r27	; 0x30
    1252:	af a7       	std	Y+47, r26	; 0x2f
    1254:	0a c0       	rjmp	.+20     	; 0x126a <main+0x862>
				}						
			}
			else
			{
				LCD_GoTo(1,0);
    1256:	60 e0       	ldi	r22, 0x00	; 0
    1258:	81 e0       	ldi	r24, 0x01	; 1
    125a:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <LCD_GoTo>
				LCD_WriteCHAR('M');				
    125e:	8d e4       	ldi	r24, 0x4D	; 77
    1260:	0e 94 d5 03 	call	0x7aa	; 0x7aa <LCD_WriteCHAR>
    1264:	02 c0       	rjmp	.+4      	; 0x126a <main+0x862>
    1266:	98 ab       	std	Y+48, r25	; 0x30
    1268:	8f a7       	std	Y+47, r24	; 0x2f
			}
				
			LCD_GoTo(0,8);
    126a:	68 e0       	ldi	r22, 0x08	; 8
    126c:	80 e0       	ldi	r24, 0x00	; 0
    126e:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <LCD_GoTo>
			LCD_WriteINTEGER(T1_stack.arr[0]);
    1272:	f7 01       	movw	r30, r14
    1274:	60 81       	ld	r22, Z
    1276:	71 81       	ldd	r23, Z+1	; 0x01
    1278:	07 2e       	mov	r0, r23
    127a:	00 0c       	add	r0, r0
    127c:	88 0b       	sbc	r24, r24
    127e:	99 0b       	sbc	r25, r25
    1280:	0e 94 2d 04 	call	0x85a	; 0x85a <LCD_WriteINTEGER>
			LCD_GoTo(0,9);
    1284:	69 e0       	ldi	r22, 0x09	; 9
    1286:	80 e0       	ldi	r24, 0x00	; 0
    1288:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <LCD_GoTo>
			LCD_WriteINTEGER(T1_stack.arr[1]);
    128c:	d7 01       	movw	r26, r14
    128e:	12 96       	adiw	r26, 0x02	; 2
    1290:	6d 91       	ld	r22, X+
    1292:	7c 91       	ld	r23, X
    1294:	13 97       	sbiw	r26, 0x03	; 3
    1296:	07 2e       	mov	r0, r23
    1298:	00 0c       	add	r0, r0
    129a:	88 0b       	sbc	r24, r24
    129c:	99 0b       	sbc	r25, r25
    129e:	0e 94 2d 04 	call	0x85a	; 0x85a <LCD_WriteINTEGER>
			LCD_GoTo(0,11);
    12a2:	6b e0       	ldi	r22, 0x0B	; 11
    12a4:	80 e0       	ldi	r24, 0x00	; 0
    12a6:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <LCD_GoTo>
			LCD_WriteINTEGER(T1_stack.arr[2]);
    12aa:	f7 01       	movw	r30, r14
    12ac:	64 81       	ldd	r22, Z+4	; 0x04
    12ae:	75 81       	ldd	r23, Z+5	; 0x05
    12b0:	07 2e       	mov	r0, r23
    12b2:	00 0c       	add	r0, r0
    12b4:	88 0b       	sbc	r24, r24
    12b6:	99 0b       	sbc	r25, r25
    12b8:	0e 94 2d 04 	call	0x85a	; 0x85a <LCD_WriteINTEGER>
			LCD_GoTo(0,12);
    12bc:	6c e0       	ldi	r22, 0x0C	; 12
    12be:	80 e0       	ldi	r24, 0x00	; 0
    12c0:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <LCD_GoTo>
			LCD_WriteINTEGER(T1_stack.arr[3]);
    12c4:	d7 01       	movw	r26, r14
    12c6:	16 96       	adiw	r26, 0x06	; 6
    12c8:	6d 91       	ld	r22, X+
    12ca:	7c 91       	ld	r23, X
    12cc:	17 97       	sbiw	r26, 0x07	; 7
    12ce:	07 2e       	mov	r0, r23
    12d0:	00 0c       	add	r0, r0
    12d2:	88 0b       	sbc	r24, r24
    12d4:	99 0b       	sbc	r25, r25
    12d6:	0e 94 2d 04 	call	0x85a	; 0x85a <LCD_WriteINTEGER>
			LCD_GoTo(0,14);
    12da:	6e e0       	ldi	r22, 0x0E	; 14
    12dc:	80 e0       	ldi	r24, 0x00	; 0
    12de:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <LCD_GoTo>
			LCD_WriteINTEGER(T1_stack.arr[4]);
    12e2:	f7 01       	movw	r30, r14
    12e4:	60 85       	ldd	r22, Z+8	; 0x08
    12e6:	71 85       	ldd	r23, Z+9	; 0x09
    12e8:	07 2e       	mov	r0, r23
    12ea:	00 0c       	add	r0, r0
    12ec:	88 0b       	sbc	r24, r24
    12ee:	99 0b       	sbc	r25, r25
    12f0:	0e 94 2d 04 	call	0x85a	; 0x85a <LCD_WriteINTEGER>
			LCD_GoTo(0,15);
    12f4:	6f e0       	ldi	r22, 0x0F	; 15
    12f6:	80 e0       	ldi	r24, 0x00	; 0
    12f8:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <LCD_GoTo>
			LCD_WriteINTEGER(T1_stack.arr[5]);															
    12fc:	d7 01       	movw	r26, r14
    12fe:	1a 96       	adiw	r26, 0x0a	; 10
    1300:	6d 91       	ld	r22, X+
    1302:	7c 91       	ld	r23, X
    1304:	1b 97       	sbiw	r26, 0x0b	; 11
    1306:	07 2e       	mov	r0, r23
    1308:	00 0c       	add	r0, r0
    130a:	88 0b       	sbc	r24, r24
    130c:	99 0b       	sbc	r25, r25
    130e:	0e 94 2d 04 	call	0x85a	; 0x85a <LCD_WriteINTEGER>
			
			
			
			LCD_GoTo(1,8);
    1312:	68 e0       	ldi	r22, 0x08	; 8
    1314:	81 e0       	ldi	r24, 0x01	; 1
    1316:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <LCD_GoTo>
			LCD_WriteINTEGER(T1_stack.arr[6]);
    131a:	f7 01       	movw	r30, r14
    131c:	64 85       	ldd	r22, Z+12	; 0x0c
    131e:	75 85       	ldd	r23, Z+13	; 0x0d
    1320:	07 2e       	mov	r0, r23
    1322:	00 0c       	add	r0, r0
    1324:	88 0b       	sbc	r24, r24
    1326:	99 0b       	sbc	r25, r25
    1328:	0e 94 2d 04 	call	0x85a	; 0x85a <LCD_WriteINTEGER>
			LCD_GoTo(1,9);
    132c:	69 e0       	ldi	r22, 0x09	; 9
    132e:	81 e0       	ldi	r24, 0x01	; 1
    1330:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <LCD_GoTo>
			LCD_WriteINTEGER(T1_stack.arr[7]);
    1334:	d7 01       	movw	r26, r14
    1336:	1e 96       	adiw	r26, 0x0e	; 14
    1338:	6d 91       	ld	r22, X+
    133a:	7c 91       	ld	r23, X
    133c:	1f 97       	sbiw	r26, 0x0f	; 15
    133e:	07 2e       	mov	r0, r23
    1340:	00 0c       	add	r0, r0
    1342:	88 0b       	sbc	r24, r24
    1344:	99 0b       	sbc	r25, r25
    1346:	0e 94 2d 04 	call	0x85a	; 0x85a <LCD_WriteINTEGER>
			LCD_GoTo(1,11);
    134a:	6b e0       	ldi	r22, 0x0B	; 11
    134c:	81 e0       	ldi	r24, 0x01	; 1
    134e:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <LCD_GoTo>
			LCD_WriteINTEGER(T1_stack.arr[8]);
    1352:	f7 01       	movw	r30, r14
    1354:	60 89       	ldd	r22, Z+16	; 0x10
    1356:	71 89       	ldd	r23, Z+17	; 0x11
    1358:	07 2e       	mov	r0, r23
    135a:	00 0c       	add	r0, r0
    135c:	88 0b       	sbc	r24, r24
    135e:	99 0b       	sbc	r25, r25
    1360:	0e 94 2d 04 	call	0x85a	; 0x85a <LCD_WriteINTEGER>
			LCD_GoTo(1,12);
    1364:	6c e0       	ldi	r22, 0x0C	; 12
    1366:	81 e0       	ldi	r24, 0x01	; 1
    1368:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <LCD_GoTo>
			LCD_WriteINTEGER(T1_stack.arr[9]);
    136c:	d7 01       	movw	r26, r14
    136e:	52 96       	adiw	r26, 0x12	; 18
    1370:	6d 91       	ld	r22, X+
    1372:	7c 91       	ld	r23, X
    1374:	53 97       	sbiw	r26, 0x13	; 19
    1376:	07 2e       	mov	r0, r23
    1378:	00 0c       	add	r0, r0
    137a:	88 0b       	sbc	r24, r24
    137c:	99 0b       	sbc	r25, r25
    137e:	0e 94 2d 04 	call	0x85a	; 0x85a <LCD_WriteINTEGER>
			LCD_GoTo(1,14);
    1382:	6e e0       	ldi	r22, 0x0E	; 14
    1384:	81 e0       	ldi	r24, 0x01	; 1
    1386:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <LCD_GoTo>
			LCD_WriteINTEGER(T1_stack.arr[10]);
    138a:	f7 01       	movw	r30, r14
    138c:	64 89       	ldd	r22, Z+20	; 0x14
    138e:	75 89       	ldd	r23, Z+21	; 0x15
    1390:	07 2e       	mov	r0, r23
    1392:	00 0c       	add	r0, r0
    1394:	88 0b       	sbc	r24, r24
    1396:	99 0b       	sbc	r25, r25
    1398:	0e 94 2d 04 	call	0x85a	; 0x85a <LCD_WriteINTEGER>
			LCD_GoTo(1,15);
    139c:	6f e0       	ldi	r22, 0x0F	; 15
    139e:	81 e0       	ldi	r24, 0x01	; 1
    13a0:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <LCD_GoTo>
			LCD_WriteINTEGER(T1_stack.arr[11]);
    13a4:	d7 01       	movw	r26, r14
    13a6:	56 96       	adiw	r26, 0x16	; 22
    13a8:	6d 91       	ld	r22, X+
    13aa:	7c 91       	ld	r23, X
    13ac:	57 97       	sbiw	r26, 0x17	; 23
    13ae:	07 2e       	mov	r0, r23
    13b0:	00 0c       	add	r0, r0
    13b2:	88 0b       	sbc	r24, r24
    13b4:	99 0b       	sbc	r25, r25
    13b6:	0e 94 2d 04 	call	0x85a	; 0x85a <LCD_WriteINTEGER>
				LCD_WriteCHAR('/');
			}
			
			T0_SS_Count = 1;
			TIMER0_Stop();
			T2_SS_Count = 1;
    13ba:	88 24       	eor	r8, r8
    13bc:	83 94       	inc	r8
    13be:	91 2c       	mov	r9, r1
				LCD_WriteCHAR('/');
				LCD_GoTo(0,13);
				LCD_WriteCHAR('/');
			}
			
			T0_SS_Count = 1;
    13c0:	66 24       	eor	r6, r6
    13c2:	63 94       	inc	r6
    13c4:	71 2c       	mov	r7, r1
			LCD_WriteINTEGER(T1_stack.arr[9]);
			LCD_GoTo(1,14);
			LCD_WriteINTEGER(T1_stack.arr[10]);
			LCD_GoTo(1,15);
			LCD_WriteINTEGER(T1_stack.arr[11]);
			break;			
    13c6:	a9 cb       	rjmp	.-2222   	; 0xb1a <main+0x112>
			
			/*Stopwatch mode (Timer 2)*/
			case 'D':
			if (modeD == 0)
    13c8:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__data_end>
    13cc:	90 91 c9 00 	lds	r25, 0x00C9	; 0x8000c9 <__data_end+0x1>
    13d0:	89 2b       	or	r24, r25
    13d2:	e9 f4       	brne	.+58     	; 0x140e <main+0xa06>
			{
				Buzz_Tone1();
    13d4:	0e 94 89 00 	call	0x112	; 0x112 <Buzz_Tone1>
				modeA = 0;
    13d8:	10 92 cf 00 	sts	0x00CF, r1	; 0x8000cf <modeA+0x1>
    13dc:	10 92 ce 00 	sts	0x00CE, r1	; 0x8000ce <modeA>
				modeB = 0;
    13e0:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <modeB+0x1>
    13e4:	10 92 cc 00 	sts	0x00CC, r1	; 0x8000cc <modeB>
				modeC = 0;
    13e8:	10 92 cb 00 	sts	0x00CB, r1	; 0x8000cb <modeC+0x1>
    13ec:	10 92 ca 00 	sts	0x00CA, r1	; 0x8000ca <modeC>
				modeD = 1;
    13f0:	b1 e0       	ldi	r27, 0x01	; 1
    13f2:	b0 93 c8 00 	sts	0x00C8, r27	; 0x8000c8 <__data_end>
    13f6:	10 92 c9 00 	sts	0x00C9, r1	; 0x8000c9 <__data_end+0x1>
				LCD_Clear();
    13fa:	0e 94 00 05 	call	0xa00	; 0xa00 <LCD_Clear>
				
				LCD_GoTo(0,0);
    13fe:	60 e0       	ldi	r22, 0x00	; 0
    1400:	80 e0       	ldi	r24, 0x00	; 0
    1402:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <LCD_GoTo>
				LCD_WriteSTRING(S_str);				
    1406:	ce 01       	movw	r24, r28
    1408:	84 96       	adiw	r24, 0x24	; 36
    140a:	0e 94 17 04 	call	0x82e	; 0x82e <LCD_WriteSTRING>
			}
			
			T0_SS_Count = 1;
			TIMER0_Stop();
    140e:	0e 94 ae 0b 	call	0x175c	; 0x175c <TIMER0_Stop>
			
			if (selector1 == '#')
    1412:	e3 e2       	ldi	r30, 0x23	; 35
    1414:	ae 16       	cp	r10, r30
    1416:	b1 04       	cpc	r11, r1
    1418:	69 f4       	brne	.+26     	; 0x1434 <main+0xa2c>
			{
				Buzz_Tone1();
    141a:	0e 94 89 00 	call	0x112	; 0x112 <Buzz_Tone1>
				T2_SS_Count++;
    141e:	ff ef       	ldi	r31, 0xFF	; 255
    1420:	8f 1a       	sub	r8, r31
    1422:	9f 0a       	sbc	r9, r31
				if (T2_SS_Count % 2 == 0)
    1424:	80 fc       	sbrc	r8, 0
    1426:	03 c0       	rjmp	.+6      	; 0x142e <main+0xa26>
				{				
					TIMER2_Start();
    1428:	0e 94 66 11 	call	0x22cc	; 0x22cc <TIMER2_Start>
    142c:	21 c1       	rjmp	.+578    	; 0x1670 <main+0xc68>
					T2_pause = 2;
				}
				else
				{
					TIMER2_Stop();
    142e:	0e 94 69 11 	call	0x22d2	; 0x22d2 <TIMER2_Stop>
    1432:	27 c0       	rjmp	.+78     	; 0x1482 <main+0xa7a>
					T2_pause = 0;
				}
			}
			else if(BUTTON0_GetPinVal())
    1434:	0e 94 49 00 	call	0x92	; 0x92 <BUTTON0_GetPinVal>
    1438:	88 23       	and	r24, r24
    143a:	01 f1       	breq	.+64     	; 0x147c <main+0xa74>
			{
				Buzz_Tone1();
    143c:	0e 94 89 00 	call	0x112	; 0x112 <Buzz_Tone1>
				T2_SS_Count = 1;
				T2_pause = 2;
				T2_count_sec_0 = 0;
    1440:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <T2_count_sec_0+0x1>
    1444:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <T2_count_sec_0>
				T2_count_sec_1 = 0;
    1448:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <T2_count_sec_1+0x1>
    144c:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <T2_count_sec_1>
				T2_count_min_0 = 0;
    1450:	10 92 ed 00 	sts	0x00ED, r1	; 0x8000ed <T2_count_min_0+0x1>
    1454:	10 92 ec 00 	sts	0x00EC, r1	; 0x8000ec <T2_count_min_0>
				T2_count_min_1 = 0;
    1458:	10 92 eb 00 	sts	0x00EB, r1	; 0x8000eb <T2_count_min_1+0x1>
    145c:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <T2_count_min_1>
				T2_count_h0 = 0;
    1460:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <T2_count_h0+0x1>
    1464:	10 92 e8 00 	sts	0x00E8, r1	; 0x8000e8 <T2_count_h0>
				T2_count_h1 = 0;
    1468:	10 92 e7 00 	sts	0x00E7, r1	; 0x8000e7 <T2_count_h1+0x1>
    146c:	10 92 e6 00 	sts	0x00E6, r1	; 0x8000e6 <T2_count_h1>
				TIMER2_Stop();
    1470:	0e 94 69 11 	call	0x22d2	; 0x22d2 <TIMER2_Stop>
				}
			}
			else if(BUTTON0_GetPinVal())
			{
				Buzz_Tone1();
				T2_SS_Count = 1;
    1474:	88 24       	eor	r8, r8
    1476:	83 94       	inc	r8
    1478:	91 2c       	mov	r9, r1
    147a:	fa c0       	rjmp	.+500    	; 0x1670 <main+0xc68>
				T2_count_min_1 = 0;
				T2_count_h0 = 0;
				T2_count_h1 = 0;
				TIMER2_Stop();
			}
			if (T2_pause == 0)
    147c:	41 14       	cp	r4, r1
    147e:	51 04       	cpc	r5, r1
    1480:	79 f4       	brne	.+30     	; 0x14a0 <main+0xa98>
			{
				LCD_Clear();
    1482:	0e 94 00 05 	call	0xa00	; 0xa00 <LCD_Clear>
    1486:	2f ef       	ldi	r18, 0xFF	; 255
    1488:	37 e8       	ldi	r19, 0x87	; 135
    148a:	83 e1       	ldi	r24, 0x13	; 19
    148c:	21 50       	subi	r18, 0x01	; 1
    148e:	30 40       	sbci	r19, 0x00	; 0
    1490:	80 40       	sbci	r24, 0x00	; 0
    1492:	e1 f7       	brne	.-8      	; 0x148c <main+0xa84>
    1494:	00 c0       	rjmp	.+0      	; 0x1496 <main+0xa8e>
    1496:	00 00       	nop
				_delay_ms(400);
				T2_pause = 1;
    1498:	44 24       	eor	r4, r4
    149a:	43 94       	inc	r4
    149c:	51 2c       	mov	r5, r1
    149e:	7a c0       	rjmp	.+244    	; 0x1594 <main+0xb8c>
			}
			else if (T2_pause == 1)
    14a0:	91 e0       	ldi	r25, 0x01	; 1
    14a2:	49 16       	cp	r4, r25
    14a4:	51 04       	cpc	r5, r1
    14a6:	09 f0       	breq	.+2      	; 0x14aa <main+0xaa2>
    14a8:	75 c0       	rjmp	.+234    	; 0x1594 <main+0xb8c>
			{
				LCD_GoTo(0,0);
    14aa:	60 e0       	ldi	r22, 0x00	; 0
    14ac:	80 e0       	ldi	r24, 0x00	; 0
    14ae:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <LCD_GoTo>
				LCD_WriteSTRING(S_str);				
    14b2:	ce 01       	movw	r24, r28
    14b4:	84 96       	adiw	r24, 0x24	; 36
    14b6:	0e 94 17 04 	call	0x82e	; 0x82e <LCD_WriteSTRING>
				LCD_GoTo(1,10);
    14ba:	6a e0       	ldi	r22, 0x0A	; 10
    14bc:	81 e0       	ldi	r24, 0x01	; 1
    14be:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <LCD_GoTo>
				LCD_WriteCHAR(':');
    14c2:	8a e3       	ldi	r24, 0x3A	; 58
    14c4:	0e 94 d5 03 	call	0x7aa	; 0x7aa <LCD_WriteCHAR>
				LCD_GoTo(1,13);
    14c8:	6d e0       	ldi	r22, 0x0D	; 13
    14ca:	81 e0       	ldi	r24, 0x01	; 1
    14cc:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <LCD_GoTo>
				LCD_WriteCHAR(':');
    14d0:	8a e3       	ldi	r24, 0x3A	; 58
    14d2:	0e 94 d5 03 	call	0x7aa	; 0x7aa <LCD_WriteCHAR>
				
				LCD_GoTo(1,8);
    14d6:	68 e0       	ldi	r22, 0x08	; 8
    14d8:	81 e0       	ldi	r24, 0x01	; 1
    14da:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <LCD_GoTo>
				LCD_WriteINTEGER(T2_count_h1);
    14de:	60 91 e6 00 	lds	r22, 0x00E6	; 0x8000e6 <T2_count_h1>
    14e2:	70 91 e7 00 	lds	r23, 0x00E7	; 0x8000e7 <T2_count_h1+0x1>
    14e6:	07 2e       	mov	r0, r23
    14e8:	00 0c       	add	r0, r0
    14ea:	88 0b       	sbc	r24, r24
    14ec:	99 0b       	sbc	r25, r25
    14ee:	0e 94 2d 04 	call	0x85a	; 0x85a <LCD_WriteINTEGER>
				LCD_GoTo(1,9);
    14f2:	69 e0       	ldi	r22, 0x09	; 9
    14f4:	81 e0       	ldi	r24, 0x01	; 1
    14f6:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <LCD_GoTo>
				LCD_WriteINTEGER(T2_count_h0);
    14fa:	60 91 e8 00 	lds	r22, 0x00E8	; 0x8000e8 <T2_count_h0>
    14fe:	70 91 e9 00 	lds	r23, 0x00E9	; 0x8000e9 <T2_count_h0+0x1>
    1502:	07 2e       	mov	r0, r23
    1504:	00 0c       	add	r0, r0
    1506:	88 0b       	sbc	r24, r24
    1508:	99 0b       	sbc	r25, r25
    150a:	0e 94 2d 04 	call	0x85a	; 0x85a <LCD_WriteINTEGER>
				LCD_GoTo(1,11);
    150e:	6b e0       	ldi	r22, 0x0B	; 11
    1510:	81 e0       	ldi	r24, 0x01	; 1
    1512:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <LCD_GoTo>
				LCD_WriteINTEGER(T2_count_min_1);
    1516:	60 91 ea 00 	lds	r22, 0x00EA	; 0x8000ea <T2_count_min_1>
    151a:	70 91 eb 00 	lds	r23, 0x00EB	; 0x8000eb <T2_count_min_1+0x1>
    151e:	07 2e       	mov	r0, r23
    1520:	00 0c       	add	r0, r0
    1522:	88 0b       	sbc	r24, r24
    1524:	99 0b       	sbc	r25, r25
    1526:	0e 94 2d 04 	call	0x85a	; 0x85a <LCD_WriteINTEGER>
				LCD_GoTo(1,12);
    152a:	6c e0       	ldi	r22, 0x0C	; 12
    152c:	81 e0       	ldi	r24, 0x01	; 1
    152e:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <LCD_GoTo>
				LCD_WriteINTEGER(T2_count_min_0);
    1532:	60 91 ec 00 	lds	r22, 0x00EC	; 0x8000ec <T2_count_min_0>
    1536:	70 91 ed 00 	lds	r23, 0x00ED	; 0x8000ed <T2_count_min_0+0x1>
    153a:	07 2e       	mov	r0, r23
    153c:	00 0c       	add	r0, r0
    153e:	88 0b       	sbc	r24, r24
    1540:	99 0b       	sbc	r25, r25
    1542:	0e 94 2d 04 	call	0x85a	; 0x85a <LCD_WriteINTEGER>
				LCD_GoTo(1,14);
    1546:	6e e0       	ldi	r22, 0x0E	; 14
    1548:	81 e0       	ldi	r24, 0x01	; 1
    154a:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <LCD_GoTo>
				LCD_WriteINTEGER(T2_count_sec_1);
    154e:	60 91 ee 00 	lds	r22, 0x00EE	; 0x8000ee <T2_count_sec_1>
    1552:	70 91 ef 00 	lds	r23, 0x00EF	; 0x8000ef <T2_count_sec_1+0x1>
    1556:	07 2e       	mov	r0, r23
    1558:	00 0c       	add	r0, r0
    155a:	88 0b       	sbc	r24, r24
    155c:	99 0b       	sbc	r25, r25
    155e:	0e 94 2d 04 	call	0x85a	; 0x85a <LCD_WriteINTEGER>
				LCD_GoTo(1,15);
    1562:	6f e0       	ldi	r22, 0x0F	; 15
    1564:	81 e0       	ldi	r24, 0x01	; 1
    1566:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <LCD_GoTo>
				LCD_WriteINTEGER(T2_count_sec_0);
    156a:	60 91 f0 00 	lds	r22, 0x00F0	; 0x8000f0 <T2_count_sec_0>
    156e:	70 91 f1 00 	lds	r23, 0x00F1	; 0x8000f1 <T2_count_sec_0+0x1>
    1572:	07 2e       	mov	r0, r23
    1574:	00 0c       	add	r0, r0
    1576:	88 0b       	sbc	r24, r24
    1578:	99 0b       	sbc	r25, r25
    157a:	0e 94 2d 04 	call	0x85a	; 0x85a <LCD_WriteINTEGER>
    157e:	af ef       	ldi	r26, 0xFF	; 255
    1580:	b7 e8       	ldi	r27, 0x87	; 135
    1582:	e3 e1       	ldi	r30, 0x13	; 19
    1584:	a1 50       	subi	r26, 0x01	; 1
    1586:	b0 40       	sbci	r27, 0x00	; 0
    1588:	e0 40       	sbci	r30, 0x00	; 0
    158a:	e1 f7       	brne	.-8      	; 0x1584 <main+0xb7c>
    158c:	00 c0       	rjmp	.+0      	; 0x158e <main+0xb86>
    158e:	00 00       	nop
				
				_delay_ms(400);
				T2_pause = 0;
    1590:	41 2c       	mov	r4, r1
    1592:	51 2c       	mov	r5, r1
			}
			LCD_GoTo(0,0);
    1594:	60 e0       	ldi	r22, 0x00	; 0
    1596:	80 e0       	ldi	r24, 0x00	; 0
    1598:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <LCD_GoTo>
			LCD_WriteSTRING(S_str);												
    159c:	ce 01       	movw	r24, r28
    159e:	84 96       	adiw	r24, 0x24	; 36
    15a0:	0e 94 17 04 	call	0x82e	; 0x82e <LCD_WriteSTRING>
			LCD_GoTo(1,10);
    15a4:	6a e0       	ldi	r22, 0x0A	; 10
    15a6:	81 e0       	ldi	r24, 0x01	; 1
    15a8:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <LCD_GoTo>
			LCD_WriteCHAR(':');
    15ac:	8a e3       	ldi	r24, 0x3A	; 58
    15ae:	0e 94 d5 03 	call	0x7aa	; 0x7aa <LCD_WriteCHAR>
			LCD_GoTo(1,13);
    15b2:	6d e0       	ldi	r22, 0x0D	; 13
    15b4:	81 e0       	ldi	r24, 0x01	; 1
    15b6:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <LCD_GoTo>
			LCD_WriteCHAR(':');
    15ba:	8a e3       	ldi	r24, 0x3A	; 58
    15bc:	0e 94 d5 03 	call	0x7aa	; 0x7aa <LCD_WriteCHAR>
							
			LCD_GoTo(1,8);
    15c0:	68 e0       	ldi	r22, 0x08	; 8
    15c2:	81 e0       	ldi	r24, 0x01	; 1
    15c4:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <LCD_GoTo>
			LCD_WriteINTEGER(T2_count_h1);
    15c8:	60 91 e6 00 	lds	r22, 0x00E6	; 0x8000e6 <T2_count_h1>
    15cc:	70 91 e7 00 	lds	r23, 0x00E7	; 0x8000e7 <T2_count_h1+0x1>
    15d0:	07 2e       	mov	r0, r23
    15d2:	00 0c       	add	r0, r0
    15d4:	88 0b       	sbc	r24, r24
    15d6:	99 0b       	sbc	r25, r25
    15d8:	0e 94 2d 04 	call	0x85a	; 0x85a <LCD_WriteINTEGER>
			LCD_GoTo(1,9);
    15dc:	69 e0       	ldi	r22, 0x09	; 9
    15de:	81 e0       	ldi	r24, 0x01	; 1
    15e0:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <LCD_GoTo>
			LCD_WriteINTEGER(T2_count_h0);
    15e4:	60 91 e8 00 	lds	r22, 0x00E8	; 0x8000e8 <T2_count_h0>
    15e8:	70 91 e9 00 	lds	r23, 0x00E9	; 0x8000e9 <T2_count_h0+0x1>
    15ec:	07 2e       	mov	r0, r23
    15ee:	00 0c       	add	r0, r0
    15f0:	88 0b       	sbc	r24, r24
    15f2:	99 0b       	sbc	r25, r25
    15f4:	0e 94 2d 04 	call	0x85a	; 0x85a <LCD_WriteINTEGER>
			LCD_GoTo(1,11);
    15f8:	6b e0       	ldi	r22, 0x0B	; 11
    15fa:	81 e0       	ldi	r24, 0x01	; 1
    15fc:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <LCD_GoTo>
			LCD_WriteINTEGER(T2_count_min_1);
    1600:	60 91 ea 00 	lds	r22, 0x00EA	; 0x8000ea <T2_count_min_1>
    1604:	70 91 eb 00 	lds	r23, 0x00EB	; 0x8000eb <T2_count_min_1+0x1>
    1608:	07 2e       	mov	r0, r23
    160a:	00 0c       	add	r0, r0
    160c:	88 0b       	sbc	r24, r24
    160e:	99 0b       	sbc	r25, r25
    1610:	0e 94 2d 04 	call	0x85a	; 0x85a <LCD_WriteINTEGER>
			LCD_GoTo(1,12);
    1614:	6c e0       	ldi	r22, 0x0C	; 12
    1616:	81 e0       	ldi	r24, 0x01	; 1
    1618:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <LCD_GoTo>
			LCD_WriteINTEGER(T2_count_min_0);
    161c:	60 91 ec 00 	lds	r22, 0x00EC	; 0x8000ec <T2_count_min_0>
    1620:	70 91 ed 00 	lds	r23, 0x00ED	; 0x8000ed <T2_count_min_0+0x1>
    1624:	07 2e       	mov	r0, r23
    1626:	00 0c       	add	r0, r0
    1628:	88 0b       	sbc	r24, r24
    162a:	99 0b       	sbc	r25, r25
    162c:	0e 94 2d 04 	call	0x85a	; 0x85a <LCD_WriteINTEGER>
			LCD_GoTo(1,14);
    1630:	6e e0       	ldi	r22, 0x0E	; 14
    1632:	81 e0       	ldi	r24, 0x01	; 1
    1634:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <LCD_GoTo>
			LCD_WriteINTEGER(T2_count_sec_1);
    1638:	60 91 ee 00 	lds	r22, 0x00EE	; 0x8000ee <T2_count_sec_1>
    163c:	70 91 ef 00 	lds	r23, 0x00EF	; 0x8000ef <T2_count_sec_1+0x1>
    1640:	07 2e       	mov	r0, r23
    1642:	00 0c       	add	r0, r0
    1644:	88 0b       	sbc	r24, r24
    1646:	99 0b       	sbc	r25, r25
    1648:	0e 94 2d 04 	call	0x85a	; 0x85a <LCD_WriteINTEGER>
			LCD_GoTo(1,15);
    164c:	6f e0       	ldi	r22, 0x0F	; 15
    164e:	81 e0       	ldi	r24, 0x01	; 1
    1650:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <LCD_GoTo>
			LCD_WriteINTEGER(T2_count_sec_0);			
    1654:	60 91 f0 00 	lds	r22, 0x00F0	; 0x8000f0 <T2_count_sec_0>
    1658:	70 91 f1 00 	lds	r23, 0x00F1	; 0x8000f1 <T2_count_sec_0+0x1>
    165c:	07 2e       	mov	r0, r23
    165e:	00 0c       	add	r0, r0
    1660:	88 0b       	sbc	r24, r24
    1662:	99 0b       	sbc	r25, r25
    1664:	0e 94 2d 04 	call	0x85a	; 0x85a <LCD_WriteINTEGER>
				
				LCD_GoTo(0,0);
				LCD_WriteSTRING(S_str);				
			}
			
			T0_SS_Count = 1;
    1668:	66 24       	eor	r6, r6
    166a:	63 94       	inc	r6
    166c:	71 2c       	mov	r7, r1
			LCD_WriteINTEGER(T2_count_min_0);
			LCD_GoTo(1,14);
			LCD_WriteINTEGER(T2_count_sec_1);
			LCD_GoTo(1,15);
			LCD_WriteINTEGER(T2_count_sec_0);			
			break;
    166e:	55 ca       	rjmp	.-2902   	; 0xb1a <main+0x112>
				LCD_WriteINTEGER(T2_count_sec_1);
				LCD_GoTo(1,15);
				LCD_WriteINTEGER(T2_count_sec_0);
				
				_delay_ms(400);
				T2_pause = 0;
    1670:	68 94       	set
    1672:	44 24       	eor	r4, r4
    1674:	41 f8       	bld	r4, 1
    1676:	51 2c       	mov	r5, r1
    1678:	8d cf       	rjmp	.-230    	; 0x1594 <main+0xb8c>

0000167a <Inv_Stack_INIT>:
}

/*Implementation of Inv_stack functions*/
void Inv_Stack_INIT(Inv_Stack *p)
{
	p->top = 6;
    167a:	26 e0       	ldi	r18, 0x06	; 6
    167c:	30 e0       	ldi	r19, 0x00	; 0
    167e:	fc 01       	movw	r30, r24
    1680:	35 87       	std	Z+13, r19	; 0x0d
    1682:	24 87       	std	Z+12, r18	; 0x0c
    1684:	08 95       	ret

00001686 <Inv_Stack_PUSH>:
}
void Inv_Stack_PUSH(Inv_Stack *p, int data)
{
    1686:	dc 01       	movw	r26, r24
	int i;
	if(p->top > 0)
    1688:	1c 96       	adiw	r26, 0x0c	; 12
    168a:	4d 91       	ld	r20, X+
    168c:	5c 91       	ld	r21, X
    168e:	1d 97       	sbiw	r26, 0x0d	; 13
    1690:	14 16       	cp	r1, r20
    1692:	15 06       	cpc	r1, r21
    1694:	9c f4       	brge	.+38     	; 0x16bc <Inv_Stack_PUSH+0x36>
    1696:	fc 01       	movw	r30, r24
    1698:	0a 96       	adiw	r24, 0x0a	; 10
	{
        for(i = 0; i < 5; i++)
        p->arr[i] = p->arr[i+1];		
    169a:	22 81       	ldd	r18, Z+2	; 0x02
    169c:	33 81       	ldd	r19, Z+3	; 0x03
    169e:	21 93       	st	Z+, r18
    16a0:	31 93       	st	Z+, r19
void Inv_Stack_PUSH(Inv_Stack *p, int data)
{
	int i;
	if(p->top > 0)
	{
        for(i = 0; i < 5; i++)
    16a2:	e8 17       	cp	r30, r24
    16a4:	f9 07       	cpc	r31, r25
    16a6:	c9 f7       	brne	.-14     	; 0x169a <Inv_Stack_PUSH+0x14>
        p->arr[i] = p->arr[i+1];		
		p->top--;
    16a8:	41 50       	subi	r20, 0x01	; 1
    16aa:	51 09       	sbc	r21, r1
    16ac:	1d 96       	adiw	r26, 0x0d	; 13
    16ae:	5c 93       	st	X, r21
    16b0:	4e 93       	st	-X, r20
    16b2:	1c 97       	sbiw	r26, 0x0c	; 12
		p->arr[5] = data;
    16b4:	1b 96       	adiw	r26, 0x0b	; 11
    16b6:	7c 93       	st	X, r23
    16b8:	6e 93       	st	-X, r22
    16ba:	1a 97       	sbiw	r26, 0x0a	; 10
    16bc:	08 95       	ret

000016be <Inv_Stack_Remove>:
}
void Inv_Stack_Remove(Inv_Stack *p)
{
	int i;

	if(p->top < 6)
    16be:	fc 01       	movw	r30, r24
    16c0:	44 85       	ldd	r20, Z+12	; 0x0c
    16c2:	55 85       	ldd	r21, Z+13	; 0x0d
    16c4:	46 30       	cpi	r20, 0x06	; 6
    16c6:	51 05       	cpc	r21, r1
    16c8:	ac f4       	brge	.+42     	; 0x16f4 <Inv_Stack_Remove+0x36>
    16ca:	3a 96       	adiw	r30, 0x0a	; 10
    16cc:	bc 01       	movw	r22, r24
	{
        for(i = 5; i > 0; i--)
        p->arr[i] = p->arr[i-1];		
    16ce:	32 91       	ld	r19, -Z
    16d0:	22 91       	ld	r18, -Z
    16d2:	33 83       	std	Z+3, r19	; 0x03
    16d4:	22 83       	std	Z+2, r18	; 0x02
{
	int i;

	if(p->top < 6)
	{
        for(i = 5; i > 0; i--)
    16d6:	e6 17       	cp	r30, r22
    16d8:	f7 07       	cpc	r31, r23
    16da:	c9 f7       	brne	.-14     	; 0x16ce <Inv_Stack_Remove+0x10>
        p->arr[i] = p->arr[i-1];		
		p->arr[p->top] = 0;
    16dc:	fa 01       	movw	r30, r20
    16de:	ee 0f       	add	r30, r30
    16e0:	ff 1f       	adc	r31, r31
    16e2:	e8 0f       	add	r30, r24
    16e4:	f9 1f       	adc	r31, r25
    16e6:	11 82       	std	Z+1, r1	; 0x01
    16e8:	10 82       	st	Z, r1
		p->top++;
    16ea:	4f 5f       	subi	r20, 0xFF	; 255
    16ec:	5f 4f       	sbci	r21, 0xFF	; 255
    16ee:	fc 01       	movw	r30, r24
    16f0:	55 87       	std	Z+13, r21	; 0x0d
    16f2:	44 87       	std	Z+12, r20	; 0x0c
    16f4:	08 95       	ret

000016f6 <Stack_INIT>:
	}
}
/*Implementation of Stack functions*/
void Stack_INIT(Stack *p)
{
	p->top = -1;
    16f6:	2f ef       	ldi	r18, 0xFF	; 255
    16f8:	3f ef       	ldi	r19, 0xFF	; 255
    16fa:	fc 01       	movw	r30, r24
    16fc:	31 8f       	std	Z+25, r19	; 0x19
    16fe:	20 8f       	std	Z+24, r18	; 0x18
    1700:	08 95       	ret

00001702 <Stack_PUSH>:
}
void Stack_PUSH(Stack *p, int data)
{
	if(p->top < 11)
    1702:	fc 01       	movw	r30, r24
    1704:	20 8d       	ldd	r18, Z+24	; 0x18
    1706:	31 8d       	ldd	r19, Z+25	; 0x19
    1708:	2b 30       	cpi	r18, 0x0B	; 11
    170a:	31 05       	cpc	r19, r1
    170c:	54 f4       	brge	.+20     	; 0x1722 <Stack_PUSH+0x20>
	{
		p->top++;
    170e:	2f 5f       	subi	r18, 0xFF	; 255
    1710:	3f 4f       	sbci	r19, 0xFF	; 255
    1712:	31 8f       	std	Z+25, r19	; 0x19
    1714:	20 8f       	std	Z+24, r18	; 0x18
		p->arr[p->top] = data;
    1716:	22 0f       	add	r18, r18
    1718:	33 1f       	adc	r19, r19
    171a:	e2 0f       	add	r30, r18
    171c:	f3 1f       	adc	r31, r19
    171e:	71 83       	std	Z+1, r23	; 0x01
    1720:	60 83       	st	Z, r22
    1722:	08 95       	ret

00001724 <Stack_Remove>:
	}
}
void Stack_Remove(Stack *p)
{
	if(p->top > -1)
    1724:	fc 01       	movw	r30, r24
    1726:	20 8d       	ldd	r18, Z+24	; 0x18
    1728:	31 8d       	ldd	r19, Z+25	; 0x19
    172a:	33 23       	and	r19, r19
    172c:	64 f0       	brlt	.+24     	; 0x1746 <Stack_Remove+0x22>
	{
		p->arr[p->top] = 0;
    172e:	f9 01       	movw	r30, r18
    1730:	ee 0f       	add	r30, r30
    1732:	ff 1f       	adc	r31, r31
    1734:	e8 0f       	add	r30, r24
    1736:	f9 1f       	adc	r31, r25
    1738:	11 82       	std	Z+1, r1	; 0x01
    173a:	10 82       	st	Z, r1
		p->top--;
    173c:	21 50       	subi	r18, 0x01	; 1
    173e:	31 09       	sbc	r19, r1
    1740:	fc 01       	movw	r30, r24
    1742:	31 8f       	std	Z+25, r19	; 0x19
    1744:	20 8f       	std	Z+24, r18	; 0x18
    1746:	08 95       	ret

00001748 <TIMER0_INIT>:
///////////////****************************Timer0 functions****************************///////////////

void TIMER0_INIT(void)
{
	/*Global Interrupt*/
	SREG = GLOBAL_INT << 7;	
    1748:	80 e8       	ldi	r24, 0x80	; 128
    174a:	8f bf       	out	0x3f, r24	; 63
	
	/*Peripheral Interrupt*/
	#if TIMER0_MODE == NORMAL_MODE
	TIMSK = TIMER0_OVF_INT | (TIMSK & 0xd4);
    174c:	89 b7       	in	r24, 0x39	; 57
    174e:	84 7d       	andi	r24, 0xD4	; 212
    1750:	81 60       	ori	r24, 0x01	; 1
    1752:	89 bf       	out	0x39, r24	; 57
    1754:	08 95       	ret

00001756 <TIMER0_Start>:

	
}
void TIMER0_Start(void)
{
	TCCR0 = TIMER0_CLOCK;
    1756:	85 e0       	ldi	r24, 0x05	; 5
    1758:	83 bf       	out	0x33, r24	; 51
    175a:	08 95       	ret

0000175c <TIMER0_Stop>:
}
void TIMER0_Stop(void)
{
	TCCR0 = T0_NO_CLOCK;
    175c:	13 be       	out	0x33, r1	; 51
    175e:	08 95       	ret

00001760 <TIMER0_SetDelay>:
}
void TIMER0_SetDelay(Uint32 delay)
{
    1760:	4f 92       	push	r4
    1762:	5f 92       	push	r5
    1764:	6f 92       	push	r6
    1766:	7f 92       	push	r7
    1768:	8f 92       	push	r8
    176a:	9f 92       	push	r9
    176c:	af 92       	push	r10
    176e:	bf 92       	push	r11
    1770:	cf 92       	push	r12
    1772:	df 92       	push	r13
    1774:	ef 92       	push	r14
    1776:	ff 92       	push	r15
    1778:	0f 93       	push	r16
    177a:	1f 93       	push	r17
    177c:	cf 93       	push	r28
    177e:	df 93       	push	r29
    1780:	cd b7       	in	r28, 0x3d	; 61
    1782:	de b7       	in	r29, 0x3e	; 62
    1784:	2a 97       	sbiw	r28, 0x0a	; 10
    1786:	0f b6       	in	r0, 0x3f	; 63
    1788:	f8 94       	cli
    178a:	de bf       	out	0x3e, r29	; 62
    178c:	0f be       	out	0x3f, r0	; 63
    178e:	cd bf       	out	0x3d, r28	; 61
    1790:	9b 01       	movw	r18, r22
    1792:	ac 01       	movw	r20, r24
	Uint8 Tick_time, check = 1;
	Uint32 i; 
	Uint32 Tick_num;
	Uint8 OVF_buf; //variable to store the possible number of overflows
	Tick_time = 1024 / 16; //tick_time in micro seconds 
	Tick_num = (delay * 1000) / Tick_time; //total number of ticks needed to generate our time
    1794:	a8 ee       	ldi	r26, 0xE8	; 232
    1796:	b3 e0       	ldi	r27, 0x03	; 3
    1798:	0e 94 b9 13 	call	0x2772	; 0x2772 <__muluhisi3>
    179c:	6d 83       	std	Y+5, r22	; 0x05
    179e:	7e 83       	std	Y+6, r23	; 0x06
    17a0:	8f 83       	std	Y+7, r24	; 0x07
    17a2:	98 87       	std	Y+8, r25	; 0x08
    17a4:	2b 01       	movw	r4, r22
    17a6:	3c 01       	movw	r6, r24
    17a8:	68 94       	set
    17aa:	15 f8       	bld	r1, 5
    17ac:	76 94       	lsr	r7
    17ae:	67 94       	ror	r6
    17b0:	57 94       	ror	r5
    17b2:	47 94       	ror	r4
    17b4:	16 94       	lsr	r1
    17b6:	d1 f7       	brne	.-12     	; 0x17ac <TIMER0_SetDelay+0x4c>
	
	//Normal mode 
	#if TIMER0_MODE == NORMAL_MODE
	//case of tick_num is less than 256 (16.4 ms)
	if (Tick_num <= 256)
    17b8:	21 e0       	ldi	r18, 0x01	; 1
    17ba:	42 16       	cp	r4, r18
    17bc:	52 06       	cpc	r5, r18
    17be:	61 04       	cpc	r6, r1
    17c0:	71 04       	cpc	r7, r1
    17c2:	90 f4       	brcc	.+36     	; 0x17e8 <TIMER0_SetDelay+0x88>
	{
		T0_Init_val = 256 - Tick_num; 
    17c4:	80 e0       	ldi	r24, 0x00	; 0
    17c6:	91 e0       	ldi	r25, 0x01	; 1
    17c8:	a0 e0       	ldi	r26, 0x00	; 0
    17ca:	b0 e0       	ldi	r27, 0x00	; 0
    17cc:	84 19       	sub	r24, r4
    17ce:	95 09       	sbc	r25, r5
    17d0:	a6 09       	sbc	r26, r6
    17d2:	b7 09       	sbc	r27, r7
    17d4:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <T0_Init_val>
    17d8:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <T0_Init_val+0x1>
    17dc:	a0 93 36 01 	sts	0x0136, r26	; 0x800136 <T0_Init_val+0x2>
    17e0:	b0 93 37 01 	sts	0x0137, r27	; 0x800137 <T0_Init_val+0x3>
		TCNT0 = T0_Init_val;
    17e4:	82 bf       	out	0x32, r24	; 50
    17e6:	90 c0       	rjmp	.+288    	; 0x1908 <TIMER0_SetDelay+0x1a8>
    17e8:	0f 2e       	mov	r0, r31
    17ea:	fe e7       	ldi	r31, 0x7E	; 126
    17ec:	8f 2e       	mov	r8, r31
    17ee:	91 2c       	mov	r9, r1
    17f0:	a1 2c       	mov	r10, r1
    17f2:	b1 2c       	mov	r11, r1
    17f4:	f0 2d       	mov	r31, r0
    17f6:	11 e0       	ldi	r17, 0x01	; 1
    17f8:	c1 2c       	mov	r12, r1
    17fa:	d1 2c       	mov	r13, r1
    17fc:	76 01       	movw	r14, r12
    17fe:	d3 94       	inc	r13
			{
				T0_OVF_No = Tick_num / i;
				T0_Init_val = 256 - i; //initial value at the first OVF
				T0_Init_val_OVF = 256 - i; //initialize value at the rest of OVF
				TCNT0 = T0_Init_val; //initializing the TCNT0 with Init_val
				check = 0; //variable to use in checking of number of OVF being integer or decimal
    1800:	00 e0       	ldi	r16, 0x00	; 0
	//case of tick_num is bigger than 256 (16.4 ms)
	else
	{
		for (i = 130; i <= 256; i++) //check if the number of overflows is integer
		{
			OVF_buf = Tick_num / i; //buffer to store the number of OVF at every register size
    1802:	c3 01       	movw	r24, r6
    1804:	b2 01       	movw	r22, r4
    1806:	a7 01       	movw	r20, r14
    1808:	96 01       	movw	r18, r12
    180a:	28 19       	sub	r18, r8
    180c:	39 09       	sbc	r19, r9
    180e:	4a 09       	sbc	r20, r10
    1810:	5b 09       	sbc	r21, r11
    1812:	29 83       	std	Y+1, r18	; 0x01
    1814:	3a 83       	std	Y+2, r19	; 0x02
    1816:	4b 83       	std	Y+3, r20	; 0x03
    1818:	5c 83       	std	Y+4, r21	; 0x04
    181a:	0e 94 97 13 	call	0x272e	; 0x272e <__udivmodsi4>
    181e:	e2 2f       	mov	r30, r18
    1820:	3a 87       	std	Y+10, r19	; 0x0a
    1822:	49 87       	std	Y+9, r20	; 0x09
    1824:	f5 2f       	mov	r31, r21
			if (Tick_num == (OVF_buf * i)) 
    1826:	a2 2f       	mov	r26, r18
    1828:	b0 e0       	ldi	r27, 0x00	; 0
    182a:	29 81       	ldd	r18, Y+1	; 0x01
    182c:	3a 81       	ldd	r19, Y+2	; 0x02
    182e:	4b 81       	ldd	r20, Y+3	; 0x03
    1830:	5c 81       	ldd	r21, Y+4	; 0x04
    1832:	0e 94 b9 13 	call	0x2772	; 0x2772 <__muluhisi3>
    1836:	46 16       	cp	r4, r22
    1838:	57 06       	cpc	r5, r23
    183a:	68 06       	cpc	r6, r24
    183c:	79 06       	cpc	r7, r25
    183e:	e1 f4       	brne	.+56     	; 0x1878 <TIMER0_SetDelay+0x118>
			{
				T0_OVF_No = Tick_num / i;
    1840:	e0 93 96 00 	sts	0x0096, r30	; 0x800096 <T0_OVF_No>
    1844:	3a 85       	ldd	r19, Y+10	; 0x0a
    1846:	30 93 97 00 	sts	0x0097, r19	; 0x800097 <T0_OVF_No+0x1>
    184a:	49 85       	ldd	r20, Y+9	; 0x09
    184c:	40 93 98 00 	sts	0x0098, r20	; 0x800098 <T0_OVF_No+0x2>
    1850:	f0 93 99 00 	sts	0x0099, r31	; 0x800099 <T0_OVF_No+0x3>
				T0_Init_val = 256 - i; //initial value at the first OVF
    1854:	80 92 34 01 	sts	0x0134, r8	; 0x800134 <T0_Init_val>
    1858:	90 92 35 01 	sts	0x0135, r9	; 0x800135 <T0_Init_val+0x1>
    185c:	a0 92 36 01 	sts	0x0136, r10	; 0x800136 <T0_Init_val+0x2>
    1860:	b0 92 37 01 	sts	0x0137, r11	; 0x800137 <T0_Init_val+0x3>
				T0_Init_val_OVF = 256 - i; //initialize value at the rest of OVF
    1864:	80 92 1a 01 	sts	0x011A, r8	; 0x80011a <T0_Init_val_OVF>
    1868:	90 92 1b 01 	sts	0x011B, r9	; 0x80011b <T0_Init_val_OVF+0x1>
    186c:	a0 92 1c 01 	sts	0x011C, r10	; 0x80011c <T0_Init_val_OVF+0x2>
    1870:	b0 92 1d 01 	sts	0x011D, r11	; 0x80011d <T0_Init_val_OVF+0x3>
				TCNT0 = T0_Init_val; //initializing the TCNT0 with Init_val
    1874:	82 be       	out	0x32, r8	; 50
				check = 0; //variable to use in checking of number of OVF being integer or decimal
    1876:	10 2f       	mov	r17, r16
    1878:	51 e0       	ldi	r21, 0x01	; 1
    187a:	85 1a       	sub	r8, r21
    187c:	91 08       	sbc	r9, r1
    187e:	a1 08       	sbc	r10, r1
    1880:	b1 08       	sbc	r11, r1
		TCNT0 = T0_Init_val;
	}
	//case of tick_num is bigger than 256 (16.4 ms)
	else
	{
		for (i = 130; i <= 256; i++) //check if the number of overflows is integer
    1882:	8f ef       	ldi	r24, 0xFF	; 255
    1884:	88 16       	cp	r8, r24
    1886:	98 06       	cpc	r9, r24
    1888:	a8 06       	cpc	r10, r24
    188a:	b8 06       	cpc	r11, r24
    188c:	09 f0       	breq	.+2      	; 0x1890 <TIMER0_SetDelay+0x130>
    188e:	b9 cf       	rjmp	.-142    	; 0x1802 <TIMER0_SetDelay+0xa2>
				TCNT0 = T0_Init_val; //initializing the TCNT0 with Init_val
				check = 0; //variable to use in checking of number of OVF being integer or decimal
			}
		}
		//
		if (check) //check if the number of OVF is decimal
    1890:	11 23       	and	r17, r17
    1892:	d1 f1       	breq	.+116    	; 0x1908 <TIMER0_SetDelay+0x1a8>
		{
			T0_OVF_No += Tick_num / 256;
    1894:	8d 81       	ldd	r24, Y+5	; 0x05
    1896:	9e 81       	ldd	r25, Y+6	; 0x06
    1898:	af 81       	ldd	r26, Y+7	; 0x07
    189a:	b8 85       	ldd	r27, Y+8	; 0x08
    189c:	07 2e       	mov	r0, r23
    189e:	7e e0       	ldi	r23, 0x0E	; 14
    18a0:	b6 95       	lsr	r27
    18a2:	a7 95       	ror	r26
    18a4:	97 95       	ror	r25
    18a6:	87 95       	ror	r24
    18a8:	7a 95       	dec	r23
    18aa:	d1 f7       	brne	.-12     	; 0x18a0 <TIMER0_SetDelay+0x140>
    18ac:	70 2d       	mov	r23, r0
    18ae:	40 91 96 00 	lds	r20, 0x0096	; 0x800096 <T0_OVF_No>
    18b2:	50 91 97 00 	lds	r21, 0x0097	; 0x800097 <T0_OVF_No+0x1>
    18b6:	60 91 98 00 	lds	r22, 0x0098	; 0x800098 <T0_OVF_No+0x2>
    18ba:	70 91 99 00 	lds	r23, 0x0099	; 0x800099 <T0_OVF_No+0x3>
    18be:	84 0f       	add	r24, r20
    18c0:	95 1f       	adc	r25, r21
    18c2:	a6 1f       	adc	r26, r22
    18c4:	b7 1f       	adc	r27, r23
    18c6:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <T0_OVF_No>
    18ca:	90 93 97 00 	sts	0x0097, r25	; 0x800097 <T0_OVF_No+0x1>
    18ce:	a0 93 98 00 	sts	0x0098, r26	; 0x800098 <T0_OVF_No+0x2>
    18d2:	b0 93 99 00 	sts	0x0099, r27	; 0x800099 <T0_OVF_No+0x3>
			T0_Init_val = 256 - (Tick_num % 256);
    18d6:	80 e0       	ldi	r24, 0x00	; 0
    18d8:	91 e0       	ldi	r25, 0x01	; 1
    18da:	a0 e0       	ldi	r26, 0x00	; 0
    18dc:	b0 e0       	ldi	r27, 0x00	; 0
    18de:	84 19       	sub	r24, r4
    18e0:	91 09       	sbc	r25, r1
    18e2:	a1 09       	sbc	r26, r1
    18e4:	b1 09       	sbc	r27, r1
    18e6:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <T0_Init_val>
    18ea:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <T0_Init_val+0x1>
    18ee:	a0 93 36 01 	sts	0x0136, r26	; 0x800136 <T0_Init_val+0x2>
    18f2:	b0 93 37 01 	sts	0x0137, r27	; 0x800137 <T0_Init_val+0x3>
			T0_Init_val_OVF = 0;
    18f6:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <T0_Init_val_OVF>
    18fa:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <T0_Init_val_OVF+0x1>
    18fe:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <T0_Init_val_OVF+0x2>
    1902:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <T0_Init_val_OVF+0x3>
			TCNT0 = T0_Init_val; //initializing the TCNT0	
    1906:	82 bf       	out	0x32, r24	; 50
			OCR0 = T0_Init_val;
		}
	}
#endif

}
    1908:	2a 96       	adiw	r28, 0x0a	; 10
    190a:	0f b6       	in	r0, 0x3f	; 63
    190c:	f8 94       	cli
    190e:	de bf       	out	0x3e, r29	; 62
    1910:	0f be       	out	0x3f, r0	; 63
    1912:	cd bf       	out	0x3d, r28	; 61
    1914:	df 91       	pop	r29
    1916:	cf 91       	pop	r28
    1918:	1f 91       	pop	r17
    191a:	0f 91       	pop	r16
    191c:	ff 90       	pop	r15
    191e:	ef 90       	pop	r14
    1920:	df 90       	pop	r13
    1922:	cf 90       	pop	r12
    1924:	bf 90       	pop	r11
    1926:	af 90       	pop	r10
    1928:	9f 90       	pop	r9
    192a:	8f 90       	pop	r8
    192c:	7f 90       	pop	r7
    192e:	6f 90       	pop	r6
    1930:	5f 90       	pop	r5
    1932:	4f 90       	pop	r4
    1934:	08 95       	ret

00001936 <__vector_11>:
ISR(TIMER0_OVF_vect)
{
    1936:	1f 92       	push	r1
    1938:	0f 92       	push	r0
    193a:	0f b6       	in	r0, 0x3f	; 63
    193c:	0f 92       	push	r0
    193e:	11 24       	eor	r1, r1
    1940:	2f 93       	push	r18
    1942:	3f 93       	push	r19
    1944:	4f 93       	push	r20
    1946:	5f 93       	push	r21
    1948:	6f 93       	push	r22
    194a:	7f 93       	push	r23
    194c:	8f 93       	push	r24
    194e:	9f 93       	push	r25
    1950:	af 93       	push	r26
    1952:	bf 93       	push	r27
    1954:	ef 93       	push	r30
    1956:	ff 93       	push	r31
	static int count_0 = 0; //counter to count the number of overflows
	count_0++;
    1958:	80 91 e4 00 	lds	r24, 0x00E4	; 0x8000e4 <count_0.1758>
    195c:	90 91 e5 00 	lds	r25, 0x00E5	; 0x8000e5 <count_0.1758+0x1>
    1960:	01 96       	adiw	r24, 0x01	; 1
    1962:	90 93 e5 00 	sts	0x00E5, r25	; 0x8000e5 <count_0.1758+0x1>
    1966:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <count_0.1758>
	if (T0_OVF_No == 1)
    196a:	40 91 96 00 	lds	r20, 0x0096	; 0x800096 <T0_OVF_No>
    196e:	50 91 97 00 	lds	r21, 0x0097	; 0x800097 <T0_OVF_No+0x1>
    1972:	60 91 98 00 	lds	r22, 0x0098	; 0x800098 <T0_OVF_No+0x2>
    1976:	70 91 99 00 	lds	r23, 0x0099	; 0x800099 <T0_OVF_No+0x3>
    197a:	41 30       	cpi	r20, 0x01	; 1
    197c:	51 05       	cpc	r21, r1
    197e:	61 05       	cpc	r22, r1
    1980:	71 05       	cpc	r23, r1
    1982:	59 f4       	brne	.+22     	; 0x199a <__vector_11+0x64>
	{
		if (count_0 == T0_OVF_No)
    1984:	01 97       	sbiw	r24, 0x01	; 1
    1986:	09 f0       	breq	.+2      	; 0x198a <__vector_11+0x54>
    1988:	25 c1       	rjmp	.+586    	; 0x1bd4 <__vector_11+0x29e>
		{
			//write your code here
		
			count_0 = 0;
    198a:	10 92 e5 00 	sts	0x00E5, r1	; 0x8000e5 <count_0.1758+0x1>
    198e:	10 92 e4 00 	sts	0x00E4, r1	; 0x8000e4 <count_0.1758>
			TCNT0 = T0_Init_val;
    1992:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <T0_Init_val>
    1996:	82 bf       	out	0x32, r24	; 50
    1998:	1d c1       	rjmp	.+570    	; 0x1bd4 <__vector_11+0x29e>
		}
	}
	else
	{
		if (count_0 == 1)
    199a:	81 30       	cpi	r24, 0x01	; 1
    199c:	91 05       	cpc	r25, r1
    199e:	21 f4       	brne	.+8      	; 0x19a8 <__vector_11+0x72>
		{
			TCNT0 = T0_Init_val_OVF;
    19a0:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <T0_Init_val_OVF>
    19a4:	82 bf       	out	0x32, r24	; 50
    19a6:	16 c1       	rjmp	.+556    	; 0x1bd4 <__vector_11+0x29e>
		}
		else if (count_0 == T0_OVF_No)
    19a8:	09 2e       	mov	r0, r25
    19aa:	00 0c       	add	r0, r0
    19ac:	aa 0b       	sbc	r26, r26
    19ae:	bb 0b       	sbc	r27, r27
    19b0:	48 17       	cp	r20, r24
    19b2:	59 07       	cpc	r21, r25
    19b4:	6a 07       	cpc	r22, r26
    19b6:	7b 07       	cpc	r23, r27
    19b8:	09 f0       	breq	.+2      	; 0x19bc <__vector_11+0x86>
    19ba:	0c c1       	rjmp	.+536    	; 0x1bd4 <__vector_11+0x29e>
		{
			//write your code here
			T0_stack.arr[5]--;
    19bc:	e6 e2       	ldi	r30, 0x26	; 38
    19be:	f1 e0       	ldi	r31, 0x01	; 1
    19c0:	82 85       	ldd	r24, Z+10	; 0x0a
    19c2:	93 85       	ldd	r25, Z+11	; 0x0b
    19c4:	01 97       	sbiw	r24, 0x01	; 1
    19c6:	93 87       	std	Z+11, r25	; 0x0b
    19c8:	82 87       	std	Z+10, r24	; 0x0a
			
			if(T0_stack.arr[5] < 0)
    19ca:	99 23       	and	r25, r25
    19cc:	0c f0       	brlt	.+2      	; 0x19d0 <__vector_11+0x9a>
    19ce:	d0 c0       	rjmp	.+416    	; 0x1b70 <__vector_11+0x23a>
			{
				if ((T0_stack.arr[0] > 0) || (T0_stack.arr[1] > 0) || (T0_stack.arr[2] > 0) || (T0_stack.arr[3] > 0) || (T0_stack.arr[4] > 0))
    19d0:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <T0_stack>
    19d4:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <T0_stack+0x1>
    19d8:	18 16       	cp	r1, r24
    19da:	19 06       	cpc	r1, r25
    19dc:	e4 f0       	brlt	.+56     	; 0x1a16 <__vector_11+0xe0>
    19de:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <T0_stack+0x2>
    19e2:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <T0_stack+0x3>
    19e6:	18 16       	cp	r1, r24
    19e8:	19 06       	cpc	r1, r25
    19ea:	ac f0       	brlt	.+42     	; 0x1a16 <__vector_11+0xe0>
    19ec:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <T0_stack+0x4>
    19f0:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <T0_stack+0x5>
    19f4:	18 16       	cp	r1, r24
    19f6:	19 06       	cpc	r1, r25
    19f8:	74 f0       	brlt	.+28     	; 0x1a16 <__vector_11+0xe0>
    19fa:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <T0_stack+0x6>
    19fe:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <T0_stack+0x7>
    1a02:	18 16       	cp	r1, r24
    1a04:	19 06       	cpc	r1, r25
    1a06:	3c f0       	brlt	.+14     	; 0x1a16 <__vector_11+0xe0>
    1a08:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <T0_stack+0x8>
    1a0c:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <T0_stack+0x9>
    1a10:	18 16       	cp	r1, r24
    1a12:	19 06       	cpc	r1, r25
    1a14:	64 f4       	brge	.+24     	; 0x1a2e <__vector_11+0xf8>
				{
					T0_stack.arr[5] = 9;
    1a16:	e6 e2       	ldi	r30, 0x26	; 38
    1a18:	f1 e0       	ldi	r31, 0x01	; 1
    1a1a:	89 e0       	ldi	r24, 0x09	; 9
    1a1c:	90 e0       	ldi	r25, 0x00	; 0
    1a1e:	93 87       	std	Z+11, r25	; 0x0b
    1a20:	82 87       	std	Z+10, r24	; 0x0a
					T0_stack.arr[4]--;
    1a22:	80 85       	ldd	r24, Z+8	; 0x08
    1a24:	91 85       	ldd	r25, Z+9	; 0x09
    1a26:	01 97       	sbiw	r24, 0x01	; 1
    1a28:	91 87       	std	Z+9, r25	; 0x09
    1a2a:	80 87       	std	Z+8, r24	; 0x08
    1a2c:	15 c0       	rjmp	.+42     	; 0x1a58 <__vector_11+0x122>
				}
				else
				{
					T0_stack.arr[5] = 0;
    1a2e:	e6 e2       	ldi	r30, 0x26	; 38
    1a30:	f1 e0       	ldi	r31, 0x01	; 1
    1a32:	13 86       	std	Z+11, r1	; 0x0b
    1a34:	12 86       	std	Z+10, r1	; 0x0a
					T0_stack.top = 6;
    1a36:	86 e0       	ldi	r24, 0x06	; 6
    1a38:	90 e0       	ldi	r25, 0x00	; 0
    1a3a:	95 87       	std	Z+13, r25	; 0x0d
    1a3c:	84 87       	std	Z+12, r24	; 0x0c
					T0_guard = 0;
    1a3e:	10 92 d3 00 	sts	0x00D3, r1	; 0x8000d3 <T0_guard+0x1>
    1a42:	10 92 d2 00 	sts	0x00D2, r1	; 0x8000d2 <T0_guard>
					T0_pause = 0;
    1a46:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <T0_pause+0x1>
    1a4a:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <T0_pause>
					T0_clock_starter = 0;
    1a4e:	10 92 d1 00 	sts	0x00D1, r1	; 0x8000d1 <T0_clock_starter+0x1>
    1a52:	10 92 d0 00 	sts	0x00D0, r1	; 0x8000d0 <T0_clock_starter>
{
	TCCR0 = TIMER0_CLOCK;
}
void TIMER0_Stop(void)
{
	TCCR0 = T0_NO_CLOCK;
    1a56:	13 be       	out	0x33, r1	; 51
					T0_pause = 0;
					T0_clock_starter = 0;
					TIMER0_Stop();
				}

				if(T0_stack.arr[4] < 0)
    1a58:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <T0_stack+0x8>
    1a5c:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <T0_stack+0x9>
    1a60:	99 23       	and	r25, r25
    1a62:	0c f0       	brlt	.+2      	; 0x1a66 <__vector_11+0x130>
    1a64:	85 c0       	rjmp	.+266    	; 0x1b70 <__vector_11+0x23a>
				{
					if ((T0_stack.arr[0] > 0) || (T0_stack.arr[1] > 0) || (T0_stack.arr[2] > 0) || (T0_stack.arr[3] > 0))
    1a66:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <T0_stack>
    1a6a:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <T0_stack+0x1>
    1a6e:	18 16       	cp	r1, r24
    1a70:	19 06       	cpc	r1, r25
    1a72:	0c f4       	brge	.+2      	; 0x1a76 <__vector_11+0x140>
    1a74:	9c c0       	rjmp	.+312    	; 0x1bae <__vector_11+0x278>
    1a76:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <T0_stack+0x2>
    1a7a:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <T0_stack+0x3>
    1a7e:	18 16       	cp	r1, r24
    1a80:	19 06       	cpc	r1, r25
    1a82:	0c f4       	brge	.+2      	; 0x1a86 <__vector_11+0x150>
    1a84:	86 c0       	rjmp	.+268    	; 0x1b92 <__vector_11+0x25c>
    1a86:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <T0_stack+0x4>
    1a8a:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <T0_stack+0x5>
    1a8e:	18 16       	cp	r1, r24
    1a90:	19 06       	cpc	r1, r25
    1a92:	0c f4       	brge	.+2      	; 0x1a96 <__vector_11+0x160>
    1a94:	7e c0       	rjmp	.+252    	; 0x1b92 <__vector_11+0x25c>
    1a96:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <T0_stack+0x6>
    1a9a:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <T0_stack+0x7>
    1a9e:	18 16       	cp	r1, r24
    1aa0:	19 06       	cpc	r1, r25
    1aa2:	0c f4       	brge	.+2      	; 0x1aa6 <__vector_11+0x170>
    1aa4:	76 c0       	rjmp	.+236    	; 0x1b92 <__vector_11+0x25c>
						T0_stack.arr[4] = 5;
						T0_stack.arr[3]--;
					}
					else
					{
						T0_stack.arr[4] = 0;
    1aa6:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <T0_stack+0x9>
    1aaa:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <T0_stack+0x8>
					}

					if(T0_stack.arr[3] < 0)
    1aae:	99 23       	and	r25, r25
    1ab0:	0c f0       	brlt	.+2      	; 0x1ab4 <__vector_11+0x17e>
    1ab2:	5e c0       	rjmp	.+188    	; 0x1b70 <__vector_11+0x23a>
					{
						if ((T0_stack.arr[0] > 0) || (T0_stack.arr[1] > 0) || (T0_stack.arr[2] > 0))
    1ab4:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <T0_stack+0x4>
    1ab8:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <T0_stack+0x5>
    1abc:	18 16       	cp	r1, r24
    1abe:	19 06       	cpc	r1, r25
    1ac0:	7c f4       	brge	.+30     	; 0x1ae0 <__vector_11+0x1aa>
						{
							T0_stack.arr[3] = 9;
    1ac2:	e6 e2       	ldi	r30, 0x26	; 38
    1ac4:	f1 e0       	ldi	r31, 0x01	; 1
    1ac6:	89 e0       	ldi	r24, 0x09	; 9
    1ac8:	90 e0       	ldi	r25, 0x00	; 0
    1aca:	97 83       	std	Z+7, r25	; 0x07
    1acc:	86 83       	std	Z+6, r24	; 0x06
							T0_stack.arr[2]--;
    1ace:	84 81       	ldd	r24, Z+4	; 0x04
    1ad0:	95 81       	ldd	r25, Z+5	; 0x05
    1ad2:	01 97       	sbiw	r24, 0x01	; 1
    1ad4:	95 83       	std	Z+5, r25	; 0x05
    1ad6:	84 83       	std	Z+4, r24	; 0x04
						else
						{
							T0_stack.arr[3] = 0;
						}

						if(T0_stack.arr[2] < 0)
    1ad8:	99 23       	and	r25, r25
    1ada:	0c f0       	brlt	.+2      	; 0x1ade <__vector_11+0x1a8>
    1adc:	49 c0       	rjmp	.+146    	; 0x1b70 <__vector_11+0x23a>
    1ade:	08 c0       	rjmp	.+16     	; 0x1af0 <__vector_11+0x1ba>
							T0_stack.arr[3] = 9;
							T0_stack.arr[2]--;
						}
						else
						{
							T0_stack.arr[3] = 0;
    1ae0:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <T0_stack+0x7>
    1ae4:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <T0_stack+0x6>
						}

						if(T0_stack.arr[2] < 0)
    1ae8:	99 23       	and	r25, r25
    1aea:	0c f0       	brlt	.+2      	; 0x1aee <__vector_11+0x1b8>
    1aec:	41 c0       	rjmp	.+130    	; 0x1b70 <__vector_11+0x23a>
    1aee:	6d c0       	rjmp	.+218    	; 0x1bca <__vector_11+0x294>
						{
							if ((T0_stack.arr[0] > 0) || (T0_stack.arr[1] > 0))
    1af0:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <T0_stack>
    1af4:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <T0_stack+0x1>
    1af8:	18 16       	cp	r1, r24
    1afa:	19 06       	cpc	r1, r25
    1afc:	3c f0       	brlt	.+14     	; 0x1b0c <__vector_11+0x1d6>
    1afe:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <T0_stack+0x2>
    1b02:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <T0_stack+0x3>
    1b06:	18 16       	cp	r1, r24
    1b08:	19 06       	cpc	r1, r25
    1b0a:	74 f4       	brge	.+28     	; 0x1b28 <__vector_11+0x1f2>
							{
								T0_stack.arr[2] = 5;
    1b0c:	e6 e2       	ldi	r30, 0x26	; 38
    1b0e:	f1 e0       	ldi	r31, 0x01	; 1
    1b10:	85 e0       	ldi	r24, 0x05	; 5
    1b12:	90 e0       	ldi	r25, 0x00	; 0
    1b14:	95 83       	std	Z+5, r25	; 0x05
    1b16:	84 83       	std	Z+4, r24	; 0x04
								T0_stack.arr[1]--;
    1b18:	82 81       	ldd	r24, Z+2	; 0x02
    1b1a:	93 81       	ldd	r25, Z+3	; 0x03
    1b1c:	01 97       	sbiw	r24, 0x01	; 1
    1b1e:	93 83       	std	Z+3, r25	; 0x03
    1b20:	82 83       	std	Z+2, r24	; 0x02
							else
							{
								T0_stack.arr[2] = 0;
							}

							if((T0_stack.arr[1] < 0))
    1b22:	99 23       	and	r25, r25
    1b24:	2c f5       	brge	.+74     	; 0x1b70 <__vector_11+0x23a>
    1b26:	07 c0       	rjmp	.+14     	; 0x1b36 <__vector_11+0x200>
								T0_stack.arr[2] = 5;
								T0_stack.arr[1]--;
							}
							else
							{
								T0_stack.arr[2] = 0;
    1b28:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <T0_stack+0x5>
    1b2c:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <T0_stack+0x4>
							}

							if((T0_stack.arr[1] < 0))
    1b30:	99 23       	and	r25, r25
    1b32:	f4 f4       	brge	.+60     	; 0x1b70 <__vector_11+0x23a>
    1b34:	19 c0       	rjmp	.+50     	; 0x1b68 <__vector_11+0x232>
							{
								if (T0_stack.arr[0] > 0)
    1b36:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <T0_stack>
    1b3a:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <T0_stack+0x1>
    1b3e:	18 16       	cp	r1, r24
    1b40:	19 06       	cpc	r1, r25
    1b42:	94 f4       	brge	.+36     	; 0x1b68 <__vector_11+0x232>
								{
									T0_stack.arr[1] = 9;
    1b44:	29 e0       	ldi	r18, 0x09	; 9
    1b46:	30 e0       	ldi	r19, 0x00	; 0
    1b48:	30 93 29 01 	sts	0x0129, r19	; 0x800129 <T0_stack+0x3>
    1b4c:	20 93 28 01 	sts	0x0128, r18	; 0x800128 <T0_stack+0x2>
									T0_stack.arr[0]--;
    1b50:	01 97       	sbiw	r24, 0x01	; 1
									if (T0_stack.arr[0] < 0)
    1b52:	2a f0       	brmi	.+10     	; 0x1b5e <__vector_11+0x228>
							if((T0_stack.arr[1] < 0))
							{
								if (T0_stack.arr[0] > 0)
								{
									T0_stack.arr[1] = 9;
									T0_stack.arr[0]--;
    1b54:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <T0_stack+0x1>
    1b58:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <T0_stack>
    1b5c:	09 c0       	rjmp	.+18     	; 0x1b70 <__vector_11+0x23a>
									if (T0_stack.arr[0] < 0)
									{
										T0_stack.arr[0] = 0;
    1b5e:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <T0_stack+0x1>
    1b62:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <T0_stack>
    1b66:	04 c0       	rjmp	.+8      	; 0x1b70 <__vector_11+0x23a>
									}
								}
								else
								{
									T0_stack.arr[1] = 0;
    1b68:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <T0_stack+0x3>
    1b6c:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <T0_stack+0x2>
							}
						}
					}
				}
			}
			count_0 = 0;	
    1b70:	10 92 e5 00 	sts	0x00E5, r1	; 0x8000e5 <count_0.1758+0x1>
    1b74:	10 92 e4 00 	sts	0x00E4, r1	; 0x8000e4 <count_0.1758>
			TCNT0 = T0_Init_val;
    1b78:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <T0_Init_val>
    1b7c:	82 bf       	out	0x32, r24	; 50
		}
	}
}
    1b7e:	2a c0       	rjmp	.+84     	; 0x1bd4 <__vector_11+0x29e>
						T0_stack.arr[4] = 0;
					}

					if(T0_stack.arr[3] < 0)
					{
						if ((T0_stack.arr[0] > 0) || (T0_stack.arr[1] > 0) || (T0_stack.arr[2] > 0))
    1b80:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <T0_stack+0x2>
    1b84:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <T0_stack+0x3>
    1b88:	18 16       	cp	r1, r24
    1b8a:	19 06       	cpc	r1, r25
    1b8c:	0c f4       	brge	.+2      	; 0x1b90 <__vector_11+0x25a>
    1b8e:	99 cf       	rjmp	.-206    	; 0x1ac2 <__vector_11+0x18c>
    1b90:	91 cf       	rjmp	.-222    	; 0x1ab4 <__vector_11+0x17e>

				if(T0_stack.arr[4] < 0)
				{
					if ((T0_stack.arr[0] > 0) || (T0_stack.arr[1] > 0) || (T0_stack.arr[2] > 0) || (T0_stack.arr[3] > 0))
					{
						T0_stack.arr[4] = 5;
    1b92:	e6 e2       	ldi	r30, 0x26	; 38
    1b94:	f1 e0       	ldi	r31, 0x01	; 1
    1b96:	85 e0       	ldi	r24, 0x05	; 5
    1b98:	90 e0       	ldi	r25, 0x00	; 0
    1b9a:	91 87       	std	Z+9, r25	; 0x09
    1b9c:	80 87       	std	Z+8, r24	; 0x08
						T0_stack.arr[3]--;
    1b9e:	86 81       	ldd	r24, Z+6	; 0x06
    1ba0:	97 81       	ldd	r25, Z+7	; 0x07
    1ba2:	01 97       	sbiw	r24, 0x01	; 1
    1ba4:	97 83       	std	Z+7, r25	; 0x07
    1ba6:	86 83       	std	Z+6, r24	; 0x06
					else
					{
						T0_stack.arr[4] = 0;
					}

					if(T0_stack.arr[3] < 0)
    1ba8:	99 23       	and	r25, r25
    1baa:	14 f7       	brge	.-60     	; 0x1b70 <__vector_11+0x23a>
    1bac:	e9 cf       	rjmp	.-46     	; 0x1b80 <__vector_11+0x24a>

				if(T0_stack.arr[4] < 0)
				{
					if ((T0_stack.arr[0] > 0) || (T0_stack.arr[1] > 0) || (T0_stack.arr[2] > 0) || (T0_stack.arr[3] > 0))
					{
						T0_stack.arr[4] = 5;
    1bae:	e6 e2       	ldi	r30, 0x26	; 38
    1bb0:	f1 e0       	ldi	r31, 0x01	; 1
    1bb2:	85 e0       	ldi	r24, 0x05	; 5
    1bb4:	90 e0       	ldi	r25, 0x00	; 0
    1bb6:	91 87       	std	Z+9, r25	; 0x09
    1bb8:	80 87       	std	Z+8, r24	; 0x08
						T0_stack.arr[3]--;
    1bba:	86 81       	ldd	r24, Z+6	; 0x06
    1bbc:	97 81       	ldd	r25, Z+7	; 0x07
    1bbe:	01 97       	sbiw	r24, 0x01	; 1
    1bc0:	97 83       	std	Z+7, r25	; 0x07
    1bc2:	86 83       	std	Z+6, r24	; 0x06
					else
					{
						T0_stack.arr[4] = 0;
					}

					if(T0_stack.arr[3] < 0)
    1bc4:	99 23       	and	r25, r25
    1bc6:	a4 f6       	brge	.-88     	; 0x1b70 <__vector_11+0x23a>
    1bc8:	7c cf       	rjmp	.-264    	; 0x1ac2 <__vector_11+0x18c>
							T0_stack.arr[3] = 0;
						}

						if(T0_stack.arr[2] < 0)
						{
							if ((T0_stack.arr[0] > 0) || (T0_stack.arr[1] > 0))
    1bca:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <T0_stack+0x2>
    1bce:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <T0_stack+0x3>
    1bd2:	aa cf       	rjmp	.-172    	; 0x1b28 <__vector_11+0x1f2>
			}
			count_0 = 0;	
			TCNT0 = T0_Init_val;
		}
	}
}
    1bd4:	ff 91       	pop	r31
    1bd6:	ef 91       	pop	r30
    1bd8:	bf 91       	pop	r27
    1bda:	af 91       	pop	r26
    1bdc:	9f 91       	pop	r25
    1bde:	8f 91       	pop	r24
    1be0:	7f 91       	pop	r23
    1be2:	6f 91       	pop	r22
    1be4:	5f 91       	pop	r21
    1be6:	4f 91       	pop	r20
    1be8:	3f 91       	pop	r19
    1bea:	2f 91       	pop	r18
    1bec:	0f 90       	pop	r0
    1bee:	0f be       	out	0x3f, r0	; 63
    1bf0:	0f 90       	pop	r0
    1bf2:	1f 90       	pop	r1
    1bf4:	18 95       	reti

00001bf6 <__vector_10>:

ISR(TIMER0_COMP_vect)
{
    1bf6:	1f 92       	push	r1
    1bf8:	0f 92       	push	r0
    1bfa:	0f b6       	in	r0, 0x3f	; 63
    1bfc:	0f 92       	push	r0
    1bfe:	11 24       	eor	r1, r1
    1c00:	4f 93       	push	r20
    1c02:	5f 93       	push	r21
    1c04:	6f 93       	push	r22
    1c06:	7f 93       	push	r23
    1c08:	8f 93       	push	r24
    1c0a:	9f 93       	push	r25
    1c0c:	af 93       	push	r26
    1c0e:	bf 93       	push	r27
	static int count_0 = 0; //counter to count the number of overflows
	static int count_1 = 0; //counter to count
	count_0++;
    1c10:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <count_0.1764>
    1c14:	90 91 e3 00 	lds	r25, 0x00E3	; 0x8000e3 <count_0.1764+0x1>
    1c18:	01 96       	adiw	r24, 0x01	; 1
    1c1a:	90 93 e3 00 	sts	0x00E3, r25	; 0x8000e3 <count_0.1764+0x1>
    1c1e:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <count_0.1764>
	if (T0_OVF_No == 1)
    1c22:	40 91 96 00 	lds	r20, 0x0096	; 0x800096 <T0_OVF_No>
    1c26:	50 91 97 00 	lds	r21, 0x0097	; 0x800097 <T0_OVF_No+0x1>
    1c2a:	60 91 98 00 	lds	r22, 0x0098	; 0x800098 <T0_OVF_No+0x2>
    1c2e:	70 91 99 00 	lds	r23, 0x0099	; 0x800099 <T0_OVF_No+0x3>
    1c32:	41 30       	cpi	r20, 0x01	; 1
    1c34:	51 05       	cpc	r21, r1
    1c36:	61 05       	cpc	r22, r1
    1c38:	71 05       	cpc	r23, r1
    1c3a:	99 f4       	brne	.+38     	; 0x1c62 <__vector_10+0x6c>
	{
		if (count_0 == T0_OVF_No)
    1c3c:	01 97       	sbiw	r24, 0x01	; 1
    1c3e:	89 f5       	brne	.+98     	; 0x1ca2 <__vector_10+0xac>
		{
			//write your code here
			count_1++;
    1c40:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <count_1.1765>
    1c44:	90 91 e1 00 	lds	r25, 0x00E1	; 0x8000e1 <count_1.1765+0x1>
    1c48:	01 96       	adiw	r24, 0x01	; 1
    1c4a:	90 93 e1 00 	sts	0x00E1, r25	; 0x8000e1 <count_1.1765+0x1>
    1c4e:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <count_1.1765>
			}
			if (count_1 % 4 == 0)
			{
				(*ptr2)();
			}*/
			count_0 = 0;
    1c52:	10 92 e3 00 	sts	0x00E3, r1	; 0x8000e3 <count_0.1764+0x1>
    1c56:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <count_0.1764>
			OCR0 = T0_Init_val;
    1c5a:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <T0_Init_val>
    1c5e:	8c bf       	out	0x3c, r24	; 60
    1c60:	20 c0       	rjmp	.+64     	; 0x1ca2 <__vector_10+0xac>
		}
	}
	else
	{
		if (count_0 == 1)
    1c62:	81 30       	cpi	r24, 0x01	; 1
    1c64:	91 05       	cpc	r25, r1
    1c66:	21 f4       	brne	.+8      	; 0x1c70 <__vector_10+0x7a>
		{
			OCR0 = T0_Init_val_OVF;
    1c68:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <T0_Init_val_OVF>
    1c6c:	8c bf       	out	0x3c, r24	; 60
    1c6e:	19 c0       	rjmp	.+50     	; 0x1ca2 <__vector_10+0xac>
		}
		else if (count_0 == T0_OVF_No)
    1c70:	09 2e       	mov	r0, r25
    1c72:	00 0c       	add	r0, r0
    1c74:	aa 0b       	sbc	r26, r26
    1c76:	bb 0b       	sbc	r27, r27
    1c78:	48 17       	cp	r20, r24
    1c7a:	59 07       	cpc	r21, r25
    1c7c:	6a 07       	cpc	r22, r26
    1c7e:	7b 07       	cpc	r23, r27
    1c80:	81 f4       	brne	.+32     	; 0x1ca2 <__vector_10+0xac>
		{
			//write your code here
			count_1++;
    1c82:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <count_1.1765>
    1c86:	90 91 e1 00 	lds	r25, 0x00E1	; 0x8000e1 <count_1.1765+0x1>
    1c8a:	01 96       	adiw	r24, 0x01	; 1
    1c8c:	90 93 e1 00 	sts	0x00E1, r25	; 0x8000e1 <count_1.1765+0x1>
    1c90:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <count_1.1765>
			}
			if (count_1 % 4 == 0)
			{
				(*ptr2)();
			}*/
			count_0 = 0;
    1c94:	10 92 e3 00 	sts	0x00E3, r1	; 0x8000e3 <count_0.1764+0x1>
    1c98:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <count_0.1764>
			OCR0 = T0_Init_val;
    1c9c:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <T0_Init_val>
    1ca0:	8c bf       	out	0x3c, r24	; 60
		}
	}	
}
    1ca2:	bf 91       	pop	r27
    1ca4:	af 91       	pop	r26
    1ca6:	9f 91       	pop	r25
    1ca8:	8f 91       	pop	r24
    1caa:	7f 91       	pop	r23
    1cac:	6f 91       	pop	r22
    1cae:	5f 91       	pop	r21
    1cb0:	4f 91       	pop	r20
    1cb2:	0f 90       	pop	r0
    1cb4:	0f be       	out	0x3f, r0	; 63
    1cb6:	0f 90       	pop	r0
    1cb8:	1f 90       	pop	r1
    1cba:	18 95       	reti

00001cbc <TIMER1_INIT>:
///////////////****************************Timer1 functions****************************///////////////

void TIMER1_INIT(void)
{
	/*Global Interrupt*/
	SREG = GLOBAL_INT << 7;	
    1cbc:	80 e8       	ldi	r24, 0x80	; 128
    1cbe:	8f bf       	out	0x3f, r24	; 63
	
	/*Peripheral Interrupt*/
	#if TIMER1_MODE == NORMAL_MODE
	TIMSK = (TIMER1_OVF_INT << 2) | (TIMSK & 0xc3);
    1cc0:	89 b7       	in	r24, 0x39	; 57
    1cc2:	83 7c       	andi	r24, 0xC3	; 195
    1cc4:	84 60       	ori	r24, 0x04	; 4
    1cc6:	89 bf       	out	0x39, r24	; 57
    1cc8:	08 95       	ret

00001cca <TIMER1_Start>:

	
}
void TIMER1_Start(void)
{
	TCCR1B = TIMER1_CLOCK;
    1cca:	85 e0       	ldi	r24, 0x05	; 5
    1ccc:	8e bd       	out	0x2e, r24	; 46
    1cce:	08 95       	ret

00001cd0 <TIMER1_Stop>:
}
void TIMER1_Stop(void)
{
	TCCR1B = T1_NO_CLOCK;
    1cd0:	1e bc       	out	0x2e, r1	; 46
    1cd2:	08 95       	ret

00001cd4 <TIMER1_SetDelay>:
}
void TIMER1_SetDelay(Uint32 delay)
{
    1cd4:	4f 92       	push	r4
    1cd6:	5f 92       	push	r5
    1cd8:	6f 92       	push	r6
    1cda:	7f 92       	push	r7
    1cdc:	8f 92       	push	r8
    1cde:	9f 92       	push	r9
    1ce0:	af 92       	push	r10
    1ce2:	bf 92       	push	r11
    1ce4:	cf 92       	push	r12
    1ce6:	df 92       	push	r13
    1ce8:	ef 92       	push	r14
    1cea:	ff 92       	push	r15
    1cec:	0f 93       	push	r16
    1cee:	1f 93       	push	r17
    1cf0:	cf 93       	push	r28
    1cf2:	df 93       	push	r29
    1cf4:	cd b7       	in	r28, 0x3d	; 61
    1cf6:	de b7       	in	r29, 0x3e	; 62
    1cf8:	2a 97       	sbiw	r28, 0x0a	; 10
    1cfa:	0f b6       	in	r0, 0x3f	; 63
    1cfc:	f8 94       	cli
    1cfe:	de bf       	out	0x3e, r29	; 62
    1d00:	0f be       	out	0x3f, r0	; 63
    1d02:	cd bf       	out	0x3d, r28	; 61
    1d04:	9b 01       	movw	r18, r22
    1d06:	ac 01       	movw	r20, r24
	Uint8 Tick_time, check = 1;
	Uint32 i; 
	Uint32 Tick_num;
	Uint8 OVF_buf; //variable to store the possible number of overflows
	Tick_time = 1024 / 16; //tick_time in micro seconds 
	Tick_num = (delay * 1000) / Tick_time; //total number of ticks needed to generate our time
    1d08:	a8 ee       	ldi	r26, 0xE8	; 232
    1d0a:	b3 e0       	ldi	r27, 0x03	; 3
    1d0c:	0e 94 b9 13 	call	0x2772	; 0x2772 <__muluhisi3>
    1d10:	6d 83       	std	Y+5, r22	; 0x05
    1d12:	7e 83       	std	Y+6, r23	; 0x06
    1d14:	8f 83       	std	Y+7, r24	; 0x07
    1d16:	98 87       	std	Y+8, r25	; 0x08
    1d18:	2b 01       	movw	r4, r22
    1d1a:	3c 01       	movw	r6, r24
    1d1c:	68 94       	set
    1d1e:	15 f8       	bld	r1, 5
    1d20:	76 94       	lsr	r7
    1d22:	67 94       	ror	r6
    1d24:	57 94       	ror	r5
    1d26:	47 94       	ror	r4
    1d28:	16 94       	lsr	r1
    1d2a:	d1 f7       	brne	.-12     	; 0x1d20 <TIMER1_SetDelay+0x4c>
	
	//Normal mode 
	#if TIMER1_MODE == NORMAL_MODE
	//case of tick_num is less than 65535 (4194.24 ms)
	if (Tick_num <= 65536 )
    1d2c:	21 e0       	ldi	r18, 0x01	; 1
    1d2e:	42 16       	cp	r4, r18
    1d30:	51 04       	cpc	r5, r1
    1d32:	62 06       	cpc	r6, r18
    1d34:	71 04       	cpc	r7, r1
    1d36:	98 f4       	brcc	.+38     	; 0x1d5e <TIMER1_SetDelay+0x8a>
	{
		T1_Init_val = 65535 - Tick_num; 
    1d38:	8f ef       	ldi	r24, 0xFF	; 255
    1d3a:	9f ef       	ldi	r25, 0xFF	; 255
    1d3c:	a0 e0       	ldi	r26, 0x00	; 0
    1d3e:	b0 e0       	ldi	r27, 0x00	; 0
    1d40:	84 19       	sub	r24, r4
    1d42:	95 09       	sbc	r25, r5
    1d44:	a6 09       	sbc	r26, r6
    1d46:	b7 09       	sbc	r27, r7
    1d48:	80 93 fc 00 	sts	0x00FC, r24	; 0x8000fc <T1_Init_val>
    1d4c:	90 93 fd 00 	sts	0x00FD, r25	; 0x8000fd <T1_Init_val+0x1>
    1d50:	a0 93 fe 00 	sts	0x00FE, r26	; 0x8000fe <T1_Init_val+0x2>
    1d54:	b0 93 ff 00 	sts	0x00FF, r27	; 0x8000ff <T1_Init_val+0x3>
		TCNT1 = T1_Init_val;
    1d58:	9d bd       	out	0x2d, r25	; 45
    1d5a:	8c bd       	out	0x2c, r24	; 44
    1d5c:	94 c0       	rjmp	.+296    	; 0x1e86 <TIMER1_SetDelay+0x1b2>
    1d5e:	0f 2e       	mov	r0, r31
    1d60:	81 2c       	mov	r8, r1
    1d62:	f3 e8       	ldi	r31, 0x83	; 131
    1d64:	9f 2e       	mov	r9, r31
    1d66:	a1 2c       	mov	r10, r1
    1d68:	b1 2c       	mov	r11, r1
    1d6a:	f0 2d       	mov	r31, r0
    1d6c:	11 e0       	ldi	r17, 0x01	; 1
    1d6e:	c1 2c       	mov	r12, r1
    1d70:	d1 2c       	mov	r13, r1
    1d72:	76 01       	movw	r14, r12
    1d74:	e3 94       	inc	r14
			{
				T1_OVF_No = Tick_num / i;
				T1_Init_val = 65536 - i; //initial value at the first OVF
				T1_Init_val_OVF = 65536 - i; //initialize value at the rest of OVF
				TCNT1 = T1_Init_val; //initializing the TCNT0 with Init_val
				check = 0; //variable to use in checking of number of OVF being integer or decimal
    1d76:	00 e0       	ldi	r16, 0x00	; 0
	//case of tick_num is bigger than 65535 (4194.24 ms)
	else
	{
		for (i = 32000; i <= 65536; i++) //check if the number of overflows is integer
		{
			OVF_buf = Tick_num / i; //buffer to store the number of OVF at every register size
    1d78:	c3 01       	movw	r24, r6
    1d7a:	b2 01       	movw	r22, r4
    1d7c:	a7 01       	movw	r20, r14
    1d7e:	96 01       	movw	r18, r12
    1d80:	28 19       	sub	r18, r8
    1d82:	39 09       	sbc	r19, r9
    1d84:	4a 09       	sbc	r20, r10
    1d86:	5b 09       	sbc	r21, r11
    1d88:	29 83       	std	Y+1, r18	; 0x01
    1d8a:	3a 83       	std	Y+2, r19	; 0x02
    1d8c:	4b 83       	std	Y+3, r20	; 0x03
    1d8e:	5c 83       	std	Y+4, r21	; 0x04
    1d90:	0e 94 97 13 	call	0x272e	; 0x272e <__udivmodsi4>
    1d94:	e2 2f       	mov	r30, r18
    1d96:	3a 87       	std	Y+10, r19	; 0x0a
    1d98:	49 87       	std	Y+9, r20	; 0x09
    1d9a:	f5 2f       	mov	r31, r21
			if (Tick_num == (OVF_buf * i)) 
    1d9c:	a2 2f       	mov	r26, r18
    1d9e:	b0 e0       	ldi	r27, 0x00	; 0
    1da0:	29 81       	ldd	r18, Y+1	; 0x01
    1da2:	3a 81       	ldd	r19, Y+2	; 0x02
    1da4:	4b 81       	ldd	r20, Y+3	; 0x03
    1da6:	5c 81       	ldd	r21, Y+4	; 0x04
    1da8:	0e 94 b9 13 	call	0x2772	; 0x2772 <__muluhisi3>
    1dac:	46 16       	cp	r4, r22
    1dae:	57 06       	cpc	r5, r23
    1db0:	68 06       	cpc	r6, r24
    1db2:	79 06       	cpc	r7, r25
    1db4:	e9 f4       	brne	.+58     	; 0x1df0 <TIMER1_SetDelay+0x11c>
			{
				T1_OVF_No = Tick_num / i;
    1db6:	e0 93 92 00 	sts	0x0092, r30	; 0x800092 <T1_OVF_No>
    1dba:	3a 85       	ldd	r19, Y+10	; 0x0a
    1dbc:	30 93 93 00 	sts	0x0093, r19	; 0x800093 <T1_OVF_No+0x1>
    1dc0:	49 85       	ldd	r20, Y+9	; 0x09
    1dc2:	40 93 94 00 	sts	0x0094, r20	; 0x800094 <T1_OVF_No+0x2>
    1dc6:	f0 93 95 00 	sts	0x0095, r31	; 0x800095 <T1_OVF_No+0x3>
				T1_Init_val = 65536 - i; //initial value at the first OVF
    1dca:	80 92 fc 00 	sts	0x00FC, r8	; 0x8000fc <T1_Init_val>
    1dce:	90 92 fd 00 	sts	0x00FD, r9	; 0x8000fd <T1_Init_val+0x1>
    1dd2:	a0 92 fe 00 	sts	0x00FE, r10	; 0x8000fe <T1_Init_val+0x2>
    1dd6:	b0 92 ff 00 	sts	0x00FF, r11	; 0x8000ff <T1_Init_val+0x3>
				T1_Init_val_OVF = 65536 - i; //initialize value at the rest of OVF
    1dda:	80 92 f8 00 	sts	0x00F8, r8	; 0x8000f8 <T1_Init_val_OVF>
    1dde:	90 92 f9 00 	sts	0x00F9, r9	; 0x8000f9 <T1_Init_val_OVF+0x1>
    1de2:	a0 92 fa 00 	sts	0x00FA, r10	; 0x8000fa <T1_Init_val_OVF+0x2>
    1de6:	b0 92 fb 00 	sts	0x00FB, r11	; 0x8000fb <T1_Init_val_OVF+0x3>
				TCNT1 = T1_Init_val; //initializing the TCNT0 with Init_val
    1dea:	9d bc       	out	0x2d, r9	; 45
    1dec:	8c bc       	out	0x2c, r8	; 44
				check = 0; //variable to use in checking of number of OVF being integer or decimal
    1dee:	10 2f       	mov	r17, r16
    1df0:	51 e0       	ldi	r21, 0x01	; 1
    1df2:	85 1a       	sub	r8, r21
    1df4:	91 08       	sbc	r9, r1
    1df6:	a1 08       	sbc	r10, r1
    1df8:	b1 08       	sbc	r11, r1
		TCNT1 = T1_Init_val;
	}
	//case of tick_num is bigger than 65535 (4194.24 ms)
	else
	{
		for (i = 32000; i <= 65536; i++) //check if the number of overflows is integer
    1dfa:	8f ef       	ldi	r24, 0xFF	; 255
    1dfc:	88 16       	cp	r8, r24
    1dfe:	98 06       	cpc	r9, r24
    1e00:	a8 06       	cpc	r10, r24
    1e02:	b8 06       	cpc	r11, r24
    1e04:	09 f0       	breq	.+2      	; 0x1e08 <TIMER1_SetDelay+0x134>
    1e06:	b8 cf       	rjmp	.-144    	; 0x1d78 <TIMER1_SetDelay+0xa4>
				TCNT1 = T1_Init_val; //initializing the TCNT0 with Init_val
				check = 0; //variable to use in checking of number of OVF being integer or decimal
			}
		}
		//
		if (check) //check if the number of OVF is decimal
    1e08:	11 23       	and	r17, r17
    1e0a:	e9 f1       	breq	.+122    	; 0x1e86 <TIMER1_SetDelay+0x1b2>
		{
			T1_OVF_No += Tick_num / 65536;
    1e0c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e0e:	9e 81       	ldd	r25, Y+6	; 0x06
    1e10:	af 81       	ldd	r26, Y+7	; 0x07
    1e12:	b8 85       	ldd	r27, Y+8	; 0x08
    1e14:	07 2e       	mov	r0, r23
    1e16:	76 e1       	ldi	r23, 0x16	; 22
    1e18:	b6 95       	lsr	r27
    1e1a:	a7 95       	ror	r26
    1e1c:	97 95       	ror	r25
    1e1e:	87 95       	ror	r24
    1e20:	7a 95       	dec	r23
    1e22:	d1 f7       	brne	.-12     	; 0x1e18 <TIMER1_SetDelay+0x144>
    1e24:	70 2d       	mov	r23, r0
    1e26:	40 91 92 00 	lds	r20, 0x0092	; 0x800092 <T1_OVF_No>
    1e2a:	50 91 93 00 	lds	r21, 0x0093	; 0x800093 <T1_OVF_No+0x1>
    1e2e:	60 91 94 00 	lds	r22, 0x0094	; 0x800094 <T1_OVF_No+0x2>
    1e32:	70 91 95 00 	lds	r23, 0x0095	; 0x800095 <T1_OVF_No+0x3>
    1e36:	84 0f       	add	r24, r20
    1e38:	95 1f       	adc	r25, r21
    1e3a:	a6 1f       	adc	r26, r22
    1e3c:	b7 1f       	adc	r27, r23
    1e3e:	80 93 92 00 	sts	0x0092, r24	; 0x800092 <T1_OVF_No>
    1e42:	90 93 93 00 	sts	0x0093, r25	; 0x800093 <T1_OVF_No+0x1>
    1e46:	a0 93 94 00 	sts	0x0094, r26	; 0x800094 <T1_OVF_No+0x2>
    1e4a:	b0 93 95 00 	sts	0x0095, r27	; 0x800095 <T1_OVF_No+0x3>
			T1_Init_val = 65536 - (Tick_num % 65536);
    1e4e:	66 24       	eor	r6, r6
    1e50:	77 24       	eor	r7, r7
    1e52:	80 e0       	ldi	r24, 0x00	; 0
    1e54:	90 e0       	ldi	r25, 0x00	; 0
    1e56:	a1 e0       	ldi	r26, 0x01	; 1
    1e58:	b0 e0       	ldi	r27, 0x00	; 0
    1e5a:	84 19       	sub	r24, r4
    1e5c:	95 09       	sbc	r25, r5
    1e5e:	a6 09       	sbc	r26, r6
    1e60:	b7 09       	sbc	r27, r7
    1e62:	80 93 fc 00 	sts	0x00FC, r24	; 0x8000fc <T1_Init_val>
    1e66:	90 93 fd 00 	sts	0x00FD, r25	; 0x8000fd <T1_Init_val+0x1>
    1e6a:	a0 93 fe 00 	sts	0x00FE, r26	; 0x8000fe <T1_Init_val+0x2>
    1e6e:	b0 93 ff 00 	sts	0x00FF, r27	; 0x8000ff <T1_Init_val+0x3>
			T1_Init_val_OVF = 0;
    1e72:	10 92 f8 00 	sts	0x00F8, r1	; 0x8000f8 <T1_Init_val_OVF>
    1e76:	10 92 f9 00 	sts	0x00F9, r1	; 0x8000f9 <T1_Init_val_OVF+0x1>
    1e7a:	10 92 fa 00 	sts	0x00FA, r1	; 0x8000fa <T1_Init_val_OVF+0x2>
    1e7e:	10 92 fb 00 	sts	0x00FB, r1	; 0x8000fb <T1_Init_val_OVF+0x3>
			TCNT1 = T1_Init_val; //initializing the TCNT0	
    1e82:	9d bd       	out	0x2d, r25	; 45
    1e84:	8c bd       	out	0x2c, r24	; 44
			OCR1A = T1_Init_val;
		}
	}
#endif

}
    1e86:	2a 96       	adiw	r28, 0x0a	; 10
    1e88:	0f b6       	in	r0, 0x3f	; 63
    1e8a:	f8 94       	cli
    1e8c:	de bf       	out	0x3e, r29	; 62
    1e8e:	0f be       	out	0x3f, r0	; 63
    1e90:	cd bf       	out	0x3d, r28	; 61
    1e92:	df 91       	pop	r29
    1e94:	cf 91       	pop	r28
    1e96:	1f 91       	pop	r17
    1e98:	0f 91       	pop	r16
    1e9a:	ff 90       	pop	r15
    1e9c:	ef 90       	pop	r14
    1e9e:	df 90       	pop	r13
    1ea0:	cf 90       	pop	r12
    1ea2:	bf 90       	pop	r11
    1ea4:	af 90       	pop	r10
    1ea6:	9f 90       	pop	r9
    1ea8:	8f 90       	pop	r8
    1eaa:	7f 90       	pop	r7
    1eac:	6f 90       	pop	r6
    1eae:	5f 90       	pop	r5
    1eb0:	4f 90       	pop	r4
    1eb2:	08 95       	ret

00001eb4 <__vector_9>:
ISR(TIMER1_OVF_vect)
{
    1eb4:	1f 92       	push	r1
    1eb6:	0f 92       	push	r0
    1eb8:	0f b6       	in	r0, 0x3f	; 63
    1eba:	0f 92       	push	r0
    1ebc:	11 24       	eor	r1, r1
    1ebe:	8f 92       	push	r8
    1ec0:	9f 92       	push	r9
    1ec2:	af 92       	push	r10
    1ec4:	bf 92       	push	r11
    1ec6:	cf 92       	push	r12
    1ec8:	df 92       	push	r13
    1eca:	ef 92       	push	r14
    1ecc:	ff 92       	push	r15
    1ece:	0f 93       	push	r16
    1ed0:	1f 93       	push	r17
    1ed2:	2f 93       	push	r18
    1ed4:	3f 93       	push	r19
    1ed6:	4f 93       	push	r20
    1ed8:	5f 93       	push	r21
    1eda:	6f 93       	push	r22
    1edc:	7f 93       	push	r23
    1ede:	8f 93       	push	r24
    1ee0:	9f 93       	push	r25
    1ee2:	af 93       	push	r26
    1ee4:	bf 93       	push	r27
    1ee6:	cf 93       	push	r28
    1ee8:	df 93       	push	r29
    1eea:	ef 93       	push	r30
    1eec:	ff 93       	push	r31
	static int count_0 = 0; //counter to count the number of overflows
	int h_max = T1_stack.arr[6] == 2?3:9; //counter to count 
    1eee:	c0 91 0c 01 	lds	r28, 0x010C	; 0x80010c <T1_stack+0xc>
    1ef2:	d0 91 0d 01 	lds	r29, 0x010D	; 0x80010d <T1_stack+0xd>
    1ef6:	c2 30       	cpi	r28, 0x02	; 2
    1ef8:	d1 05       	cpc	r29, r1
    1efa:	31 f0       	breq	.+12     	; 0x1f08 <__vector_9+0x54>
    1efc:	0f 2e       	mov	r0, r31
    1efe:	f9 e0       	ldi	r31, 0x09	; 9
    1f00:	cf 2e       	mov	r12, r31
    1f02:	d1 2c       	mov	r13, r1
    1f04:	f0 2d       	mov	r31, r0
    1f06:	05 c0       	rjmp	.+10     	; 0x1f12 <__vector_9+0x5e>
    1f08:	0f 2e       	mov	r0, r31
    1f0a:	f3 e0       	ldi	r31, 0x03	; 3
    1f0c:	cf 2e       	mov	r12, r31
    1f0e:	d1 2c       	mov	r13, r1
    1f10:	f0 2d       	mov	r31, r0
	int day_max = T1_stack.arr[0] == (T1_array[(T1_stack.arr[2]*10)+ T1_stack.arr[3] - 1] / 10)?(T1_array[(T1_stack.arr[2]*10)+ T1_stack.arr[3] - 1] % 10):9; //counter to count   
    1f12:	e0 e0       	ldi	r30, 0x00	; 0
    1f14:	f1 e0       	ldi	r31, 0x01	; 1
    1f16:	00 81       	ld	r16, Z
    1f18:	11 81       	ldd	r17, Z+1	; 0x01
    1f1a:	24 81       	ldd	r18, Z+4	; 0x04
    1f1c:	35 81       	ldd	r19, Z+5	; 0x05
    1f1e:	e6 80       	ldd	r14, Z+6	; 0x06
    1f20:	f7 80       	ldd	r15, Z+7	; 0x07
    1f22:	f9 01       	movw	r30, r18
    1f24:	ee 0f       	add	r30, r30
    1f26:	ff 1f       	adc	r31, r31
    1f28:	c9 01       	movw	r24, r18
    1f2a:	88 0f       	add	r24, r24
    1f2c:	99 1f       	adc	r25, r25
    1f2e:	88 0f       	add	r24, r24
    1f30:	99 1f       	adc	r25, r25
    1f32:	88 0f       	add	r24, r24
    1f34:	99 1f       	adc	r25, r25
    1f36:	e8 0f       	add	r30, r24
    1f38:	f9 1f       	adc	r31, r25
    1f3a:	ee 0d       	add	r30, r14
    1f3c:	ff 1d       	adc	r31, r15
    1f3e:	ee 0f       	add	r30, r30
    1f40:	ff 1f       	adc	r31, r31
    1f42:	ec 58       	subi	r30, 0x8C	; 140
    1f44:	ff 4f       	sbci	r31, 0xFF	; 255
    1f46:	a0 80       	ld	r10, Z
    1f48:	b1 80       	ldd	r11, Z+1	; 0x01
    1f4a:	c5 01       	movw	r24, r10
    1f4c:	6a e0       	ldi	r22, 0x0A	; 10
    1f4e:	70 e0       	ldi	r23, 0x00	; 0
    1f50:	0e 94 83 13 	call	0x2706	; 0x2706 <__divmodhi4>
    1f54:	fb 01       	movw	r30, r22
    1f56:	06 17       	cp	r16, r22
    1f58:	17 07       	cpc	r17, r23
    1f5a:	39 f4       	brne	.+14     	; 0x1f6a <__vector_9+0xb6>
    1f5c:	c5 01       	movw	r24, r10
    1f5e:	6a e0       	ldi	r22, 0x0A	; 10
    1f60:	70 e0       	ldi	r23, 0x00	; 0
    1f62:	0e 94 83 13 	call	0x2706	; 0x2706 <__divmodhi4>
    1f66:	ac 01       	movw	r20, r24
    1f68:	02 c0       	rjmp	.+4      	; 0x1f6e <__vector_9+0xba>
    1f6a:	49 e0       	ldi	r20, 0x09	; 9
    1f6c:	50 e0       	ldi	r21, 0x00	; 0
	int day_init = T1_stack.arr[0] == (T1_array[(T1_stack.arr[2]*10)+ T1_stack.arr[3] - 1] / 10)?1:0; //counter to count  
	int mon_max = T1_stack.arr[2] == 1?2:9; //counter to count 
    1f6e:	21 30       	cpi	r18, 0x01	; 1
    1f70:	31 05       	cpc	r19, r1
    1f72:	19 f0       	breq	.+6      	; 0x1f7a <__vector_9+0xc6>
    1f74:	69 e0       	ldi	r22, 0x09	; 9
    1f76:	70 e0       	ldi	r23, 0x00	; 0
    1f78:	02 c0       	rjmp	.+4      	; 0x1f7e <__vector_9+0xca>
    1f7a:	62 e0       	ldi	r22, 0x02	; 2
    1f7c:	70 e0       	ldi	r23, 0x00	; 0
	int mon_init = T1_stack.arr[2] == 1?1:0; //counter to count  
	

	count_0++;
    1f7e:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <count_0.1791>
    1f82:	90 91 df 00 	lds	r25, 0x00DF	; 0x8000df <count_0.1791+0x1>
    1f86:	01 96       	adiw	r24, 0x01	; 1
    1f88:	90 93 df 00 	sts	0x00DF, r25	; 0x8000df <count_0.1791+0x1>
    1f8c:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <count_0.1791>
	if (T1_OVF_No == 1)
    1f90:	80 90 92 00 	lds	r8, 0x0092	; 0x800092 <T1_OVF_No>
    1f94:	90 90 93 00 	lds	r9, 0x0093	; 0x800093 <T1_OVF_No+0x1>
    1f98:	a0 90 94 00 	lds	r10, 0x0094	; 0x800094 <T1_OVF_No+0x2>
    1f9c:	b0 90 95 00 	lds	r11, 0x0095	; 0x800095 <T1_OVF_No+0x3>
    1fa0:	a1 e0       	ldi	r26, 0x01	; 1
    1fa2:	8a 16       	cp	r8, r26
    1fa4:	91 04       	cpc	r9, r1
    1fa6:	a1 04       	cpc	r10, r1
    1fa8:	b1 04       	cpc	r11, r1
    1faa:	09 f0       	breq	.+2      	; 0x1fae <__vector_9+0xfa>
    1fac:	e2 c0       	rjmp	.+452    	; 0x2172 <__vector_9+0x2be>
	{
		if (count_0 == T1_OVF_No)
    1fae:	01 97       	sbiw	r24, 0x01	; 1
    1fb0:	09 f0       	breq	.+2      	; 0x1fb4 <__vector_9+0x100>
    1fb2:	fc c0       	rjmp	.+504    	; 0x21ac <__vector_9+0x2f8>
		{
			//write your code here
			T1_stack.arr[11]++;
    1fb4:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <T1_stack+0x16>
    1fb8:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <T1_stack+0x17>
    1fbc:	01 96       	adiw	r24, 0x01	; 1
					
			if(T1_stack.arr[11] > 9)
    1fbe:	8a 30       	cpi	r24, 0x0A	; 10
    1fc0:	91 05       	cpc	r25, r1
    1fc2:	2c f4       	brge	.+10     	; 0x1fce <__vector_9+0x11a>
	if (T1_OVF_No == 1)
	{
		if (count_0 == T1_OVF_No)
		{
			//write your code here
			T1_stack.arr[11]++;
    1fc4:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <T1_stack+0x17>
    1fc8:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <T1_stack+0x16>
    1fcc:	c7 c0       	rjmp	.+398    	; 0x215c <__vector_9+0x2a8>
					
			if(T1_stack.arr[11] > 9)
			{
				T1_stack.arr[11] = 0;
    1fce:	a0 e0       	ldi	r26, 0x00	; 0
    1fd0:	b1 e0       	ldi	r27, 0x01	; 1
    1fd2:	57 96       	adiw	r26, 0x17	; 23
    1fd4:	1c 92       	st	X, r1
    1fd6:	1e 92       	st	-X, r1
    1fd8:	56 97       	sbiw	r26, 0x16	; 22
				T1_stack.arr[10]++;
    1fda:	54 96       	adiw	r26, 0x14	; 20
    1fdc:	8d 91       	ld	r24, X+
    1fde:	9c 91       	ld	r25, X
    1fe0:	55 97       	sbiw	r26, 0x15	; 21
    1fe2:	01 96       	adiw	r24, 0x01	; 1

				if(T1_stack.arr[10] > 5)
    1fe4:	86 30       	cpi	r24, 0x06	; 6
    1fe6:	91 05       	cpc	r25, r1
    1fe8:	2c f4       	brge	.+10     	; 0x1ff4 <__vector_9+0x140>
			T1_stack.arr[11]++;
					
			if(T1_stack.arr[11] > 9)
			{
				T1_stack.arr[11] = 0;
				T1_stack.arr[10]++;
    1fea:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <T1_stack+0x15>
    1fee:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <T1_stack+0x14>
    1ff2:	b4 c0       	rjmp	.+360    	; 0x215c <__vector_9+0x2a8>

				if(T1_stack.arr[10] > 5)
				{
					T1_stack.arr[10] = 0;
    1ff4:	a0 e0       	ldi	r26, 0x00	; 0
    1ff6:	b1 e0       	ldi	r27, 0x01	; 1
    1ff8:	55 96       	adiw	r26, 0x15	; 21
    1ffa:	1c 92       	st	X, r1
    1ffc:	1e 92       	st	-X, r1
    1ffe:	54 97       	sbiw	r26, 0x14	; 20
					T1_stack.arr[9]++;
    2000:	52 96       	adiw	r26, 0x12	; 18
    2002:	8d 91       	ld	r24, X+
    2004:	9c 91       	ld	r25, X
    2006:	53 97       	sbiw	r26, 0x13	; 19
    2008:	01 96       	adiw	r24, 0x01	; 1

					if(T1_stack.arr[9] > 9)
    200a:	8a 30       	cpi	r24, 0x0A	; 10
    200c:	91 05       	cpc	r25, r1
    200e:	2c f4       	brge	.+10     	; 0x201a <__vector_9+0x166>
				T1_stack.arr[10]++;

				if(T1_stack.arr[10] > 5)
				{
					T1_stack.arr[10] = 0;
					T1_stack.arr[9]++;
    2010:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <T1_stack+0x13>
    2014:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <T1_stack+0x12>
    2018:	a1 c0       	rjmp	.+322    	; 0x215c <__vector_9+0x2a8>

					if(T1_stack.arr[9] > 9)
					{
						T1_stack.arr[9] = 0;
    201a:	a0 e0       	ldi	r26, 0x00	; 0
    201c:	b1 e0       	ldi	r27, 0x01	; 1
    201e:	53 96       	adiw	r26, 0x13	; 19
    2020:	1c 92       	st	X, r1
    2022:	1e 92       	st	-X, r1
    2024:	52 97       	sbiw	r26, 0x12	; 18
						T1_stack.arr[8]++;
    2026:	50 96       	adiw	r26, 0x10	; 16
    2028:	8d 91       	ld	r24, X+
    202a:	9c 91       	ld	r25, X
    202c:	51 97       	sbiw	r26, 0x11	; 17
    202e:	01 96       	adiw	r24, 0x01	; 1

						if(T1_stack.arr[8] > 5)
    2030:	86 30       	cpi	r24, 0x06	; 6
    2032:	91 05       	cpc	r25, r1
    2034:	2c f4       	brge	.+10     	; 0x2040 <__vector_9+0x18c>
					T1_stack.arr[9]++;

					if(T1_stack.arr[9] > 9)
					{
						T1_stack.arr[9] = 0;
						T1_stack.arr[8]++;
    2036:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <T1_stack+0x11>
    203a:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <T1_stack+0x10>
    203e:	8e c0       	rjmp	.+284    	; 0x215c <__vector_9+0x2a8>

						if(T1_stack.arr[8] > 5)
						{
							T1_stack.arr[8] = 0;
    2040:	a0 e0       	ldi	r26, 0x00	; 0
    2042:	b1 e0       	ldi	r27, 0x01	; 1
    2044:	51 96       	adiw	r26, 0x11	; 17
    2046:	1c 92       	st	X, r1
    2048:	1e 92       	st	-X, r1
    204a:	50 97       	sbiw	r26, 0x10	; 16
							T1_stack.arr[7]++;
    204c:	1e 96       	adiw	r26, 0x0e	; 14
    204e:	8d 91       	ld	r24, X+
    2050:	9c 91       	ld	r25, X
    2052:	1f 97       	sbiw	r26, 0x0f	; 15
    2054:	01 96       	adiw	r24, 0x01	; 1

							if(T1_stack.arr[7] > h_max)
    2056:	c8 16       	cp	r12, r24
    2058:	d9 06       	cpc	r13, r25
    205a:	2c f0       	brlt	.+10     	; 0x2066 <__vector_9+0x1b2>
						T1_stack.arr[8]++;

						if(T1_stack.arr[8] > 5)
						{
							T1_stack.arr[8] = 0;
							T1_stack.arr[7]++;
    205c:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <T1_stack+0xf>
    2060:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <T1_stack+0xe>
    2064:	7b c0       	rjmp	.+246    	; 0x215c <__vector_9+0x2a8>

							if(T1_stack.arr[7] > h_max)
							{
								T1_stack.arr[7] = 0;
    2066:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <T1_stack+0xf>
    206a:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <T1_stack+0xe>
								T1_stack.arr[6]++;
    206e:	21 96       	adiw	r28, 0x01	; 1

								if(T1_stack.arr[6] > 2)
    2070:	c3 30       	cpi	r28, 0x03	; 3
    2072:	d1 05       	cpc	r29, r1
    2074:	2c f4       	brge	.+10     	; 0x2080 <__vector_9+0x1cc>
							T1_stack.arr[7]++;

							if(T1_stack.arr[7] > h_max)
							{
								T1_stack.arr[7] = 0;
								T1_stack.arr[6]++;
    2076:	d0 93 0d 01 	sts	0x010D, r29	; 0x80010d <T1_stack+0xd>
    207a:	c0 93 0c 01 	sts	0x010C, r28	; 0x80010c <T1_stack+0xc>
    207e:	6e c0       	rjmp	.+220    	; 0x215c <__vector_9+0x2a8>

								if(T1_stack.arr[6] > 2)
								{
									T1_stack.arr[6] = 0;
    2080:	a0 e0       	ldi	r26, 0x00	; 0
    2082:	b1 e0       	ldi	r27, 0x01	; 1
    2084:	1d 96       	adiw	r26, 0x0d	; 13
    2086:	1c 92       	st	X, r1
    2088:	1e 92       	st	-X, r1
    208a:	1c 97       	sbiw	r26, 0x0c	; 12
									T1_stack.arr[1]++;
    208c:	12 96       	adiw	r26, 0x02	; 2
    208e:	8d 91       	ld	r24, X+
    2090:	9c 91       	ld	r25, X
    2092:	13 97       	sbiw	r26, 0x03	; 3
    2094:	01 96       	adiw	r24, 0x01	; 1
									
									if (T1_stack.arr[1] > day_max)
    2096:	48 17       	cp	r20, r24
    2098:	59 07       	cpc	r21, r25
    209a:	2c f0       	brlt	.+10     	; 0x20a6 <__vector_9+0x1f2>
								T1_stack.arr[6]++;

								if(T1_stack.arr[6] > 2)
								{
									T1_stack.arr[6] = 0;
									T1_stack.arr[1]++;
    209c:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <T1_stack+0x3>
    20a0:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <T1_stack+0x2>
    20a4:	5b c0       	rjmp	.+182    	; 0x215c <__vector_9+0x2a8>
									
									if (T1_stack.arr[1] > day_max)
									{
										T1_stack.arr[1] = day_init;
    20a6:	81 e0       	ldi	r24, 0x01	; 1
    20a8:	90 e0       	ldi	r25, 0x00	; 0
    20aa:	0e 17       	cp	r16, r30
    20ac:	1f 07       	cpc	r17, r31
    20ae:	11 f0       	breq	.+4      	; 0x20b4 <__vector_9+0x200>
    20b0:	80 e0       	ldi	r24, 0x00	; 0
    20b2:	90 e0       	ldi	r25, 0x00	; 0
    20b4:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <T1_stack+0x3>
    20b8:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <T1_stack+0x2>
										T1_stack.arr[0]++;
    20bc:	0f 5f       	subi	r16, 0xFF	; 255
    20be:	1f 4f       	sbci	r17, 0xFF	; 255
										
										if (T1_stack.arr[0] > (T1_array[(T1_stack.arr[2]*10)+ T1_stack.arr[3] - 1] / 10))
    20c0:	e0 17       	cp	r30, r16
    20c2:	f1 07       	cpc	r31, r17
    20c4:	2c f0       	brlt	.+10     	; 0x20d0 <__vector_9+0x21c>
									T1_stack.arr[1]++;
									
									if (T1_stack.arr[1] > day_max)
									{
										T1_stack.arr[1] = day_init;
										T1_stack.arr[0]++;
    20c6:	10 93 01 01 	sts	0x0101, r17	; 0x800101 <T1_stack+0x1>
    20ca:	00 93 00 01 	sts	0x0100, r16	; 0x800100 <T1_stack>
    20ce:	46 c0       	rjmp	.+140    	; 0x215c <__vector_9+0x2a8>
										
										if (T1_stack.arr[0] > (T1_array[(T1_stack.arr[2]*10)+ T1_stack.arr[3] - 1] / 10))
										{
											T1_stack.arr[0] = 0;
    20d0:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <T1_stack+0x1>
    20d4:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <T1_stack>
											T1_stack.arr[3]++;
    20d8:	8f ef       	ldi	r24, 0xFF	; 255
    20da:	e8 1a       	sub	r14, r24
    20dc:	f8 0a       	sbc	r15, r24
											
											if (T1_stack.arr[3] > mon_max)
    20de:	6e 15       	cp	r22, r14
    20e0:	7f 05       	cpc	r23, r15
    20e2:	2c f0       	brlt	.+10     	; 0x20ee <__vector_9+0x23a>
										T1_stack.arr[0]++;
										
										if (T1_stack.arr[0] > (T1_array[(T1_stack.arr[2]*10)+ T1_stack.arr[3] - 1] / 10))
										{
											T1_stack.arr[0] = 0;
											T1_stack.arr[3]++;
    20e4:	f0 92 07 01 	sts	0x0107, r15	; 0x800107 <T1_stack+0x7>
    20e8:	e0 92 06 01 	sts	0x0106, r14	; 0x800106 <T1_stack+0x6>
    20ec:	37 c0       	rjmp	.+110    	; 0x215c <__vector_9+0x2a8>
											
											if (T1_stack.arr[3] > mon_max)
											{
												T1_stack.arr[3] = mon_init;
    20ee:	81 e0       	ldi	r24, 0x01	; 1
    20f0:	90 e0       	ldi	r25, 0x00	; 0
    20f2:	21 30       	cpi	r18, 0x01	; 1
    20f4:	31 05       	cpc	r19, r1
    20f6:	11 f0       	breq	.+4      	; 0x20fc <__vector_9+0x248>
    20f8:	80 e0       	ldi	r24, 0x00	; 0
    20fa:	90 e0       	ldi	r25, 0x00	; 0
    20fc:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <T1_stack+0x7>
    2100:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <T1_stack+0x6>
												T1_stack.arr[2]++;
    2104:	2f 5f       	subi	r18, 0xFF	; 255
    2106:	3f 4f       	sbci	r19, 0xFF	; 255

												if (T1_stack.arr[2] > 1)
    2108:	22 30       	cpi	r18, 0x02	; 2
    210a:	31 05       	cpc	r19, r1
    210c:	2c f4       	brge	.+10     	; 0x2118 <__vector_9+0x264>
											T1_stack.arr[3]++;
											
											if (T1_stack.arr[3] > mon_max)
											{
												T1_stack.arr[3] = mon_init;
												T1_stack.arr[2]++;
    210e:	30 93 05 01 	sts	0x0105, r19	; 0x800105 <T1_stack+0x5>
    2112:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <T1_stack+0x4>
    2116:	22 c0       	rjmp	.+68     	; 0x215c <__vector_9+0x2a8>

												if (T1_stack.arr[2] > 1)
												{
													T1_stack.arr[2] = 0;
    2118:	e0 e0       	ldi	r30, 0x00	; 0
    211a:	f1 e0       	ldi	r31, 0x01	; 1
    211c:	15 82       	std	Z+5, r1	; 0x05
    211e:	14 82       	std	Z+4, r1	; 0x04
													T1_stack.arr[5]++;
    2120:	82 85       	ldd	r24, Z+10	; 0x0a
    2122:	93 85       	ldd	r25, Z+11	; 0x0b
    2124:	01 96       	adiw	r24, 0x01	; 1
													
													if (T1_stack.arr[5] > 9)
    2126:	8a 30       	cpi	r24, 0x0A	; 10
    2128:	91 05       	cpc	r25, r1
    212a:	2c f4       	brge	.+10     	; 0x2136 <__vector_9+0x282>
												T1_stack.arr[2]++;

												if (T1_stack.arr[2] > 1)
												{
													T1_stack.arr[2] = 0;
													T1_stack.arr[5]++;
    212c:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <T1_stack+0xb>
    2130:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <T1_stack+0xa>
    2134:	13 c0       	rjmp	.+38     	; 0x215c <__vector_9+0x2a8>
													
													if (T1_stack.arr[5] > 9)
													{
														T1_stack.arr[5] = 0;
    2136:	e0 e0       	ldi	r30, 0x00	; 0
    2138:	f1 e0       	ldi	r31, 0x01	; 1
    213a:	13 86       	std	Z+11, r1	; 0x0b
    213c:	12 86       	std	Z+10, r1	; 0x0a
														T1_stack.arr[4]++;
    213e:	80 85       	ldd	r24, Z+8	; 0x08
    2140:	91 85       	ldd	r25, Z+9	; 0x09
    2142:	01 96       	adiw	r24, 0x01	; 1
														
														if (T1_stack.arr[4] > 9)
    2144:	8a 30       	cpi	r24, 0x0A	; 10
    2146:	91 05       	cpc	r25, r1
    2148:	2c f4       	brge	.+10     	; 0x2154 <__vector_9+0x2a0>
													T1_stack.arr[5]++;
													
													if (T1_stack.arr[5] > 9)
													{
														T1_stack.arr[5] = 0;
														T1_stack.arr[4]++;
    214a:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <T1_stack+0x9>
    214e:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <T1_stack+0x8>
    2152:	04 c0       	rjmp	.+8      	; 0x215c <__vector_9+0x2a8>
														
														if (T1_stack.arr[4] > 9)
														{
															T1_stack.arr[4] = 0;
    2154:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <T1_stack+0x9>
    2158:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <T1_stack+0x8>
							}
						}
					}
				}
			}		
			count_0 = 0;
    215c:	10 92 df 00 	sts	0x00DF, r1	; 0x8000df <count_0.1791+0x1>
    2160:	10 92 de 00 	sts	0x00DE, r1	; 0x8000de <count_0.1791>
			TCNT1 = T1_Init_val;
    2164:	80 91 fc 00 	lds	r24, 0x00FC	; 0x8000fc <T1_Init_val>
    2168:	90 91 fd 00 	lds	r25, 0x00FD	; 0x8000fd <T1_Init_val+0x1>
    216c:	9d bd       	out	0x2d, r25	; 45
    216e:	8c bd       	out	0x2c, r24	; 44
    2170:	1d c0       	rjmp	.+58     	; 0x21ac <__vector_9+0x2f8>
		}
	}
	else
	{
		if (count_0 == 1)
    2172:	81 30       	cpi	r24, 0x01	; 1
    2174:	91 05       	cpc	r25, r1
    2176:	39 f4       	brne	.+14     	; 0x2186 <__vector_9+0x2d2>
		{
			TCNT1 = T1_Init_val_OVF;
    2178:	80 91 f8 00 	lds	r24, 0x00F8	; 0x8000f8 <T1_Init_val_OVF>
    217c:	90 91 f9 00 	lds	r25, 0x00F9	; 0x8000f9 <T1_Init_val_OVF+0x1>
    2180:	9d bd       	out	0x2d, r25	; 45
    2182:	8c bd       	out	0x2c, r24	; 44
    2184:	13 c0       	rjmp	.+38     	; 0x21ac <__vector_9+0x2f8>
		}
		else if (count_0 == T1_OVF_No)
    2186:	09 2e       	mov	r0, r25
    2188:	00 0c       	add	r0, r0
    218a:	aa 0b       	sbc	r26, r26
    218c:	bb 0b       	sbc	r27, r27
    218e:	88 16       	cp	r8, r24
    2190:	99 06       	cpc	r9, r25
    2192:	aa 06       	cpc	r10, r26
    2194:	bb 06       	cpc	r11, r27
    2196:	51 f4       	brne	.+20     	; 0x21ac <__vector_9+0x2f8>
		{
			//write your code here

			count_0 = 0;	
    2198:	10 92 df 00 	sts	0x00DF, r1	; 0x8000df <count_0.1791+0x1>
    219c:	10 92 de 00 	sts	0x00DE, r1	; 0x8000de <count_0.1791>
			TCNT1 = T1_Init_val;
    21a0:	80 91 fc 00 	lds	r24, 0x00FC	; 0x8000fc <T1_Init_val>
    21a4:	90 91 fd 00 	lds	r25, 0x00FD	; 0x8000fd <T1_Init_val+0x1>
    21a8:	9d bd       	out	0x2d, r25	; 45
    21aa:	8c bd       	out	0x2c, r24	; 44
		}
	}
}
    21ac:	ff 91       	pop	r31
    21ae:	ef 91       	pop	r30
    21b0:	df 91       	pop	r29
    21b2:	cf 91       	pop	r28
    21b4:	bf 91       	pop	r27
    21b6:	af 91       	pop	r26
    21b8:	9f 91       	pop	r25
    21ba:	8f 91       	pop	r24
    21bc:	7f 91       	pop	r23
    21be:	6f 91       	pop	r22
    21c0:	5f 91       	pop	r21
    21c2:	4f 91       	pop	r20
    21c4:	3f 91       	pop	r19
    21c6:	2f 91       	pop	r18
    21c8:	1f 91       	pop	r17
    21ca:	0f 91       	pop	r16
    21cc:	ff 90       	pop	r15
    21ce:	ef 90       	pop	r14
    21d0:	df 90       	pop	r13
    21d2:	cf 90       	pop	r12
    21d4:	bf 90       	pop	r11
    21d6:	af 90       	pop	r10
    21d8:	9f 90       	pop	r9
    21da:	8f 90       	pop	r8
    21dc:	0f 90       	pop	r0
    21de:	0f be       	out	0x3f, r0	; 63
    21e0:	0f 90       	pop	r0
    21e2:	1f 90       	pop	r1
    21e4:	18 95       	reti

000021e6 <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
    21e6:	1f 92       	push	r1
    21e8:	0f 92       	push	r0
    21ea:	0f b6       	in	r0, 0x3f	; 63
    21ec:	0f 92       	push	r0
    21ee:	11 24       	eor	r1, r1
    21f0:	4f 93       	push	r20
    21f2:	5f 93       	push	r21
    21f4:	6f 93       	push	r22
    21f6:	7f 93       	push	r23
    21f8:	8f 93       	push	r24
    21fa:	9f 93       	push	r25
    21fc:	af 93       	push	r26
    21fe:	bf 93       	push	r27
	static int count_0 = 0; //counter to count the number of overflows
	static int count_1 = 0; //counter to count
	count_0++;
    2200:	80 91 dc 00 	lds	r24, 0x00DC	; 0x8000dc <count_0.1802>
    2204:	90 91 dd 00 	lds	r25, 0x00DD	; 0x8000dd <count_0.1802+0x1>
    2208:	01 96       	adiw	r24, 0x01	; 1
    220a:	90 93 dd 00 	sts	0x00DD, r25	; 0x8000dd <count_0.1802+0x1>
    220e:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <count_0.1802>
	if (T1_OVF_No == 1)
    2212:	40 91 92 00 	lds	r20, 0x0092	; 0x800092 <T1_OVF_No>
    2216:	50 91 93 00 	lds	r21, 0x0093	; 0x800093 <T1_OVF_No+0x1>
    221a:	60 91 94 00 	lds	r22, 0x0094	; 0x800094 <T1_OVF_No+0x2>
    221e:	70 91 95 00 	lds	r23, 0x0095	; 0x800095 <T1_OVF_No+0x3>
    2222:	41 30       	cpi	r20, 0x01	; 1
    2224:	51 05       	cpc	r21, r1
    2226:	61 05       	cpc	r22, r1
    2228:	71 05       	cpc	r23, r1
    222a:	b1 f4       	brne	.+44     	; 0x2258 <__vector_7+0x72>
	{
		if (count_0 == T1_OVF_No)
    222c:	01 97       	sbiw	r24, 0x01	; 1
    222e:	d1 f5       	brne	.+116    	; 0x22a4 <__vector_7+0xbe>
		{
			//write your code here
			count_1++;
    2230:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <count_1.1803>
    2234:	90 91 db 00 	lds	r25, 0x00DB	; 0x8000db <count_1.1803+0x1>
    2238:	01 96       	adiw	r24, 0x01	; 1
    223a:	90 93 db 00 	sts	0x00DB, r25	; 0x8000db <count_1.1803+0x1>
    223e:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <count_1.1803>

			count_0 = 0;
    2242:	10 92 dd 00 	sts	0x00DD, r1	; 0x8000dd <count_0.1802+0x1>
    2246:	10 92 dc 00 	sts	0x00DC, r1	; 0x8000dc <count_0.1802>
			OCR1A = T1_Init_val;
    224a:	80 91 fc 00 	lds	r24, 0x00FC	; 0x8000fc <T1_Init_val>
    224e:	90 91 fd 00 	lds	r25, 0x00FD	; 0x8000fd <T1_Init_val+0x1>
    2252:	9b bd       	out	0x2b, r25	; 43
    2254:	8a bd       	out	0x2a, r24	; 42
    2256:	26 c0       	rjmp	.+76     	; 0x22a4 <__vector_7+0xbe>
		}
	}
	else
	{
		if (count_0 == 1)
    2258:	81 30       	cpi	r24, 0x01	; 1
    225a:	91 05       	cpc	r25, r1
    225c:	39 f4       	brne	.+14     	; 0x226c <__vector_7+0x86>
		{
			OCR1A = T1_Init_val_OVF;
    225e:	80 91 f8 00 	lds	r24, 0x00F8	; 0x8000f8 <T1_Init_val_OVF>
    2262:	90 91 f9 00 	lds	r25, 0x00F9	; 0x8000f9 <T1_Init_val_OVF+0x1>
    2266:	9b bd       	out	0x2b, r25	; 43
    2268:	8a bd       	out	0x2a, r24	; 42
    226a:	1c c0       	rjmp	.+56     	; 0x22a4 <__vector_7+0xbe>
		}
		else if (count_0 == T1_OVF_No)
    226c:	09 2e       	mov	r0, r25
    226e:	00 0c       	add	r0, r0
    2270:	aa 0b       	sbc	r26, r26
    2272:	bb 0b       	sbc	r27, r27
    2274:	48 17       	cp	r20, r24
    2276:	59 07       	cpc	r21, r25
    2278:	6a 07       	cpc	r22, r26
    227a:	7b 07       	cpc	r23, r27
    227c:	99 f4       	brne	.+38     	; 0x22a4 <__vector_7+0xbe>
		{
			//write your code here
			count_1++;
    227e:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <count_1.1803>
    2282:	90 91 db 00 	lds	r25, 0x00DB	; 0x8000db <count_1.1803+0x1>
    2286:	01 96       	adiw	r24, 0x01	; 1
    2288:	90 93 db 00 	sts	0x00DB, r25	; 0x8000db <count_1.1803+0x1>
    228c:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <count_1.1803>
			}
			if (count_1 % 4 == 0)
			{
				(*ptr2)();
			}*/
			count_0 = 0;
    2290:	10 92 dd 00 	sts	0x00DD, r1	; 0x8000dd <count_0.1802+0x1>
    2294:	10 92 dc 00 	sts	0x00DC, r1	; 0x8000dc <count_0.1802>
			OCR1A = T1_Init_val;
    2298:	80 91 fc 00 	lds	r24, 0x00FC	; 0x8000fc <T1_Init_val>
    229c:	90 91 fd 00 	lds	r25, 0x00FD	; 0x8000fd <T1_Init_val+0x1>
    22a0:	9b bd       	out	0x2b, r25	; 43
    22a2:	8a bd       	out	0x2a, r24	; 42
		}
	}	
}
    22a4:	bf 91       	pop	r27
    22a6:	af 91       	pop	r26
    22a8:	9f 91       	pop	r25
    22aa:	8f 91       	pop	r24
    22ac:	7f 91       	pop	r23
    22ae:	6f 91       	pop	r22
    22b0:	5f 91       	pop	r21
    22b2:	4f 91       	pop	r20
    22b4:	0f 90       	pop	r0
    22b6:	0f be       	out	0x3f, r0	; 63
    22b8:	0f 90       	pop	r0
    22ba:	1f 90       	pop	r1
    22bc:	18 95       	reti

000022be <TIMER2_INIT>:
///////////////****************************Timer2 functions****************************///////////////

void TIMER2_INIT(void)
{
	/*Global Interrupt*/
	SREG = GLOBAL_INT << 7;
    22be:	80 e8       	ldi	r24, 0x80	; 128
    22c0:	8f bf       	out	0x3f, r24	; 63
	
	/*Peripheral Interrupt*/
	#if TIMER2_MODE == NORMAL_MODE
	TIMSK = (TIMER2_OVF_INT << 6) | (TIMSK & 0x17);
    22c2:	89 b7       	in	r24, 0x39	; 57
    22c4:	87 71       	andi	r24, 0x17	; 23
    22c6:	80 64       	ori	r24, 0x40	; 64
    22c8:	89 bf       	out	0x39, r24	; 57
    22ca:	08 95       	ret

000022cc <TIMER2_Start>:

	
}
void TIMER2_Start(void)
{
	TCCR2 = TIMER2_CLOCK;
    22cc:	87 e0       	ldi	r24, 0x07	; 7
    22ce:	85 bd       	out	0x25, r24	; 37
    22d0:	08 95       	ret

000022d2 <TIMER2_Stop>:
}
void TIMER2_Stop(void)
{
	TCCR2 = T2_NO_CLOCK;
    22d2:	15 bc       	out	0x25, r1	; 37
    22d4:	08 95       	ret

000022d6 <TIMER2_SetDelay>:
}
void TIMER2_SetDelay(Uint32 delay)
{
    22d6:	4f 92       	push	r4
    22d8:	5f 92       	push	r5
    22da:	6f 92       	push	r6
    22dc:	7f 92       	push	r7
    22de:	8f 92       	push	r8
    22e0:	9f 92       	push	r9
    22e2:	af 92       	push	r10
    22e4:	bf 92       	push	r11
    22e6:	cf 92       	push	r12
    22e8:	df 92       	push	r13
    22ea:	ef 92       	push	r14
    22ec:	ff 92       	push	r15
    22ee:	0f 93       	push	r16
    22f0:	1f 93       	push	r17
    22f2:	cf 93       	push	r28
    22f4:	df 93       	push	r29
    22f6:	cd b7       	in	r28, 0x3d	; 61
    22f8:	de b7       	in	r29, 0x3e	; 62
    22fa:	2a 97       	sbiw	r28, 0x0a	; 10
    22fc:	0f b6       	in	r0, 0x3f	; 63
    22fe:	f8 94       	cli
    2300:	de bf       	out	0x3e, r29	; 62
    2302:	0f be       	out	0x3f, r0	; 63
    2304:	cd bf       	out	0x3d, r28	; 61
    2306:	9b 01       	movw	r18, r22
    2308:	ac 01       	movw	r20, r24
	Uint8 Tick_time, check = 1;
	Uint32 i;
	Uint32 Tick_num;
	Uint8 OVF_buf; //variable to store the possible number of overflows
	Tick_time = 1024 / 16; //tick_time in micro seconds
	Tick_num = (delay * 1000) / Tick_time; //total number of ticks needed to generate our time
    230a:	a8 ee       	ldi	r26, 0xE8	; 232
    230c:	b3 e0       	ldi	r27, 0x03	; 3
    230e:	0e 94 b9 13 	call	0x2772	; 0x2772 <__muluhisi3>
    2312:	6d 83       	std	Y+5, r22	; 0x05
    2314:	7e 83       	std	Y+6, r23	; 0x06
    2316:	8f 83       	std	Y+7, r24	; 0x07
    2318:	98 87       	std	Y+8, r25	; 0x08
    231a:	2b 01       	movw	r4, r22
    231c:	3c 01       	movw	r6, r24
    231e:	68 94       	set
    2320:	15 f8       	bld	r1, 5
    2322:	76 94       	lsr	r7
    2324:	67 94       	ror	r6
    2326:	57 94       	ror	r5
    2328:	47 94       	ror	r4
    232a:	16 94       	lsr	r1
    232c:	d1 f7       	brne	.-12     	; 0x2322 <TIMER2_SetDelay+0x4c>
	
	//Normal mode
	#if TIMER2_MODE == NORMAL_MODE
	//case of tick_num is less than 256 (16.4 ms)
	if (Tick_num <= 256)
    232e:	21 e0       	ldi	r18, 0x01	; 1
    2330:	42 16       	cp	r4, r18
    2332:	52 06       	cpc	r5, r18
    2334:	61 04       	cpc	r6, r1
    2336:	71 04       	cpc	r7, r1
    2338:	90 f4       	brcc	.+36     	; 0x235e <TIMER2_SetDelay+0x88>
	{
		T2_Init_val = 256 - Tick_num;
    233a:	80 e0       	ldi	r24, 0x00	; 0
    233c:	91 e0       	ldi	r25, 0x01	; 1
    233e:	a0 e0       	ldi	r26, 0x00	; 0
    2340:	b0 e0       	ldi	r27, 0x00	; 0
    2342:	84 19       	sub	r24, r4
    2344:	95 09       	sbc	r25, r5
    2346:	a6 09       	sbc	r26, r6
    2348:	b7 09       	sbc	r27, r7
    234a:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <T2_Init_val>
    234e:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <T2_Init_val+0x1>
    2352:	a0 93 24 01 	sts	0x0124, r26	; 0x800124 <T2_Init_val+0x2>
    2356:	b0 93 25 01 	sts	0x0125, r27	; 0x800125 <T2_Init_val+0x3>
		TCNT2 = T2_Init_val;
    235a:	84 bd       	out	0x24, r24	; 36
    235c:	90 c0       	rjmp	.+288    	; 0x247e <TIMER2_SetDelay+0x1a8>
    235e:	0f 2e       	mov	r0, r31
    2360:	fe e7       	ldi	r31, 0x7E	; 126
    2362:	8f 2e       	mov	r8, r31
    2364:	91 2c       	mov	r9, r1
    2366:	a1 2c       	mov	r10, r1
    2368:	b1 2c       	mov	r11, r1
    236a:	f0 2d       	mov	r31, r0
    236c:	11 e0       	ldi	r17, 0x01	; 1
    236e:	c1 2c       	mov	r12, r1
    2370:	d1 2c       	mov	r13, r1
    2372:	76 01       	movw	r14, r12
    2374:	d3 94       	inc	r13
			{
				T2_OVF_No = Tick_num / i;
				T2_Init_val = 256 - i; //initial value at the first OVF
				T2_Init_val_OVF = 256 - i; //initialize value at the rest of OVF
				TCNT2 = T2_Init_val; //initializing the TCNT0 with Init_val
				check = 0; //variable to use in checking of number of OVF being integer or decimal
    2376:	00 e0       	ldi	r16, 0x00	; 0
	//case of tick_num is bigger than 256 (16.4 ms)
	else
	{
		for (i = 130; i <= 256; i++) //check if the number of overflows is integer
		{
			OVF_buf = Tick_num / i; //buffer to store the number of OVF at every register size
    2378:	c3 01       	movw	r24, r6
    237a:	b2 01       	movw	r22, r4
    237c:	a7 01       	movw	r20, r14
    237e:	96 01       	movw	r18, r12
    2380:	28 19       	sub	r18, r8
    2382:	39 09       	sbc	r19, r9
    2384:	4a 09       	sbc	r20, r10
    2386:	5b 09       	sbc	r21, r11
    2388:	29 83       	std	Y+1, r18	; 0x01
    238a:	3a 83       	std	Y+2, r19	; 0x02
    238c:	4b 83       	std	Y+3, r20	; 0x03
    238e:	5c 83       	std	Y+4, r21	; 0x04
    2390:	0e 94 97 13 	call	0x272e	; 0x272e <__udivmodsi4>
    2394:	e2 2f       	mov	r30, r18
    2396:	3a 87       	std	Y+10, r19	; 0x0a
    2398:	49 87       	std	Y+9, r20	; 0x09
    239a:	f5 2f       	mov	r31, r21
			if (Tick_num == (OVF_buf * i))
    239c:	a2 2f       	mov	r26, r18
    239e:	b0 e0       	ldi	r27, 0x00	; 0
    23a0:	29 81       	ldd	r18, Y+1	; 0x01
    23a2:	3a 81       	ldd	r19, Y+2	; 0x02
    23a4:	4b 81       	ldd	r20, Y+3	; 0x03
    23a6:	5c 81       	ldd	r21, Y+4	; 0x04
    23a8:	0e 94 b9 13 	call	0x2772	; 0x2772 <__muluhisi3>
    23ac:	46 16       	cp	r4, r22
    23ae:	57 06       	cpc	r5, r23
    23b0:	68 06       	cpc	r6, r24
    23b2:	79 06       	cpc	r7, r25
    23b4:	e1 f4       	brne	.+56     	; 0x23ee <TIMER2_SetDelay+0x118>
			{
				T2_OVF_No = Tick_num / i;
    23b6:	e0 93 8e 00 	sts	0x008E, r30	; 0x80008e <T2_OVF_No>
    23ba:	3a 85       	ldd	r19, Y+10	; 0x0a
    23bc:	30 93 8f 00 	sts	0x008F, r19	; 0x80008f <T2_OVF_No+0x1>
    23c0:	49 85       	ldd	r20, Y+9	; 0x09
    23c2:	40 93 90 00 	sts	0x0090, r20	; 0x800090 <T2_OVF_No+0x2>
    23c6:	f0 93 91 00 	sts	0x0091, r31	; 0x800091 <T2_OVF_No+0x3>
				T2_Init_val = 256 - i; //initial value at the first OVF
    23ca:	80 92 22 01 	sts	0x0122, r8	; 0x800122 <T2_Init_val>
    23ce:	90 92 23 01 	sts	0x0123, r9	; 0x800123 <T2_Init_val+0x1>
    23d2:	a0 92 24 01 	sts	0x0124, r10	; 0x800124 <T2_Init_val+0x2>
    23d6:	b0 92 25 01 	sts	0x0125, r11	; 0x800125 <T2_Init_val+0x3>
				T2_Init_val_OVF = 256 - i; //initialize value at the rest of OVF
    23da:	80 92 1e 01 	sts	0x011E, r8	; 0x80011e <T2_Init_val_OVF>
    23de:	90 92 1f 01 	sts	0x011F, r9	; 0x80011f <T2_Init_val_OVF+0x1>
    23e2:	a0 92 20 01 	sts	0x0120, r10	; 0x800120 <T2_Init_val_OVF+0x2>
    23e6:	b0 92 21 01 	sts	0x0121, r11	; 0x800121 <T2_Init_val_OVF+0x3>
				TCNT2 = T2_Init_val; //initializing the TCNT0 with Init_val
    23ea:	84 bc       	out	0x24, r8	; 36
				check = 0; //variable to use in checking of number of OVF being integer or decimal
    23ec:	10 2f       	mov	r17, r16
    23ee:	51 e0       	ldi	r21, 0x01	; 1
    23f0:	85 1a       	sub	r8, r21
    23f2:	91 08       	sbc	r9, r1
    23f4:	a1 08       	sbc	r10, r1
    23f6:	b1 08       	sbc	r11, r1
		TCNT2 = T2_Init_val;
	}
	//case of tick_num is bigger than 256 (16.4 ms)
	else
	{
		for (i = 130; i <= 256; i++) //check if the number of overflows is integer
    23f8:	8f ef       	ldi	r24, 0xFF	; 255
    23fa:	88 16       	cp	r8, r24
    23fc:	98 06       	cpc	r9, r24
    23fe:	a8 06       	cpc	r10, r24
    2400:	b8 06       	cpc	r11, r24
    2402:	09 f0       	breq	.+2      	; 0x2406 <TIMER2_SetDelay+0x130>
    2404:	b9 cf       	rjmp	.-142    	; 0x2378 <TIMER2_SetDelay+0xa2>
				TCNT2 = T2_Init_val; //initializing the TCNT0 with Init_val
				check = 0; //variable to use in checking of number of OVF being integer or decimal
			}
		}
		//
		if (check) //check if the number of OVF is decimal
    2406:	11 23       	and	r17, r17
    2408:	d1 f1       	breq	.+116    	; 0x247e <TIMER2_SetDelay+0x1a8>
		{
			T2_OVF_No += Tick_num / 256;
    240a:	8d 81       	ldd	r24, Y+5	; 0x05
    240c:	9e 81       	ldd	r25, Y+6	; 0x06
    240e:	af 81       	ldd	r26, Y+7	; 0x07
    2410:	b8 85       	ldd	r27, Y+8	; 0x08
    2412:	07 2e       	mov	r0, r23
    2414:	7e e0       	ldi	r23, 0x0E	; 14
    2416:	b6 95       	lsr	r27
    2418:	a7 95       	ror	r26
    241a:	97 95       	ror	r25
    241c:	87 95       	ror	r24
    241e:	7a 95       	dec	r23
    2420:	d1 f7       	brne	.-12     	; 0x2416 <TIMER2_SetDelay+0x140>
    2422:	70 2d       	mov	r23, r0
    2424:	40 91 8e 00 	lds	r20, 0x008E	; 0x80008e <T2_OVF_No>
    2428:	50 91 8f 00 	lds	r21, 0x008F	; 0x80008f <T2_OVF_No+0x1>
    242c:	60 91 90 00 	lds	r22, 0x0090	; 0x800090 <T2_OVF_No+0x2>
    2430:	70 91 91 00 	lds	r23, 0x0091	; 0x800091 <T2_OVF_No+0x3>
    2434:	84 0f       	add	r24, r20
    2436:	95 1f       	adc	r25, r21
    2438:	a6 1f       	adc	r26, r22
    243a:	b7 1f       	adc	r27, r23
    243c:	80 93 8e 00 	sts	0x008E, r24	; 0x80008e <T2_OVF_No>
    2440:	90 93 8f 00 	sts	0x008F, r25	; 0x80008f <T2_OVF_No+0x1>
    2444:	a0 93 90 00 	sts	0x0090, r26	; 0x800090 <T2_OVF_No+0x2>
    2448:	b0 93 91 00 	sts	0x0091, r27	; 0x800091 <T2_OVF_No+0x3>
			T2_Init_val = 256 - (Tick_num % 256);
    244c:	80 e0       	ldi	r24, 0x00	; 0
    244e:	91 e0       	ldi	r25, 0x01	; 1
    2450:	a0 e0       	ldi	r26, 0x00	; 0
    2452:	b0 e0       	ldi	r27, 0x00	; 0
    2454:	84 19       	sub	r24, r4
    2456:	91 09       	sbc	r25, r1
    2458:	a1 09       	sbc	r26, r1
    245a:	b1 09       	sbc	r27, r1
    245c:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <T2_Init_val>
    2460:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <T2_Init_val+0x1>
    2464:	a0 93 24 01 	sts	0x0124, r26	; 0x800124 <T2_Init_val+0x2>
    2468:	b0 93 25 01 	sts	0x0125, r27	; 0x800125 <T2_Init_val+0x3>
			T2_Init_val_OVF = 0;
    246c:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <T2_Init_val_OVF>
    2470:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <T2_Init_val_OVF+0x1>
    2474:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <T2_Init_val_OVF+0x2>
    2478:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <T2_Init_val_OVF+0x3>
			TCNT2 = T2_Init_val; //initializing the TCNT0
    247c:	84 bd       	out	0x24, r24	; 36
			OCR2 = T2_Init_val;
		}
	}
	#endif

}
    247e:	2a 96       	adiw	r28, 0x0a	; 10
    2480:	0f b6       	in	r0, 0x3f	; 63
    2482:	f8 94       	cli
    2484:	de bf       	out	0x3e, r29	; 62
    2486:	0f be       	out	0x3f, r0	; 63
    2488:	cd bf       	out	0x3d, r28	; 61
    248a:	df 91       	pop	r29
    248c:	cf 91       	pop	r28
    248e:	1f 91       	pop	r17
    2490:	0f 91       	pop	r16
    2492:	ff 90       	pop	r15
    2494:	ef 90       	pop	r14
    2496:	df 90       	pop	r13
    2498:	cf 90       	pop	r12
    249a:	bf 90       	pop	r11
    249c:	af 90       	pop	r10
    249e:	9f 90       	pop	r9
    24a0:	8f 90       	pop	r8
    24a2:	7f 90       	pop	r7
    24a4:	6f 90       	pop	r6
    24a6:	5f 90       	pop	r5
    24a8:	4f 90       	pop	r4
    24aa:	08 95       	ret

000024ac <__vector_5>:
ISR(TIMER2_OVF_vect)
{
    24ac:	1f 92       	push	r1
    24ae:	0f 92       	push	r0
    24b0:	0f b6       	in	r0, 0x3f	; 63
    24b2:	0f 92       	push	r0
    24b4:	11 24       	eor	r1, r1
    24b6:	2f 93       	push	r18
    24b8:	3f 93       	push	r19
    24ba:	4f 93       	push	r20
    24bc:	5f 93       	push	r21
    24be:	6f 93       	push	r22
    24c0:	7f 93       	push	r23
    24c2:	8f 93       	push	r24
    24c4:	9f 93       	push	r25
    24c6:	af 93       	push	r26
    24c8:	bf 93       	push	r27
	static int count_0 = 0; //counter to count the number of overflows
	static int h_max = 10; //counter to count  
	count_0++;
    24ca:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <count_0.1829>
    24ce:	90 91 d9 00 	lds	r25, 0x00D9	; 0x8000d9 <count_0.1829+0x1>
    24d2:	01 96       	adiw	r24, 0x01	; 1
    24d4:	90 93 d9 00 	sts	0x00D9, r25	; 0x8000d9 <count_0.1829+0x1>
    24d8:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <count_0.1829>
	if (T2_OVF_No == 1)
    24dc:	40 91 8e 00 	lds	r20, 0x008E	; 0x80008e <T2_OVF_No>
    24e0:	50 91 8f 00 	lds	r21, 0x008F	; 0x80008f <T2_OVF_No+0x1>
    24e4:	60 91 90 00 	lds	r22, 0x0090	; 0x800090 <T2_OVF_No+0x2>
    24e8:	70 91 91 00 	lds	r23, 0x0091	; 0x800091 <T2_OVF_No+0x3>
    24ec:	41 30       	cpi	r20, 0x01	; 1
    24ee:	51 05       	cpc	r21, r1
    24f0:	61 05       	cpc	r22, r1
    24f2:	71 05       	cpc	r23, r1
    24f4:	59 f4       	brne	.+22     	; 0x250c <__vector_5+0x60>
	{
		if (count_0 == T2_OVF_No)
    24f6:	01 97       	sbiw	r24, 0x01	; 1
    24f8:	09 f0       	breq	.+2      	; 0x24fc <__vector_5+0x50>
    24fa:	93 c0       	rjmp	.+294    	; 0x2622 <__vector_5+0x176>
		{
			//write your code here

			count_0 = 0;
    24fc:	10 92 d9 00 	sts	0x00D9, r1	; 0x8000d9 <count_0.1829+0x1>
    2500:	10 92 d8 00 	sts	0x00D8, r1	; 0x8000d8 <count_0.1829>
			TCNT2 = T2_Init_val;
    2504:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <T2_Init_val>
    2508:	84 bd       	out	0x24, r24	; 36
    250a:	8b c0       	rjmp	.+278    	; 0x2622 <__vector_5+0x176>
		}
	}
	else
	{
		if (count_0 == 1)
    250c:	81 30       	cpi	r24, 0x01	; 1
    250e:	91 05       	cpc	r25, r1
    2510:	21 f4       	brne	.+8      	; 0x251a <__vector_5+0x6e>
		{
			TCNT2 = T2_Init_val_OVF;
    2512:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <T2_Init_val_OVF>
    2516:	84 bd       	out	0x24, r24	; 36
    2518:	84 c0       	rjmp	.+264    	; 0x2622 <__vector_5+0x176>
		}
		else if (count_0 == T2_OVF_No)
    251a:	09 2e       	mov	r0, r25
    251c:	00 0c       	add	r0, r0
    251e:	aa 0b       	sbc	r26, r26
    2520:	bb 0b       	sbc	r27, r27
    2522:	48 17       	cp	r20, r24
    2524:	59 07       	cpc	r21, r25
    2526:	6a 07       	cpc	r22, r26
    2528:	7b 07       	cpc	r23, r27
    252a:	09 f0       	breq	.+2      	; 0x252e <__vector_5+0x82>
    252c:	7a c0       	rjmp	.+244    	; 0x2622 <__vector_5+0x176>
		{
			//write your code here
			T2_count_sec_0++;
    252e:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <T2_count_sec_0>
    2532:	90 91 f1 00 	lds	r25, 0x00F1	; 0x8000f1 <T2_count_sec_0+0x1>
    2536:	01 96       	adiw	r24, 0x01	; 1
			
			if(T2_count_sec_0 > 9)
    2538:	8a 30       	cpi	r24, 0x0A	; 10
    253a:	91 05       	cpc	r25, r1
    253c:	2c f4       	brge	.+10     	; 0x2548 <__vector_5+0x9c>
			TCNT2 = T2_Init_val_OVF;
		}
		else if (count_0 == T2_OVF_No)
		{
			//write your code here
			T2_count_sec_0++;
    253e:	90 93 f1 00 	sts	0x00F1, r25	; 0x8000f1 <T2_count_sec_0+0x1>
    2542:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <T2_count_sec_0>
    2546:	66 c0       	rjmp	.+204    	; 0x2614 <__vector_5+0x168>
			
			if(T2_count_sec_0 > 9)
			{
				T2_count_sec_0 = 0;
    2548:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <T2_count_sec_0+0x1>
    254c:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <T2_count_sec_0>
				T2_count_sec_1++;
    2550:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <T2_count_sec_1>
    2554:	90 91 ef 00 	lds	r25, 0x00EF	; 0x8000ef <T2_count_sec_1+0x1>
    2558:	01 96       	adiw	r24, 0x01	; 1

				if(T2_count_sec_1 > 5)
    255a:	86 30       	cpi	r24, 0x06	; 6
    255c:	91 05       	cpc	r25, r1
    255e:	2c f4       	brge	.+10     	; 0x256a <__vector_5+0xbe>
			T2_count_sec_0++;
			
			if(T2_count_sec_0 > 9)
			{
				T2_count_sec_0 = 0;
				T2_count_sec_1++;
    2560:	90 93 ef 00 	sts	0x00EF, r25	; 0x8000ef <T2_count_sec_1+0x1>
    2564:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <T2_count_sec_1>
    2568:	55 c0       	rjmp	.+170    	; 0x2614 <__vector_5+0x168>

				if(T2_count_sec_1 > 5)
				{
					T2_count_sec_1 = 0;
    256a:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <T2_count_sec_1+0x1>
    256e:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <T2_count_sec_1>
					T2_count_min_0++;
    2572:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <T2_count_min_0>
    2576:	90 91 ed 00 	lds	r25, 0x00ED	; 0x8000ed <T2_count_min_0+0x1>
    257a:	01 96       	adiw	r24, 0x01	; 1

					if(T2_count_min_0 > 9)
    257c:	8a 30       	cpi	r24, 0x0A	; 10
    257e:	91 05       	cpc	r25, r1
    2580:	2c f4       	brge	.+10     	; 0x258c <__vector_5+0xe0>
				T2_count_sec_1++;

				if(T2_count_sec_1 > 5)
				{
					T2_count_sec_1 = 0;
					T2_count_min_0++;
    2582:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <T2_count_min_0+0x1>
    2586:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <T2_count_min_0>
    258a:	44 c0       	rjmp	.+136    	; 0x2614 <__vector_5+0x168>

					if(T2_count_min_0 > 9)
					{
						T2_count_min_0 = 0;
    258c:	10 92 ed 00 	sts	0x00ED, r1	; 0x8000ed <T2_count_min_0+0x1>
    2590:	10 92 ec 00 	sts	0x00EC, r1	; 0x8000ec <T2_count_min_0>
						T2_count_min_1++;
    2594:	80 91 ea 00 	lds	r24, 0x00EA	; 0x8000ea <T2_count_min_1>
    2598:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <T2_count_min_1+0x1>
    259c:	01 96       	adiw	r24, 0x01	; 1

						if(T2_count_min_1 > 5)
    259e:	86 30       	cpi	r24, 0x06	; 6
    25a0:	91 05       	cpc	r25, r1
    25a2:	2c f4       	brge	.+10     	; 0x25ae <__vector_5+0x102>
					T2_count_min_0++;

					if(T2_count_min_0 > 9)
					{
						T2_count_min_0 = 0;
						T2_count_min_1++;
    25a4:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <T2_count_min_1+0x1>
    25a8:	80 93 ea 00 	sts	0x00EA, r24	; 0x8000ea <T2_count_min_1>
    25ac:	33 c0       	rjmp	.+102    	; 0x2614 <__vector_5+0x168>

						if(T2_count_min_1 > 5)
						{
							T2_count_min_1 = 0;
    25ae:	10 92 eb 00 	sts	0x00EB, r1	; 0x8000eb <T2_count_min_1+0x1>
    25b2:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <T2_count_min_1>
							T2_count_h0++;
    25b6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <T2_count_h0>
    25ba:	90 91 e9 00 	lds	r25, 0x00E9	; 0x8000e9 <T2_count_h0+0x1>
    25be:	01 96       	adiw	r24, 0x01	; 1
    25c0:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <T2_count_h0+0x1>
    25c4:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <T2_count_h0>

							if(T2_count_h0 > h_max - 1)
    25c8:	20 91 74 00 	lds	r18, 0x0074	; 0x800074 <h_max.1830>
    25cc:	30 91 75 00 	lds	r19, 0x0075	; 0x800075 <h_max.1830+0x1>
    25d0:	21 50       	subi	r18, 0x01	; 1
    25d2:	31 09       	sbc	r19, r1
    25d4:	28 17       	cp	r18, r24
    25d6:	39 07       	cpc	r19, r25
    25d8:	ec f4       	brge	.+58     	; 0x2614 <__vector_5+0x168>
							{
								T2_count_h0 = 0;
    25da:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <T2_count_h0+0x1>
    25de:	10 92 e8 00 	sts	0x00E8, r1	; 0x8000e8 <T2_count_h0>
								T2_count_h1++;
    25e2:	80 91 e6 00 	lds	r24, 0x00E6	; 0x8000e6 <T2_count_h1>
    25e6:	90 91 e7 00 	lds	r25, 0x00E7	; 0x8000e7 <T2_count_h1+0x1>
    25ea:	01 96       	adiw	r24, 0x01	; 1
    25ec:	90 93 e7 00 	sts	0x00E7, r25	; 0x8000e7 <T2_count_h1+0x1>
    25f0:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <T2_count_h1>

								if (T2_count_h1 == 2)
    25f4:	82 30       	cpi	r24, 0x02	; 2
    25f6:	91 05       	cpc	r25, r1
    25f8:	39 f4       	brne	.+14     	; 0x2608 <__vector_5+0x15c>
								{
									h_max = 4;
    25fa:	84 e0       	ldi	r24, 0x04	; 4
    25fc:	90 e0       	ldi	r25, 0x00	; 0
    25fe:	90 93 75 00 	sts	0x0075, r25	; 0x800075 <h_max.1830+0x1>
    2602:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <h_max.1830>
    2606:	06 c0       	rjmp	.+12     	; 0x2614 <__vector_5+0x168>
								}

								if(T2_count_h1 > 2)
    2608:	03 97       	sbiw	r24, 0x03	; 3
    260a:	24 f0       	brlt	.+8      	; 0x2614 <__vector_5+0x168>
								{
									T2_count_h1 = 0;
    260c:	10 92 e7 00 	sts	0x00E7, r1	; 0x8000e7 <T2_count_h1+0x1>
    2610:	10 92 e6 00 	sts	0x00E6, r1	; 0x8000e6 <T2_count_h1>
							}
						}
					}
				}
			}
			count_0 = 0;
    2614:	10 92 d9 00 	sts	0x00D9, r1	; 0x8000d9 <count_0.1829+0x1>
    2618:	10 92 d8 00 	sts	0x00D8, r1	; 0x8000d8 <count_0.1829>
			TCNT2 = T2_Init_val;
    261c:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <T2_Init_val>
    2620:	84 bd       	out	0x24, r24	; 36
		}
	}
}
    2622:	bf 91       	pop	r27
    2624:	af 91       	pop	r26
    2626:	9f 91       	pop	r25
    2628:	8f 91       	pop	r24
    262a:	7f 91       	pop	r23
    262c:	6f 91       	pop	r22
    262e:	5f 91       	pop	r21
    2630:	4f 91       	pop	r20
    2632:	3f 91       	pop	r19
    2634:	2f 91       	pop	r18
    2636:	0f 90       	pop	r0
    2638:	0f be       	out	0x3f, r0	; 63
    263a:	0f 90       	pop	r0
    263c:	1f 90       	pop	r1
    263e:	18 95       	reti

00002640 <__vector_4>:

ISR(TIMER2_COMP_vect)
{
    2640:	1f 92       	push	r1
    2642:	0f 92       	push	r0
    2644:	0f b6       	in	r0, 0x3f	; 63
    2646:	0f 92       	push	r0
    2648:	11 24       	eor	r1, r1
    264a:	4f 93       	push	r20
    264c:	5f 93       	push	r21
    264e:	6f 93       	push	r22
    2650:	7f 93       	push	r23
    2652:	8f 93       	push	r24
    2654:	9f 93       	push	r25
    2656:	af 93       	push	r26
    2658:	bf 93       	push	r27
	static int count_0 = 0; //counter to count the number of overflows
	static int count_1 = 0; //counter to count
	count_0++;
    265a:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <count_0.1836>
    265e:	90 91 d7 00 	lds	r25, 0x00D7	; 0x8000d7 <count_0.1836+0x1>
    2662:	01 96       	adiw	r24, 0x01	; 1
    2664:	90 93 d7 00 	sts	0x00D7, r25	; 0x8000d7 <count_0.1836+0x1>
    2668:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <count_0.1836>
	if (T2_OVF_No == 1)
    266c:	40 91 8e 00 	lds	r20, 0x008E	; 0x80008e <T2_OVF_No>
    2670:	50 91 8f 00 	lds	r21, 0x008F	; 0x80008f <T2_OVF_No+0x1>
    2674:	60 91 90 00 	lds	r22, 0x0090	; 0x800090 <T2_OVF_No+0x2>
    2678:	70 91 91 00 	lds	r23, 0x0091	; 0x800091 <T2_OVF_No+0x3>
    267c:	41 30       	cpi	r20, 0x01	; 1
    267e:	51 05       	cpc	r21, r1
    2680:	61 05       	cpc	r22, r1
    2682:	71 05       	cpc	r23, r1
    2684:	99 f4       	brne	.+38     	; 0x26ac <__vector_4+0x6c>
	{
		if (count_0 == T2_OVF_No)
    2686:	01 97       	sbiw	r24, 0x01	; 1
    2688:	89 f5       	brne	.+98     	; 0x26ec <__vector_4+0xac>
		{
			//write your code here
			count_1++;
    268a:	80 91 d4 00 	lds	r24, 0x00D4	; 0x8000d4 <count_1.1837>
    268e:	90 91 d5 00 	lds	r25, 0x00D5	; 0x8000d5 <count_1.1837+0x1>
    2692:	01 96       	adiw	r24, 0x01	; 1
    2694:	90 93 d5 00 	sts	0x00D5, r25	; 0x8000d5 <count_1.1837+0x1>
    2698:	80 93 d4 00 	sts	0x00D4, r24	; 0x8000d4 <count_1.1837>
			}
			if (count_1 % 4 == 0)
			{
				(*ptr2)();
			}*/
			count_0 = 0;
    269c:	10 92 d7 00 	sts	0x00D7, r1	; 0x8000d7 <count_0.1836+0x1>
    26a0:	10 92 d6 00 	sts	0x00D6, r1	; 0x8000d6 <count_0.1836>
			OCR2 = T2_Init_val;
    26a4:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <T2_Init_val>
    26a8:	83 bd       	out	0x23, r24	; 35
    26aa:	20 c0       	rjmp	.+64     	; 0x26ec <__vector_4+0xac>
		}
	}
	else
	{
		if (count_0 == 1)
    26ac:	81 30       	cpi	r24, 0x01	; 1
    26ae:	91 05       	cpc	r25, r1
    26b0:	21 f4       	brne	.+8      	; 0x26ba <__vector_4+0x7a>
		{
			OCR2 = T2_Init_val_OVF;
    26b2:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <T2_Init_val_OVF>
    26b6:	83 bd       	out	0x23, r24	; 35
    26b8:	19 c0       	rjmp	.+50     	; 0x26ec <__vector_4+0xac>
		}
		else if (count_0 == T2_OVF_No)
    26ba:	09 2e       	mov	r0, r25
    26bc:	00 0c       	add	r0, r0
    26be:	aa 0b       	sbc	r26, r26
    26c0:	bb 0b       	sbc	r27, r27
    26c2:	48 17       	cp	r20, r24
    26c4:	59 07       	cpc	r21, r25
    26c6:	6a 07       	cpc	r22, r26
    26c8:	7b 07       	cpc	r23, r27
    26ca:	81 f4       	brne	.+32     	; 0x26ec <__vector_4+0xac>
		{
			//write your code here
			count_1++;
    26cc:	80 91 d4 00 	lds	r24, 0x00D4	; 0x8000d4 <count_1.1837>
    26d0:	90 91 d5 00 	lds	r25, 0x00D5	; 0x8000d5 <count_1.1837+0x1>
    26d4:	01 96       	adiw	r24, 0x01	; 1
    26d6:	90 93 d5 00 	sts	0x00D5, r25	; 0x8000d5 <count_1.1837+0x1>
    26da:	80 93 d4 00 	sts	0x00D4, r24	; 0x8000d4 <count_1.1837>
			}
			if (count_1 % 4 == 0)
			{
				(*ptr2)();
			}*/
			count_0 = 0;
    26de:	10 92 d7 00 	sts	0x00D7, r1	; 0x8000d7 <count_0.1836+0x1>
    26e2:	10 92 d6 00 	sts	0x00D6, r1	; 0x8000d6 <count_0.1836>
			OCR2 = T2_Init_val;
    26e6:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <T2_Init_val>
    26ea:	83 bd       	out	0x23, r24	; 35
		}
	}
}
    26ec:	bf 91       	pop	r27
    26ee:	af 91       	pop	r26
    26f0:	9f 91       	pop	r25
    26f2:	8f 91       	pop	r24
    26f4:	7f 91       	pop	r23
    26f6:	6f 91       	pop	r22
    26f8:	5f 91       	pop	r21
    26fa:	4f 91       	pop	r20
    26fc:	0f 90       	pop	r0
    26fe:	0f be       	out	0x3f, r0	; 63
    2700:	0f 90       	pop	r0
    2702:	1f 90       	pop	r1
    2704:	18 95       	reti

00002706 <__divmodhi4>:
    2706:	97 fb       	bst	r25, 7
    2708:	07 2e       	mov	r0, r23
    270a:	16 f4       	brtc	.+4      	; 0x2710 <__divmodhi4+0xa>
    270c:	00 94       	com	r0
    270e:	07 d0       	rcall	.+14     	; 0x271e <__divmodhi4_neg1>
    2710:	77 fd       	sbrc	r23, 7
    2712:	09 d0       	rcall	.+18     	; 0x2726 <__divmodhi4_neg2>
    2714:	0e 94 c4 13 	call	0x2788	; 0x2788 <__udivmodhi4>
    2718:	07 fc       	sbrc	r0, 7
    271a:	05 d0       	rcall	.+10     	; 0x2726 <__divmodhi4_neg2>
    271c:	3e f4       	brtc	.+14     	; 0x272c <__divmodhi4_exit>

0000271e <__divmodhi4_neg1>:
    271e:	90 95       	com	r25
    2720:	81 95       	neg	r24
    2722:	9f 4f       	sbci	r25, 0xFF	; 255
    2724:	08 95       	ret

00002726 <__divmodhi4_neg2>:
    2726:	70 95       	com	r23
    2728:	61 95       	neg	r22
    272a:	7f 4f       	sbci	r23, 0xFF	; 255

0000272c <__divmodhi4_exit>:
    272c:	08 95       	ret

0000272e <__udivmodsi4>:
    272e:	a1 e2       	ldi	r26, 0x21	; 33
    2730:	1a 2e       	mov	r1, r26
    2732:	aa 1b       	sub	r26, r26
    2734:	bb 1b       	sub	r27, r27
    2736:	fd 01       	movw	r30, r26
    2738:	0d c0       	rjmp	.+26     	; 0x2754 <__udivmodsi4_ep>

0000273a <__udivmodsi4_loop>:
    273a:	aa 1f       	adc	r26, r26
    273c:	bb 1f       	adc	r27, r27
    273e:	ee 1f       	adc	r30, r30
    2740:	ff 1f       	adc	r31, r31
    2742:	a2 17       	cp	r26, r18
    2744:	b3 07       	cpc	r27, r19
    2746:	e4 07       	cpc	r30, r20
    2748:	f5 07       	cpc	r31, r21
    274a:	20 f0       	brcs	.+8      	; 0x2754 <__udivmodsi4_ep>
    274c:	a2 1b       	sub	r26, r18
    274e:	b3 0b       	sbc	r27, r19
    2750:	e4 0b       	sbc	r30, r20
    2752:	f5 0b       	sbc	r31, r21

00002754 <__udivmodsi4_ep>:
    2754:	66 1f       	adc	r22, r22
    2756:	77 1f       	adc	r23, r23
    2758:	88 1f       	adc	r24, r24
    275a:	99 1f       	adc	r25, r25
    275c:	1a 94       	dec	r1
    275e:	69 f7       	brne	.-38     	; 0x273a <__udivmodsi4_loop>
    2760:	60 95       	com	r22
    2762:	70 95       	com	r23
    2764:	80 95       	com	r24
    2766:	90 95       	com	r25
    2768:	9b 01       	movw	r18, r22
    276a:	ac 01       	movw	r20, r24
    276c:	bd 01       	movw	r22, r26
    276e:	cf 01       	movw	r24, r30
    2770:	08 95       	ret

00002772 <__muluhisi3>:
    2772:	0e 94 d8 13 	call	0x27b0	; 0x27b0 <__umulhisi3>
    2776:	a5 9f       	mul	r26, r21
    2778:	90 0d       	add	r25, r0
    277a:	b4 9f       	mul	r27, r20
    277c:	90 0d       	add	r25, r0
    277e:	a4 9f       	mul	r26, r20
    2780:	80 0d       	add	r24, r0
    2782:	91 1d       	adc	r25, r1
    2784:	11 24       	eor	r1, r1
    2786:	08 95       	ret

00002788 <__udivmodhi4>:
    2788:	aa 1b       	sub	r26, r26
    278a:	bb 1b       	sub	r27, r27
    278c:	51 e1       	ldi	r21, 0x11	; 17
    278e:	07 c0       	rjmp	.+14     	; 0x279e <__udivmodhi4_ep>

00002790 <__udivmodhi4_loop>:
    2790:	aa 1f       	adc	r26, r26
    2792:	bb 1f       	adc	r27, r27
    2794:	a6 17       	cp	r26, r22
    2796:	b7 07       	cpc	r27, r23
    2798:	10 f0       	brcs	.+4      	; 0x279e <__udivmodhi4_ep>
    279a:	a6 1b       	sub	r26, r22
    279c:	b7 0b       	sbc	r27, r23

0000279e <__udivmodhi4_ep>:
    279e:	88 1f       	adc	r24, r24
    27a0:	99 1f       	adc	r25, r25
    27a2:	5a 95       	dec	r21
    27a4:	a9 f7       	brne	.-22     	; 0x2790 <__udivmodhi4_loop>
    27a6:	80 95       	com	r24
    27a8:	90 95       	com	r25
    27aa:	bc 01       	movw	r22, r24
    27ac:	cd 01       	movw	r24, r26
    27ae:	08 95       	ret

000027b0 <__umulhisi3>:
    27b0:	a2 9f       	mul	r26, r18
    27b2:	b0 01       	movw	r22, r0
    27b4:	b3 9f       	mul	r27, r19
    27b6:	c0 01       	movw	r24, r0
    27b8:	a3 9f       	mul	r26, r19
    27ba:	70 0d       	add	r23, r0
    27bc:	81 1d       	adc	r24, r1
    27be:	11 24       	eor	r1, r1
    27c0:	91 1d       	adc	r25, r1
    27c2:	b2 9f       	mul	r27, r18
    27c4:	70 0d       	add	r23, r0
    27c6:	81 1d       	adc	r24, r1
    27c8:	11 24       	eor	r1, r1
    27ca:	91 1d       	adc	r25, r1
    27cc:	08 95       	ret

000027ce <_exit>:
    27ce:	f8 94       	cli

000027d0 <__stop_program>:
    27d0:	ff cf       	rjmp	.-2      	; 0x27d0 <__stop_program>
